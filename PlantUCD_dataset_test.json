[
  {
    "HumanLang": "TrafficEvent includes attributes such as eventId, eventType, timestamp, and description, and is associated with EventLogger, which provides the logEvent method.",
    "PlantUML": "class TrafficEvent {\n    +eventId: String\n    +eventType: String\n    +timestamp: Date\n    +description: String\n}\n\nclass EventLogger {\n    +logEvent(event: TrafficEvent): void\n}\n\nTrafficEvent \"1\" -- \"1\" EventLogger : \"logged by\"",
    "Model": "I90",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "TrafficEvent",
          "children": [
            {
              "type": "attribute",
              "value": "eventId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "eventType",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "EventLogger"
                }
              ],
              "label": "\"logged by\"",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "EventLogger",
          "children": [
            {
              "type": "method",
              "value": "logEvent(event: TrafficEvent)",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The Database class incorporates the methods storeData and retrieveData, and is connected to TrafficSensor, which has the sensorId attribute.",
    "PlantUML": "class Database {\n  +storeData(data: Any): void\n  +retrieveData(query: String): List<Any>\n}\n\nclass TrafficSensor {\n  +sensorId: String\n}\n\nDatabase \"1\" -- \"*\" TrafficSensor : stores",
    "Model": "I90",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Database",
          "children": [
            {
              "type": "method",
              "value": "storeData(data: Any)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "retrieveData(query: String)",
              "visibility": "+",
              "data_type": "List<Any>"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "TrafficSensor"
                }
              ],
              "label": "stores",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "TrafficSensor",
          "children": [
            {
              "type": "attribute",
              "value": "sensorId",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "UserInterface provides displayMap and displayReport functions and is related to TrafficReport, which has reportId, reportDate, and trafficCondition attributes.",
    "PlantUML": "class UserInterface {\n  +displayMap(map: TrafficMap): void\n  +displayReport(report: TrafficReport): void\n}\n\nclass TrafficReport {\n  +reportId: String\n  +reportDate: Date\n  +trafficCondition: TrafficCondition\n}\n\nUserInterface \"1\" -- \"*\" TrafficReport : generates",
    "Model": "I90",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "UserInterface",
          "children": [
            {
              "type": "method",
              "value": "displayMap(map: TrafficMap)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "displayReport(report: TrafficReport)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "TrafficReport"
                }
              ],
              "label": "generates",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "TrafficReport",
          "children": [
            {
              "type": "attribute",
              "value": "reportId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "reportDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "trafficCondition",
              "visibility": "+",
              "data_type": "TrafficCondition"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "MaintenanceAlert holds attributes like alertId, timestamp, sensorId, and issueDescription, and connects to MaintenanceManager, which defines sendAlert.",
    "PlantUML": "class MaintenanceAlert {\n  +alertId: String\n  +timestamp: Date\n  +sensorId: String\n  +issueDescription: String\n}\n\nclass MaintenanceManager {\n  +sendAlert(alert: MaintenanceAlert): void\n}\n\nMaintenanceAlert \"1\" -- \"1\" MaintenanceManager : triggers",
    "Model": "I90",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "MaintenanceAlert",
          "children": [
            {
              "type": "attribute",
              "value": "alertId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "sensorId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "issueDescription",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "MaintenanceManager"
                }
              ],
              "label": "triggers",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "MaintenanceManager",
          "children": [
            {
              "type": "method",
              "value": "sendAlert(alert: MaintenanceAlert)",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "TrafficPredictor includes a method called predictTrafficConditions and is linked to HistoricalData.",
    "PlantUML": "class TrafficPredictor {\n  +predictTrafficConditions(data: List<HistoricalData>, realTimeData: TrafficCondition): TrafficCondition\n}\n\nHistoricalData \"1\" -- \"*\" TrafficPredictor : \"analyzed by\"",
    "Model": "I90",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "TrafficPredictor",
          "children": [
            {
              "type": "method",
              "value": "predictTrafficConditions(data: List<HistoricalData>, realTimeData: TrafficCondition)",
              "visibility": "+",
              "data_type": "TrafficCondition"
            }
          ]
        },
        {
          "type": "class",
          "value": "HistoricalData",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "TrafficPredictor"
                }
              ],
              "label": "\"analyzed by\"",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Patient contains attributes such as patientID, name, dob, address, contactNumber, and email, and connects to MedicalHistory.",
    "PlantUML": "class Patient {\n  +patientID: String\n  +name: String\n  +dob: Date\n  +address: String\n  +contactNumber: String\n  +email: String\n}\nPatient \"1\" -- \"0..*\" MedicalHistory : has",
    "Model": "I91",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Patient",
          "children": [
            {
              "type": "attribute",
              "value": "patientID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "dob",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "address",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "contactNumber",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "MedicalHistory"
                }
              ],
              "label": "has",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "MedicalHistory",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Doctor has doctorID, name, specialization, contactNumber, and email attributes, and is associated with Patient.",
    "PlantUML": "class Doctor {\n  +doctorID: String\n  +name: String\n  +specialization: String\n  +contactNumber: String\n  +email: String\n}\nDoctor \"1\" -- \"0..*\" Patient : treats",
    "Model": "I91",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Doctor",
          "children": [
            {
              "type": "attribute",
              "value": "doctorID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "specialization",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "contactNumber",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Patient"
                }
              ],
              "label": "treats",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Patient",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Appointment consists of appointmentID, date, time, patientID, and doctorID, and is linked to both Doctor and Patient.",
    "PlantUML": "class Appointment {\n  +appointmentID: String\n  +date: Date\n  +time: Time\n  +patientID: String\n  +doctorID: String\n}\n\nAppointment \"0..*\" -- \"1\" Doctor : assignedTo\nAppointment \"0..*\" -- \"1\" Patient : scheduledBy",
    "Model": "I91",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Appointment",
          "children": [
            {
              "type": "attribute",
              "value": "appointmentID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "date",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "time",
              "visibility": "+",
              "data_type": "Time"
            },
            {
              "type": "attribute",
              "value": "patientID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "doctorID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Doctor"
                }
              ],
              "label": "assignedTo",
              "multiplicity1": "0..*",
              "multiplicity2": "1"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Patient"
                }
              ],
              "label": "scheduledBy",
              "multiplicity1": "0..*",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Doctor",
          "children": []
        },
        {
          "type": "class",
          "value": "Patient",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "MedicalHistory holds historyID, diagnosis, treatment, medications, and date attributes, and is related to Patient.",
    "PlantUML": "class MedicalHistory {\n  +historyID: String\n  +diagnosis: String\n  +treatment: String\n  +medications: String\n  +date: Date\n}\n\nclass Patient {\n}\n\nMedicalHistory \"1\" -- \"1\" Patient : belongsTo",
    "Model": "I91",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "MedicalHistory",
          "children": [
            {
              "type": "attribute",
              "value": "historyID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "diagnosis",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "treatment",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "medications",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "date",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Patient"
                }
              ],
              "label": "belongsTo",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Patient",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Prescription features prescriptionID, medication, dosage, duration, and dateIssued, and links to both Doctor and Patient.",
    "PlantUML": "class Prescription {\n  +prescriptionID: String\n  +medication: String\n  +dosage: String\n  +duration: String\n  +dateIssued: Date\n}\n\nPrescription \"0..*\" -- \"1\" Doctor : issuedBy\nPrescription \"0..*\" -- \"1\" Patient : for",
    "Model": "I91",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Prescription",
          "children": [
            {
              "type": "attribute",
              "value": "prescriptionID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "medication",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "dosage",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "duration",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "dateIssued",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Doctor"
                }
              ],
              "label": "issuedBy",
              "multiplicity1": "0..*",
              "multiplicity2": "1"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Patient"
                }
              ],
              "label": "for",
              "multiplicity1": "0..*",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Doctor",
          "children": []
        },
        {
          "type": "class",
          "value": "Patient",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Bill includes billID, amount, and issueDate attributes, and is connected to both Patient and Doctor.",
    "PlantUML": "class Bill {\n  +billID: String\n  +amount: Float\n  +issueDate: Date\n}\nBill \"0..*\" -- \"1\" Patient : generatedFor\nBill \"0..*\" -- \"1\" Doctor : billedFor",
    "Model": "I91",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Bill",
          "children": [
            {
              "type": "attribute",
              "value": "billID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "amount",
              "visibility": "+",
              "data_type": "float"
            },
            {
              "type": "attribute",
              "value": "issueDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Patient"
                }
              ],
              "label": "generatedFor",
              "multiplicity1": "0..*",
              "multiplicity2": "1"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Doctor"
                }
              ],
              "label": "billedFor",
              "multiplicity1": "0..*",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Patient",
          "children": []
        },
        {
          "type": "class",
          "value": "Doctor",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "LabTest contains testID, testName, results, and dateOrdered attributes, and is related to both Doctor and Patient.",
    "PlantUML": "class LabTest {\n  +testID: String\n  +testName: String\n  +results: String\n  +dateOrdered: Date\n}\n\nclass Doctor {\n}\n\nclass Patient {\n}\n\nLabTest \"0..*\" -- \"1\" Doctor : orderedBy\nLabTest \"0..*\" -- \"1\" Patient : requestedBy",
    "Model": "I91",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "LabTest",
          "children": [
            {
              "type": "attribute",
              "value": "testID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "testName",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "results",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "dateOrdered",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Doctor"
                }
              ],
              "label": "orderedBy",
              "multiplicity1": "0..*",
              "multiplicity2": "1"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Patient"
                }
              ],
              "label": "requestedBy",
              "multiplicity1": "0..*",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Doctor",
          "children": []
        },
        {
          "type": "class",
          "value": "Patient",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "MedicalImage includes imageID, imageType, imageFile, and dateTaken, and is associated with Patient.",
    "PlantUML": "class MedicalImage {\n  +imageID: String\n  +imageType: String\n  +imageFile: Blob\n  +dateTaken: Date\n}\n\nMedicalImage \"1\" -- \"1\" Patient : associatedWith",
    "Model": "I91",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "MedicalImage",
          "children": [
            {
              "type": "attribute",
              "value": "imageID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "imageType",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "imageFile",
              "visibility": "+",
              "data_type": "Blob"
            },
            {
              "type": "attribute",
              "value": "dateTaken",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Patient"
                }
              ],
              "label": "associatedWith",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Patient",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "User comprises userID, username, password, and role attributes, and is linked to Appointment and Bill.",
    "PlantUML": "class User {\n  +userID: String\n  +username: String\n  +password: String\n  +role: String\n}\n\nUser \"1\" -- \"0..*\" Appointment : manages\nUser \"1\" -- \"0..*\" Bill : generates",
    "Model": "I91",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "username",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "role",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Appointment"
                }
              ],
              "label": "manages",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Bill"
                }
              ],
              "label": "generates",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Appointment",
          "children": []
        },
        {
          "type": "class",
          "value": "Bill",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Security defines securityLevel and encryptionType attributes and is associated with both User and Patient.",
    "PlantUML": "class Security {\n  +securityLevel: String\n  +encryptionType: String\n}\n\nSecurity \"1\" -- \"1\" User : manages\nSecurity \"1\" -- \"1\" Patient : protects",
    "Model": "I91",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Security",
          "children": [
            {
              "type": "attribute",
              "value": "securityLevel",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "encryptionType",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "manages",
              "multiplicity1": "1",
              "multiplicity2": "1"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Patient"
                }
              ],
              "label": "protects",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        },
        {
          "type": "class",
          "value": "Patient",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "User inherits from Admin and is part of Task.",
    "PlantUML": "class User {\n  +String username\n  +String password\n  +String role\n}\n\nclass Admin {\n  +void createUser()\n  +void deleteUser()\n}\n\nUser <|-- Admin\nUser \"1\" o-- \"1..*\" Task : \"assigns\"",
    "Model": "I92",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Admin"
                }
              ]
            },
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "Task"
                }
              ],
              "label": "\"assigns\"",
              "multiplicity1": "1",
              "multiplicity2": "1..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Admin",
          "children": []
        },
        {
          "type": "class",
          "value": "Task",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Task features taskName, description, and dueDate attributes, is part of User, and contains Process.",
    "PlantUML": "class Task {\n  +taskName : String\n  +description : String\n  +dueDate : Date\n}\n\nTask \"1\" o-- \"1..*\" User : \"assigned to\"\nTask \"1\" *-- \"1\" Process : \"part of\"",
    "Model": "I92",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Task",
          "children": [
            {
              "type": "attribute",
              "value": "taskName",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "dueDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "\"assigned to\"",
              "multiplicity1": "1",
              "multiplicity2": "1..*"
            },
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Process"
                }
              ],
              "label": "\"part of\"",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        },
        {
          "type": "class",
          "value": "Process",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Process holds processName and status attributes, includes Task, and belongs to User.",
    "PlantUML": "class Process {\n  +processName : String\n  +status : String\n}\n\nProcess \"1\" o-- \"1..*\" Task : \"contains\"\nProcess \"1\" o-- \"1..*\" User : \"owned by\"",
    "Model": "I92",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Process",
          "children": [
            {
              "type": "attribute",
              "value": "processName",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "Task"
                }
              ],
              "label": "\"contains\"",
              "multiplicity1": "1",
              "multiplicity2": "1..*"
            },
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "\"owned by\"",
              "multiplicity1": "1",
              "multiplicity2": "1..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Task",
          "children": []
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Notification has message and timestamp attributes, is part of User, and includes Task.",
    "PlantUML": "class Notification {\n  +message : String\n  +timestamp : Date\n}\nNotification \"1\" o-- \"1\" User : \"sent to\"\nNotification  \"1\" o-- \"1\" Task : \"related to\"",
    "Model": "I92",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Notification",
          "children": [
            {
              "type": "attribute",
              "value": "message",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "\"sent to\"",
              "multiplicity1": "1",
              "multiplicity2": "1"
            },
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "Task"
                }
              ],
              "label": "\"related to\"",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        },
        {
          "type": "class",
          "value": "Task",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "AuditLog records action, timestamp, and user, and includes both User and Process.",
    "PlantUML": "class AuditLog {\n  +action: String\n  +timestamp: Date\n  +user: String\n}\n\nAuditLog \"1\" o-- \"1\" User : \"created by\"\nAuditLog  \"1\" o-- \"1\" Process : \"related to\"",
    "Model": "I92",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AuditLog",
          "children": [
            {
              "type": "attribute",
              "value": "action",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "user",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "\"created by\"",
              "multiplicity1": "1",
              "multiplicity2": "1"
            },
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "Process"
                }
              ],
              "label": "\"related to\"",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        },
        {
          "type": "class",
          "value": "Process",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Role contains the roleName attribute, includes User, and has Permission as a component.",
    "PlantUML": "class Role {\n  +roleName:String\n}\n\nclass User {\n}\n\nclass Permission {\n}\n\nRole \"1\" o-- \"1..*\" User : \"assigned to\"\nRole \"1\"  *-- \"1\" Permission : grants",
    "Model": "I92",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Role",
          "children": [
            {
              "type": "attribute",
              "value": "roleName",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "\"assigned to\"",
              "multiplicity1": "1",
              "multiplicity2": "1..*"
            },
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Permission"
                }
              ],
              "label": "grants",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        },
        {
          "type": "class",
          "value": "Permission",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Document consists of documentName, fileType, and uploadDate, is part of Task, and associated with User.",
    "PlantUML": "class Document {\n  +documentName : String\n  +fileType : String\n  +uploadDate : Date\n}\n\nDocument \"1\" o-- \"1\" Task : \"linked to\"\nDocument  \"1\" o-- \"1\" User : \"uploaded by\"",
    "Model": "I92",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Document",
          "children": [
            {
              "type": "attribute",
              "value": "documentName",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "fileType",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "uploadDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "Task"
                }
              ],
              "label": "\"linked to\"",
              "multiplicity1": "1",
              "multiplicity2": "1"
            },
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "\"uploaded by\"",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Task",
          "children": []
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Report contains reportType and generationDate, and is aggregated under both User and Task.",
    "PlantUML": "class Report {\n  +reportType: String\n  +generationDate: Date\n}\n\nReport \"1\" o-- \"1\" User : \"generated by\"\nReport \"1\" o-- \"1..*\" Task : includes",
    "Model": "I92",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Report",
          "children": [
            {
              "type": "attribute",
              "value": "reportType",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "generationDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "\"generated by\"",
              "multiplicity1": "1",
              "multiplicity2": "1"
            },
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "Task"
                }
              ],
              "label": "includes",
              "multiplicity1": "1",
              "multiplicity2": "1..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        },
        {
          "type": "class",
          "value": "Task",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "ProcessLifecycle is part of Process and contains Task.",
    "PlantUML": "class ProcessLifecycle {\n  +String stage\n  +Date startDate\n  +Date endDate\n}\nProcessLifecycle \"1\" o-- \"1\" Process : tracks\nProcessLifecycle \"1\" *-- \"1\" Task : \"involved in\"",
    "Model": "I92",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ProcessLifecycle",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "Process"
                }
              ],
              "label": "tracks",
              "multiplicity1": "1",
              "multiplicity2": "1"
            },
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Task"
                }
              ],
              "label": "\"involved in\"",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Process",
          "children": []
        },
        {
          "type": "class",
          "value": "Task",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "ExternalSystem is integrated into both Task and User.",
    "PlantUML": "class ExternalSystem {\n  +String systemName\n}\nExternalSystem \"1\" o-- \"1..*\" Task : \"interacts with\"\nExternalSystem \"1\" o-- \"1\" User : \"connected to\"",
    "Model": "I92",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ExternalSystem",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "Task"
                }
              ],
              "label": "\"interacts with\"",
              "multiplicity1": "1",
              "multiplicity2": "1..*"
            },
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "\"connected to\"",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Task",
          "children": []
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "ProcurementOrder includes orderID, orderDate, and orderStatus, and links to both Supplier and Product, where Supplier has supplierID, name, and contactInfo, and Product defines productID, productName, and price.",
    "PlantUML": "class ProcurementOrder {\n  +orderID : int\n  +orderDate : date\n  +orderStatus : String\n}\n\nclass Supplier {\n  +supplierID : int\n  +name : String\n  +contactInfo : String\n}\n\nclass Product {\n  +productID : int\n  +productName : String\n  +price : double\n}\n\nProcurementOrder \"1\" -- \"1..*\" Supplier : \"places Order\"\nProcurementOrder \"1\" -- \"1..*\" Product : \"includes Product\"",
    "Model": "I93",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ProcurementOrder",
          "children": [
            {
              "type": "attribute",
              "value": "orderID",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "orderDate",
              "visibility": "+",
              "data_type": "date"
            },
            {
              "type": "attribute",
              "value": "orderStatus",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Supplier"
                }
              ],
              "label": "\"places Order\"",
              "multiplicity1": "1",
              "multiplicity2": "1..*"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Product"
                }
              ],
              "label": "\"includes Product\"",
              "multiplicity1": "1",
              "multiplicity2": "1..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Supplier",
          "children": [
            {
              "type": "attribute",
              "value": "supplierID",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "contactInfo",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Product",
          "children": [
            {
              "type": "attribute",
              "value": "productID",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "productName",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "price",
              "visibility": "+",
              "data_type": "double"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Supplier has supplierID, name, contactInfo, and rating, and is connected to ProcurementOrder.",
    "PlantUML": "class Supplier {\n  +supplierID: int\n  +name: String\n  +contactInfo: String\n  +rating: double\n}\nSupplier \"1\" -- \"0..*\" ProcurementOrder : \"manages Orders\"",
    "Model": "I93",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Supplier",
          "children": [
            {
              "type": "attribute",
              "value": "supplierID",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "contactInfo",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "rating",
              "visibility": "+",
              "data_type": "double"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "ProcurementOrder"
                }
              ],
              "label": "\"manages Orders\"",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "ProcurementOrder",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Product defines productID, productName, price, and stockQuantity, and is linked to Inventory, which includes productID and quantityInStock.",
    "PlantUML": "class Product {\n  +productID : int\n  +productName : String\n  +price : double\n  +stockQuantity : int\n}\n\nclass Inventory {\n  +productID : int\n  +quantityInStock : int\n}\n\nProduct \"1\" -- \"1\" Inventory : \"manages stock\"",
    "Model": "I93",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Product",
          "children": [
            {
              "type": "attribute",
              "value": "productID",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "productName",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "price",
              "visibility": "+",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "stockQuantity",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Inventory"
                }
              ],
              "label": "\"manages stock\"",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Inventory",
          "children": [
            {
              "type": "attribute",
              "value": "productID",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "quantityInStock",
              "visibility": "+",
              "data_type": "int"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "PurchaseRequest contains requestID and status, is related to Employee, and links to Product, while Employee holds employeeID and name.",
    "PlantUML": "class PurchaseRequest {\n  +requestID: int\n  +status: String\n}\n\nclass Employee {\n  +employeeID: int\n  +name: String\n}\n\nPurchaseRequest \"1\" -- \"1\" Employee : \"initiatedBy\"\nPurchaseRequest \"1\" -- \"1..*\" Product : \"containsProduct\"",
    "Model": "I93",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "PurchaseRequest",
          "children": [
            {
              "type": "attribute",
              "value": "requestID",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Employee"
                }
              ],
              "label": "\"initiatedBy\"",
              "multiplicity1": "1",
              "multiplicity2": "1"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Product"
                }
              ],
              "label": "\"containsProduct\"",
              "multiplicity1": "1",
              "multiplicity2": "1..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Employee",
          "children": [
            {
              "type": "attribute",
              "value": "employeeID",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Product",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Invoice includes invoiceID, invoiceDate, and amount, and is associated with ProcurementOrder.",
    "PlantUML": "class Invoice {\n  +invoiceID : int\n  +invoiceDate : date\n  +amount : double\n}\nProcurementOrder \"1\" -- \"1..*\" Invoice : \"generates invoice\"",
    "Model": "I93",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Invoice",
          "children": [
            {
              "type": "attribute",
              "value": "invoiceID",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "invoiceDate",
              "visibility": "+",
              "data_type": "date"
            },
            {
              "type": "attribute",
              "value": "amount",
              "visibility": "+",
              "data_type": "double"
            }
          ]
        },
        {
          "type": "class",
          "value": "ProcurementOrder",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Invoice"
                }
              ],
              "label": "\"generates invoice\"",
              "multiplicity1": "1",
              "multiplicity2": "1..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Payment consists of paymentID, paymentDate, and amount, and is related to Invoice.",
    "PlantUML": "class Payment {\n  +paymentID : int\n  +paymentDate : date\n  +amount : double\n}\n\nclass Invoice\n\nInvoice \"1\" -- \"1\" Payment : \"linkedTo\"",
    "Model": "I93",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Payment",
          "children": [
            {
              "type": "attribute",
              "value": "paymentID",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "paymentDate",
              "visibility": "+",
              "data_type": "date"
            },
            {
              "type": "attribute",
              "value": "amount",
              "visibility": "+",
              "data_type": "double"
            }
          ]
        },
        {
          "type": "class",
          "value": "Invoice",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Payment"
                }
              ],
              "label": "\"linkedTo\"",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "SupplierEvaluation defines evaluationID, criteria, and score, and is associated with Supplier.",
    "PlantUML": "class SupplierEvaluation {\n  +evaluationID: int\n  +criteria: String\n  +score: int\n}\nSupplier \"1\" -- \"1..*\" SupplierEvaluation : \"evaluatedBy\"",
    "Model": "I93",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "SupplierEvaluation",
          "children": [
            {
              "type": "attribute",
              "value": "evaluationID",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "criteria",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "score",
              "visibility": "+",
              "data_type": "int"
            }
          ]
        },
        {
          "type": "class",
          "value": "Supplier",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "SupplierEvaluation"
                }
              ],
              "label": "\"evaluatedBy\"",
              "multiplicity1": "1",
              "multiplicity2": "1..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Product contains productID and productName, and is linked to Category, which has categoryID and categoryName attributes.",
    "PlantUML": "class Product {\n  +productID : int\n  +productName : String\n}\n\nclass Category {\n  +categoryID : int\n  +categoryName : String\n}\n\nProduct \"1..*\" -- \"1..*\" Category : \"belongsTo\"",
    "Model": "I93",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Product",
          "children": [
            {
              "type": "attribute",
              "value": "productID",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "productName",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Category"
                }
              ],
              "label": "\"belongsTo\"",
              "multiplicity1": "1..*",
              "multiplicity2": "1..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Category",
          "children": [
            {
              "type": "attribute",
              "value": "categoryID",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "categoryName",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Delivery includes deliveryID, deliveryDate, and deliveryStatus, and is associated with ProcurementOrder.",
    "PlantUML": "class Delivery {\n  +deliveryID: int\n  +deliveryDate: date\n  +deliveryStatus: String\n}\n\nclass ProcurementOrder {\n}\n\nProcurementOrder \"1\" -- \"0..*\" Delivery : \"tracks delivery\"",
    "Model": "I93",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Delivery",
          "children": [
            {
              "type": "attribute",
              "value": "deliveryID",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "deliveryDate",
              "visibility": "+",
              "data_type": "date"
            },
            {
              "type": "attribute",
              "value": "deliveryStatus",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "ProcurementOrder",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Delivery"
                }
              ],
              "label": "\"tracks delivery\"",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Report holds reportID and reportType, and is associated with both ProcurementOrder and Supplier.",
    "PlantUML": "class Report {\n  +reportID : int\n  +reportType : String\n}\n\nReport \"1\" -- \"1..*\" ProcurementOrder : \"based on order\"\nReport \"1\" -- \"1..*\" Supplier : \"evaluates supplier\"",
    "Model": "I93",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Report",
          "children": [
            {
              "type": "attribute",
              "value": "reportID",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "reportType",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "ProcurementOrder"
                }
              ],
              "label": "\"based on order\"",
              "multiplicity1": "1",
              "multiplicity2": "1..*"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Supplier"
                }
              ],
              "label": "\"evaluates supplier\"",
              "multiplicity1": "1",
              "multiplicity2": "1..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "ProcurementOrder",
          "children": []
        },
        {
          "type": "class",
          "value": "Supplier",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Visitor has visitorID, name, purpose, and registrationDate, and is linked to Visit, which has visitID, visitDate, and visitPurpose.",
    "PlantUML": "class Visitor {\n  +visitorID : String\n  +name : String\n  +purpose : String\n  +registrationDate : DateTime\n}\n\nclass Visit {\n  +visitID : String\n  +visitDate : DateTime\n  +visitPurpose : String\n}\n\nVisitor \"1\" -- \"*\" Visit : \"registers\"",
    "Model": "I94",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Visitor",
          "children": [
            {
              "type": "attribute",
              "value": "visitorID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "purpose",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "registrationDate",
              "visibility": "+",
              "data_type": "DateTime"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Visit"
                }
              ],
              "label": "\"registers\"",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Visit",
          "children": [
            {
              "type": "attribute",
              "value": "visitID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "visitDate",
              "visibility": "+",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "visitPurpose",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Host includes hostID, name, and department, and is connected to Visitor.",
    "PlantUML": "class Host {\n  +hostID: String\n  +name: String\n  +department: String\n}\n\nHost \"1\" -- \"0..*\" Visitor : \"assigns\"",
    "Model": "I94",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Host",
          "children": [
            {
              "type": "attribute",
              "value": "hostID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "department",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Visitor"
                }
              ],
              "label": "\"assigns\"",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Visitor",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Reception contains receptionID and location attributes and is linked to Visitor.",
    "PlantUML": "class Reception {\n  +receptionID: String\n  +location: String\n}\n\nReception \"1\" -- \"0..*\" Visitor : \"checks in\"",
    "Model": "I94",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Reception",
          "children": [
            {
              "type": "attribute",
              "value": "receptionID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "location",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Visitor"
                }
              ],
              "label": "\"checks in\"",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Visitor",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "VisitDuration includes entryTime, exitTime, and duration, and is associated with Visit.",
    "PlantUML": "class VisitDuration {\n  +entryTime: DateTime\n  +exitTime: DateTime\n  +duration: int\n}\n\nclass Visit{ }\n\nVisit \"1\" -- \"1\" VisitDuration : \"has\"",
    "Model": "I94",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "VisitDuration",
          "children": [
            {
              "type": "attribute",
              "value": "entryTime",
              "visibility": "+",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "exitTime",
              "visibility": "+",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "duration",
              "visibility": "+",
              "data_type": "int"
            }
          ]
        },
        {
          "type": "class",
          "value": "Visit",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "VisitDuration"
                }
              ],
              "label": "\"has\"",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Security defines clearanceStatus and isBackgroundCheckComplete attributes and connects to Visitor.",
    "PlantUML": "class Security {\n  +clearanceStatus: String\n  +isBackgroundCheckComplete: boolean\n}\n\nSecurity \"1\" -- \"1\" Visitor : \"checks clearance\"",
    "Model": "I94",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Security",
          "children": [
            {
              "type": "attribute",
              "value": "clearanceStatus",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "isBackgroundCheckComplete",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Visitor"
                }
              ],
              "label": "\"checks clearance\"",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Visitor",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "AccessPass has passID, issuedTime, and isReturned attributes, and is associated with Visitor.",
    "PlantUML": "class AccessPass {\n  +passID : String\n  +issuedTime : DateTime\n  +isReturned : boolean\n}\nVisitor \"1\" -- \"0..1\" AccessPass : \"uses\"",
    "Model": "I94",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AccessPass",
          "children": [
            {
              "type": "attribute",
              "value": "passID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "issuedTime",
              "visibility": "+",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "isReturned",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        },
        {
          "type": "class",
          "value": "Visitor",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "AccessPass"
                }
              ],
              "label": "\"uses\"",
              "multiplicity1": "1",
              "multiplicity2": "0..1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "VisitorHistory consists of historyID, visitDate, and visitDetails, and is linked to Visitor.",
    "PlantUML": "class VisitorHistory {\n  +historyID: String\n  +visitDate: DateTime\n  +visitDetails: String\n}\n\nVisitor \"1\" -- \"*\" VisitorHistory : \"has\"",
    "Model": "I94",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "VisitorHistory",
          "children": [
            {
              "type": "attribute",
              "value": "historyID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "visitDate",
              "visibility": "+",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "visitDetails",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Visitor",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "VisitorHistory"
                }
              ],
              "label": "\"has\"",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "VisitPurpose includes purposeType and description attributes and is associated with Visit.",
    "PlantUML": "class VisitPurpose {\n  +purposeType: String\n  +description: String\n}\n\nVisit \"1\" -- \"1\" VisitPurpose : \"verifies \"",
    "Model": "I94",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "VisitPurpose",
          "children": [
            {
              "type": "attribute",
              "value": "purposeType",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Visit",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "VisitPurpose"
                }
              ],
              "label": "\"verifies \"",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "FacilityAccess includes facilityID and isAccessAllowed attributes and is linked to Visitor.",
    "PlantUML": "class FacilityAccess {\n  +facilityID: String\n  +isAccessAllowed: boolean\n}\nFacilityAccess \"1\" -- \"1\" Visitor : \"grants access to\"",
    "Model": "I94",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "FacilityAccess",
          "children": [
            {
              "type": "attribute",
              "value": "facilityID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "isAccessAllowed",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Visitor"
                }
              ],
              "label": "\"grants access to\"",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Visitor",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Notification includes notificationID, notificationTime, and message, is associated with Host, and connected to Visitor.",
    "PlantUML": "class Notification {\n  +notificationID: String\n  +notificationTime: DateTime\n  +message: String\n}\nNotification \"1\" -- \"1\" Host : \"sends\"\nNotification \"1\" -- \"1\" Visitor : \"sends\"",
    "Model": "I94",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Notification",
          "children": [
            {
              "type": "attribute",
              "value": "notificationID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "notificationTime",
              "visibility": "+",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "message",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Host"
                }
              ],
              "label": "\"sends\"",
              "multiplicity1": "1",
              "multiplicity2": "1"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Visitor"
                }
              ],
              "label": "\"sends\"",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Host",
          "children": []
        },
        {
          "type": "class",
          "value": "Visitor",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Student features studentID, name, email, and a register method, and is linked to Course, which defines courseID, courseName, capacity, and enrollStudent method.",
    "PlantUML": "class Student {\n  +studentID: String\n  +name: String\n  +email: String\n  +register(course: Course): void\n}\n\nclass Course {\n  +courseID: String\n  +courseName: String\n  +capacity: int\n  +enrollStudent(student: Student): void\n}\n\nStudent \"1\" -- \"0..*\" Course : registers\n",
    "Model": "I95",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Student",
          "children": [
            {
              "type": "attribute",
              "value": "studentID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "register(course: Course)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Course"
                }
              ],
              "label": "registers",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Course",
          "children": [
            {
              "type": "attribute",
              "value": "courseID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "courseName",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "capacity",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "method",
              "value": "enrollStudent(student: Student)",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Course defines checkAvailability, courseID, courseName, capacity, and enrolled, and is associated with Student.",
    "PlantUML": "class Course {\n  +courseID: String\n  +courseName: String\n  +capacity: int\n  +enrolled: int\n  +checkAvailability(): boolean\n}\n\nCourse \"1\" -- \"*\" Student : \"has enrolled students\"\n",
    "Model": "I95",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Course",
          "children": [
            {
              "type": "attribute",
              "value": "courseID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "courseName",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "capacity",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "enrolled",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "method",
              "value": "checkAvailability()",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Student"
                }
              ],
              "label": "\"has enrolled students\"",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Student",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Course includes checkPrerequisites, courseID, courseName, and prerequisites, and is linked to itself.",
    "PlantUML": "class Course {\n  +courseID: String\n  +courseName: String\n  +prerequisites: List<Course>\n  +checkPrerequisites(student: Student): boolean\n}\n\nCourse \"1\" -- \"*\" Course : \"has prerequisites\"\n",
    "Model": "I95",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Course",
          "children": [
            {
              "type": "attribute",
              "value": "courseID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "courseName",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "prerequisites",
              "visibility": "+",
              "data_type": "List<Course>"
            },
            {
              "type": "method",
              "value": "checkPrerequisites(student: Student)",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Course"
                }
              ],
              "label": "\"has prerequisites\"",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Course includes schedule, location, and a setSchedule method, while Faculty includes facultyID, name, and assignCourse, and is related to Course.",
    "PlantUML": "class Course {\n  +schedule: String\n  +location: String\n  +setSchedule(schedule: String, location: String): void\n}\n\nclass Faculty {\n  +facultyID: String\n  +name: String\n  +assignCourse(course: Course): void\n}\n\nFaculty \"1\" -- \"*\" Course : teaches\n",
    "Model": "I95",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Course",
          "children": [
            {
              "type": "attribute",
              "value": "schedule",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "location",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "setSchedule(schedule: String, location: String)",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Faculty",
          "children": [
            {
              "type": "attribute",
              "value": "facultyID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "assignCourse(course: Course)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Course"
                }
              ],
              "label": "teaches",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Faculty contains assignCourse, facultyID, and name, and is associated with Course.",
    "PlantUML": "class Faculty {\n  +facultyID: String\n  +name: String\n  +assignCourse(course: Course): void\n}\n\nFaculty \"1\" -- \"*\" Course : teaches\n",
    "Model": "I95",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Faculty",
          "children": [
            {
              "type": "attribute",
              "value": "facultyID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "assignCourse(course: Course)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Course"
                }
              ],
              "label": "teaches",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Course",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Student supports dropCourse functionality and is connected to Course.",
    "PlantUML": "class Student {\n  +dropCourse(course: Course): void\n}\n\nStudent \"1\" -- \"*\" Course : drops\n",
    "Model": "I95",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Student",
          "children": [
            {
              "type": "method",
              "value": "dropCourse(course: Course)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Course"
                }
              ],
              "label": "drops",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Course",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Grade includes grade, student, course, and an assignGrade method, and is related to both Student and Course.",
    "PlantUML": "class Grade {\n    +grade: String\n    +student: Student\n    +course: Course\n    +assignGrade(grade): void\n}\n\nGrade \"1\" -- \"1\" Student : tracks\nGrade \"1\" -- \"1\" Course : \"belongs to\"\n",
    "Model": "I95",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Grade",
          "children": [
            {
              "type": "attribute",
              "value": "grade",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "student",
              "visibility": "+",
              "data_type": "Student"
            },
            {
              "type": "attribute",
              "value": "course",
              "visibility": "+",
              "data_type": "Course"
            },
            {
              "type": "method",
              "value": "assignGrade(grade)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Student"
                }
              ],
              "label": "tracks",
              "multiplicity1": "1",
              "multiplicity2": "1"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Course"
                }
              ],
              "label": "\"belongs to\"",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Student",
          "children": []
        },
        {
          "type": "class",
          "value": "Course",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Course includes courseID, courseName, department, prerequisites, and availableSlots, and is connected to itself, while Search defines searchByName and filterByDepartment methods.",
    "PlantUML": "class Course {\n  +courseID: String\n  +courseName: String\n  +department: String\n  +prerequisites: List<Course>\n  +availableSlots: int\n}\n\nclass Search {\n  +searchByName(name: String): List<Course>\n  +filterByDepartment(department: String): List<Course>\n}\n\nCourse \"1\" -- \"*\" Course : \"related to\"",
    "Model": "I95",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Course",
          "children": [
            {
              "type": "attribute",
              "value": "courseID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "courseName",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "department",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "prerequisites",
              "visibility": "+",
              "data_type": "List<Course>"
            },
            {
              "type": "attribute",
              "value": "availableSlots",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Course"
                }
              ],
              "label": "\"related to\"",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Search",
          "children": [
            {
              "type": "method",
              "value": "searchByName(name: String)",
              "visibility": "+",
              "data_type": "List<Course>"
            },
            {
              "type": "method",
              "value": "filterByDepartment(department: String)",
              "visibility": "+",
              "data_type": "List<Course>"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Course has courseID, courseName, department, prerequisites, and availableSlots, and is linked to itself, while Search supports searching and filtering methods.",
    "PlantUML": "class Course {\n    +courseID: String\n    +courseName: String\n    +department: String\n    +prerequisites: List<Course>\n    +availableSlots: int\n}\n\nclass Search {\n    +searchByName(name: String): List<Course>\n    +filterByDepartment(department: String): List<Course>\n}\n\nCourse \"1\" -- \"*\" Course : \"related to\"\n",
    "Model": "I95",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Course",
          "children": [
            {
              "type": "attribute",
              "value": "courseID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "courseName",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "department",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "prerequisites",
              "visibility": "+",
              "data_type": "List<Course>"
            },
            {
              "type": "attribute",
              "value": "availableSlots",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Course"
                }
              ],
              "label": "\"related to\"",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Search",
          "children": [
            {
              "type": "method",
              "value": "searchByName(name: String)",
              "visibility": "+",
              "data_type": "List<Course>"
            },
            {
              "type": "method",
              "value": "filterByDepartment(department: String)",
              "visibility": "+",
              "data_type": "List<Course>"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Course defines isRegistrationOpen and registrationDeadline attributes and is related to Student.",
    "PlantUML": "class Course {\n  +registrationDeadline: Date\n  +isRegistrationOpen(): boolean\n}\n\nCourse \"1\" -- \"*\" Student : \"registration\"",
    "Model": "I95",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Course",
          "children": [
            {
              "type": "attribute",
              "value": "registrationDeadline",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "method",
              "value": "isRegistrationOpen()",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Student"
                }
              ],
              "label": "\"registration\"",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Student",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "RemoteDevice includes id, status, and sensorData attributes, and is associated with Sensor, which defines type and value.",
    "PlantUML": "class RemoteDevice {\n  +id: String\n  +status: String\n  +sensorData: String\n}\n\nclass Sensor {\n  +type: String\n  +value: String\n}\n\nRemoteDevice \"1\" -- \"*\" Sensor : has\n",
    "Model": "I96",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "RemoteDevice",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "sensorData",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Sensor"
                }
              ],
              "label": "has",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Sensor",
          "children": [
            {
              "type": "attribute",
              "value": "type",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "value",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "RemoteDevice contains id, status, and lastCheckTime, and is linked to StatusMonitor, which provides alert and status.",
    "PlantUML": "class RemoteDevice {\n  +id: String\n  +status: String\n  +lastCheckTime: String\n}\n\nclass StatusMonitor {\n  +status: String\n  +alert(): String\n}\n\nRemoteDevice \"1\" -- \"1\" StatusMonitor : monitors\n",
    "Model": "I96",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "RemoteDevice",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "lastCheckTime",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "StatusMonitor"
                }
              ],
              "label": "monitors",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "StatusMonitor",
          "children": [
            {
              "type": "attribute",
              "value": "status",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "alert()",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "CentralDatabase defines storeData method and dataID, and connects to RemoteDevice, which includes id and sensorData.",
    "PlantUML": "class CentralDatabase {\n  +dataID: String\n  +storeData(): void\n}\n\nclass RemoteDevice {\n  +id: String\n  +sensorData: String\n}\n\nCentralDatabase \"1\" -- \"*\" RemoteDevice : \"stores data\"\n",
    "Model": "I96",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "CentralDatabase",
          "children": [
            {
              "type": "attribute",
              "value": "dataID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "storeData()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "RemoteDevice"
                }
              ],
              "label": "\"stores data\"",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "RemoteDevice",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "sensorData",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "UserInterface offers a displayData method and is associated with RemoteDevice, which includes id and sensorData.",
    "PlantUML": "class UserInterface {\n  +displayData(): void\n}\n\nclass RemoteDevice {\n  +id: String\n  +sensorData: String\n}\n\nUserInterface \"1\" -- \"*\" RemoteDevice : displays\n",
    "Model": "I96",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "UserInterface",
          "children": [
            {
              "type": "method",
              "value": "displayData()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "RemoteDevice"
                }
              ],
              "label": "displays",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "RemoteDevice",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "sensorData",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "GraphicalVisualization includes generateGraph method and connects to Sensor, which features type and value.",
    "PlantUML": "class GraphicalVisualization {\n  +generateGraph(): void\n}\n\nclass Sensor {\n  +type: String\n  +value: String\n}\n\nGraphicalVisualization \"1\" -- \"*\" Sensor : visualizes\n",
    "Model": "I96",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "GraphicalVisualization",
          "children": [
            {
              "type": "method",
              "value": "generateGraph()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Sensor"
                }
              ],
              "label": "visualizes",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Sensor",
          "children": [
            {
              "type": "attribute",
              "value": "type",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "value",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Sensor contains type and value attributes and is connected to AlertSystem, which includes triggerAlert method and a threshold.",
    "PlantUML": "class Sensor {\n  +type: String\n  +value: String\n}\n\nclass AlertSystem {\n  +threshold: String\n  +triggerAlert(): void\n}\n\nSensor \"1\" -- \"1\" AlertSystem : triggers\n",
    "Model": "I96",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Sensor",
          "children": [
            {
              "type": "attribute",
              "value": "type",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "value",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "AlertSystem"
                }
              ],
              "label": "triggers",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "AlertSystem",
          "children": [
            {
              "type": "attribute",
              "value": "threshold",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "triggerAlert()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "User has username and password attributes and is associated with Role, which includes roleName.",
    "PlantUML": "class User {\n  +username: String\n  +password: String\n}\n\nclass Role {\n  +roleName: String\n}\n\nUser \"1\" -- \"1\" Role : has\n",
    "Model": "I96",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "username",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Role"
                }
              ],
              "label": "has",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Role",
          "children": [
            {
              "type": "attribute",
              "value": "roleName",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "RemoteDevice defines id and configurationSettings attributes, and Admin includes configureDevice method and name, and is linked to RemoteDevice.",
    "PlantUML": "class RemoteDevice {\n  +id: String\n  +configurationSettings: String\n}\n\nclass Admin {\n  +name: String\n  +configureDevice(): void\n}\n\nAdmin \"1\" -- \"*\" RemoteDevice : configures\n",
    "Model": "I96",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "RemoteDevice",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "configurationSettings",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Admin",
          "children": [
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "configureDevice()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "RemoteDevice"
                }
              ],
              "label": "configures",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "AuditTrail includes changeType and timestamp, and is linked to Admin, which defines name and modifyConfig method.",
    "PlantUML": "class AuditTrail {\n  +changeType: String\n  +timestamp: String\n}\n\nclass Admin {\n  +name: String\n  +modifyConfig(): void\n}\n\nAuditTrail \"1\" -- \"1\" Admin : \"changes\"\n",
    "Model": "I96",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AuditTrail",
          "children": [
            {
              "type": "attribute",
              "value": "changeType",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Admin"
                }
              ],
              "label": "\"changes\"",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Admin",
          "children": [
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "modifyConfig()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "ScheduledTask includes taskName and time, and is associated with RemoteDevice, which defines id and status.",
    "PlantUML": "class ScheduledTask {\n  +taskName: String\n  +time: String\n}\n\nclass RemoteDevice {\n  +id: String\n  +status: String\n}\n\nScheduledTask \"1\" -- \"*\" RemoteDevice : monitors\n",
    "Model": "I96",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ScheduledTask",
          "children": [
            {
              "type": "attribute",
              "value": "taskName",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "time",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "RemoteDevice"
                }
              ],
              "label": "monitors",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "RemoteDevice",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "User defines userID, name, email, role, and includes register, login, and updateProfile methods, and is a subclass of Admin, which includes manageUsers and adminID.",
    "PlantUML": "class User {\n  +userID: int\n  +name: String\n  +email: String\n  +role: String\n  +register(): void\n  +login(): void\n  +updateProfile(): void\n}\n\nclass Admin {\n  +adminID: int\n  +manageUsers(): void\n}\n\nUser <|-- Admin\n",
    "Model": "I97",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userID",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "role",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "register()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "login()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "updateProfile()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Admin"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Admin",
          "children": [
            {
              "type": "attribute",
              "value": "adminID",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "method",
              "value": "manageUsers()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "ResearchProject features createProject and updateProject methods, projectID, title, description, and deadline, and is part of User.",
    "PlantUML": "class ResearchProject {\n  +projectID: int\n  +title: String\n  +description: String\n  +deadline: Date\n  +createProject(): void\n  +updateProject(): void\n}\n\nUser \"1\" *-- \"*\" ResearchProject : manages\n",
    "Model": "I97",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ResearchProject",
          "children": [
            {
              "type": "attribute",
              "value": "projectID",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "deadline",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "method",
              "value": "createProject()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "updateProject()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "ResearchProject"
                }
              ],
              "label": "manages",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Researcher defines researcherID and assignRole method, and is part of ResearchProject.",
    "PlantUML": "class Researcher {\n  + researcherID: int\n  + assignRole(role: String): void\n}\n\nResearchProject \"1\" *-- \"*\" Researcher : collaborates\n",
    "Model": "I97",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Researcher",
          "children": [
            {
              "type": "attribute",
              "value": "researcherID",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "method",
              "value": "assignRole(role: String)",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "ResearchProject",
          "children": [
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Researcher"
                }
              ],
              "label": "collaborates",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Document includes documentID, fileName, upload, and download methods, and is part of ResearchProject.",
    "PlantUML": "class Document {\n  +documentID: int\n  +fileName: String\n  +upload(): void\n  +download(): void\n}\n\nResearchProject \"1\" *-- \"*\" Document : has\n",
    "Model": "I97",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Document",
          "children": [
            {
              "type": "attribute",
              "value": "documentID",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "fileName",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "upload()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "download()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "ResearchProject",
          "children": [
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Document"
                }
              ],
              "label": "has",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Task includes assignTask method, taskID, description, deadline, and status attributes, and is part of both ResearchProject and Researcher.",
    "PlantUML": "class Task {\n  +taskID: int\n  +description: String\n  +deadline: Date\n  +status: String\n  +assignTask(researcher: Researcher): void\n}\n\nResearchProject \"1\" *-- \"*\" Task : includes\nResearcher \"1\" *-- \"*\" Task : \"assigned to\"\n",
    "Model": "I97",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Task",
          "children": [
            {
              "type": "attribute",
              "value": "taskID",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "deadline",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "assignTask(researcher: Researcher)",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "ResearchProject",
          "children": [
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Task"
                }
              ],
              "label": "includes",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Researcher",
          "children": [
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Task"
                }
              ],
              "label": "\"assigned to\"",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Report includes generateReport method and reportID, and is part of ResearchProject.",
    "PlantUML": "class Report {\n  +reportID: int\n  +generateReport(): void\n}\n\nResearchProject \"1\" *-- \"*\" Report : generates\n",
    "Model": "I97",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Report",
          "children": [
            {
              "type": "attribute",
              "value": "reportID",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "method",
              "value": "generateReport()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "ResearchProject",
          "children": [
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Report"
                }
              ],
              "label": "generates",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Notification contains notificationID, message, and a sendNotification method, and is part of Researcher.",
    "PlantUML": "class Notification {\n  +notificationID: int\n  +message: String\n  +sendNotification(): void\n}\n\nResearcher \"1\" *-- \"*\" Notification : receives\n",
    "Model": "I97",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Notification",
          "children": [
            {
              "type": "attribute",
              "value": "notificationID",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "message",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "sendNotification()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Researcher",
          "children": [
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Notification"
                }
              ],
              "label": "receives",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Funding includes fundingID, amount, and allocateFunds method, and is part of ResearchProject.",
    "PlantUML": "class Funding {\n  +fundingID: int\n  +amount: float\n  +allocateFunds(): void\n}\n\nResearchProject \"1\" *-- \"*\" Funding : receives\n",
    "Model": "I97",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Funding",
          "children": [
            {
              "type": "attribute",
              "value": "fundingID",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "amount",
              "visibility": "+",
              "data_type": "float"
            },
            {
              "type": "method",
              "value": "allocateFunds()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "ResearchProject",
          "children": [
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Funding"
                }
              ],
              "label": "receives",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "AccessControl includes setAccessLevel method, userID, and level, and is part of User.",
    "PlantUML": "class AccessControl {\n  +userID: int\n  +level: String\n  +setAccessLevel(level: String): void\n}\n\nUser \"1\" *-- \"*\" AccessControl : has\n",
    "Model": "I97",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AccessControl",
          "children": [
            {
              "type": "attribute",
              "value": "userID",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "level",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "setAccessLevel(level: String)",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "AccessControl"
                }
              ],
              "label": "has",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "AuditLog contains logID, action, timestamp, and a method called recordAction, and is part of ResearchProject.",
    "PlantUML": "class AuditLog {\n  +logID: int\n  +action: String\n  +timestamp: Date\n  +recordAction(): void\n}\n\nResearchProject \"1\" *-- \"*\" AuditLog : logs\n",
    "Model": "I97",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AuditLog",
          "children": [
            {
              "type": "attribute",
              "value": "logID",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "action",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "method",
              "value": "recordAction()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "ResearchProject",
          "children": [
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "AuditLog"
                }
              ],
              "label": "logs",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Customer has customerID, username, password, and email attributes, and is linked to Booking, which includes bookingID and bookingDate.",
    "PlantUML": "class Customer {\n  + customerID: int\n  + username: String\n  + password: String\n  + email: String\n}\n\nclass Booking {\n  + bookingID: int\n  + bookingDate: DateTime\n}\n\nCustomer \"1\" -- \"0..*\" Booking : makes\n",
    "Model": "I98",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Customer",
          "children": [
            {
              "type": "attribute",
              "value": "customerID",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "username",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Booking"
                }
              ],
              "label": "makes",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Booking",
          "children": [
            {
              "type": "attribute",
              "value": "bookingID",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "bookingDate",
              "visibility": "+",
              "data_type": "DateTime"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Listing includes listingID, location, serviceType, and availableDate, and is linked to Search, which has searchCriteria.",
    "PlantUML": "class Listing {\n  + listingID: int\n  + location: String\n  + serviceType: String\n  + availableDate: DateTime\n}\n\nclass Search {\n  + searchCriteria: String\n}\n\nSearch \"1\" -- \"0..*\" Listing : finds\n",
    "Model": "I98",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Listing",
          "children": [
            {
              "type": "attribute",
              "value": "listingID",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "location",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "serviceType",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "availableDate",
              "visibility": "+",
              "data_type": "DateTime"
            }
          ]
        },
        {
          "type": "class",
          "value": "Search",
          "children": [
            {
              "type": "attribute",
              "value": "searchCriteria",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Listing"
                }
              ],
              "label": "finds",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Booking includes bookingID, bookingDate, and status, and is associated with Payment, which contains paymentID, amount, and paymentDate.",
    "PlantUML": "class Booking {\n  + bookingID: int\n  + bookingDate: DateTime\n  + status: String\n}\n\nclass Payment {\n  + paymentID: int\n  + amount: double\n  + paymentDate: DateTime\n}\n\nBooking \"1\" -- \"1\" Payment : requires\n",
    "Model": "I98",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Booking",
          "children": [
            {
              "type": "attribute",
              "value": "bookingID",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "bookingDate",
              "visibility": "+",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Payment"
                }
              ],
              "label": "requires",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Payment",
          "children": [
            {
              "type": "attribute",
              "value": "paymentID",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "amount",
              "visibility": "+",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "paymentDate",
              "visibility": "+",
              "data_type": "DateTime"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Payment defines paymentID, amount, paymentDate, and paymentMethod, and is connected to PaymentGateway, which includes gatewayID and gatewayName.",
    "PlantUML": "class Payment {\n  + paymentID: int\n  + amount: double\n  + paymentDate: DateTime\n  + paymentMethod: String\n}\n\nclass PaymentGateway {\n  + gatewayID: int\n  + gatewayName: String\n}\n\nPayment \"1\" -- \"1\" PaymentGateway : processedBy\n",
    "Model": "I98",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Payment",
          "children": [
            {
              "type": "attribute",
              "value": "paymentID",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "amount",
              "visibility": "+",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "paymentDate",
              "visibility": "+",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "paymentMethod",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "PaymentGateway"
                }
              ],
              "label": "processedBy",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "PaymentGateway",
          "children": [
            {
              "type": "attribute",
              "value": "gatewayID",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "gatewayName",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Customer contains customerID and username, and is related to Booking, which defines bookingID and bookingDate.",
    "PlantUML": "class Customer {\n  + customerID: int\n  + username: String\n}\n\nclass Booking {\n  + bookingID: int\n  + bookingDate: DateTime\n}\n\nCustomer \"1\" -- \"0..*\" Booking : hasHistory\n",
    "Model": "I98",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Customer",
          "children": [
            {
              "type": "attribute",
              "value": "customerID",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "username",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Booking"
                }
              ],
              "label": "hasHistory",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Booking",
          "children": [
            {
              "type": "attribute",
              "value": "bookingID",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "bookingDate",
              "visibility": "+",
              "data_type": "DateTime"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Booking holds bookingID, bookingDate, and status, and is related to itself.",
    "PlantUML": "class Booking {\n  + bookingID: int\n  + bookingDate: DateTime\n  + status: String\n}\n\nBooking \"1\" -- \"1\" Booking : modifies\n",
    "Model": "I98",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Booking",
          "children": [
            {
              "type": "attribute",
              "value": "bookingID",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "bookingDate",
              "visibility": "+",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Booking"
                }
              ],
              "label": "modifies",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Booking has bookingID, bookingDate, and cancellationDate attributes, and is associated with CancellationPolicy, which includes cancellationFee.",
    "PlantUML": "class Booking {\n  + bookingID: int\n  + bookingDate: DateTime\n  + cancellationDate: DateTime\n}\n\nclass CancellationPolicy {\n  + cancellationFee: double\n}\n\nBooking \"1\" -- \"0..1\" CancellationPolicy : subjectTo\n",
    "Model": "I98",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Booking",
          "children": [
            {
              "type": "attribute",
              "value": "bookingID",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "bookingDate",
              "visibility": "+",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "cancellationDate",
              "visibility": "+",
              "data_type": "DateTime"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "CancellationPolicy"
                }
              ],
              "label": "subjectTo",
              "multiplicity1": "1",
              "multiplicity2": "0..1"
            }
          ]
        },
        {
          "type": "class",
          "value": "CancellationPolicy",
          "children": [
            {
              "type": "attribute",
              "value": "cancellationFee",
              "visibility": "+",
              "data_type": "double"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Admin includes adminID and adminName, and is associated with Listing, which defines listingID, location, and serviceType.",
    "PlantUML": "class Admin {\n  + adminID: int\n  + adminName: String\n}\n\nclass Listing {\n  + listingID: int\n  + location: String\n  + serviceType: String\n}\n\nAdmin \"1\" -- \"0..*\" Listing : manages\n",
    "Model": "I98",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Admin",
          "children": [
            {
              "type": "attribute",
              "value": "adminID",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "adminName",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Listing"
                }
              ],
              "label": "manages",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Listing",
          "children": [
            {
              "type": "attribute",
              "value": "listingID",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "location",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "serviceType",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Customer includes customerID and email, and is associated with Notification, which defines notificationID and message.",
    "PlantUML": "class Customer {\n  + customerID: int\n  + email: String\n}\n\nclass Notification {\n  + notificationID: int\n  + notificationMessage: String\n}\n\nCustomer \"1\" -- \"0..*\" Notification : receives\n",
    "Model": "I98",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Customer",
          "children": [
            {
              "type": "attribute",
              "value": "customerID",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Notification"
                }
              ],
              "label": "receives",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Notification",
          "children": [
            {
              "type": "attribute",
              "value": "notificationID",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "notificationMessage",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Review includes reviewID, rating, and comments, and is connected to Customer, while Listing, which includes listingID, is associated with Review.",
    "PlantUML": "class Review {\n  + reviewID: int\n  + rating: int\n  + comments: String\n}\n\nclass Customer {\n  + customerID: int\n}\n\nclass Listing {\n  + listingID: int\n}\n\nCustomer \"1\" -- \"0..*\" Review : writes\nListing \"1\" -- \"0..*\" Review : has\n",
    "Model": "I98",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Review",
          "children": [
            {
              "type": "attribute",
              "value": "reviewID",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "rating",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "comments",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Customer",
          "children": [
            {
              "type": "attribute",
              "value": "customerID",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Review"
                }
              ],
              "label": "writes",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Listing",
          "children": [
            {
              "type": "attribute",
              "value": "listingID",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Review"
                }
              ],
              "label": "has",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "User contains username, password, role, and methods for login and register, and inherits from Admin, which includes createUser and deleteUser methods.",
    "PlantUML": "class User {\n  +username: String\n  +password: String\n  +role: String\n  +login(): boolean\n  +register(): boolean\n}\n\nclass Admin {\n  +createUser(): boolean\n  +deleteUser(): boolean\n}\n\nUser <|-- Admin\n",
    "Model": "I99",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "username",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "role",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "login()",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "method",
              "value": "register()",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Admin"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Admin",
          "children": [
            {
              "type": "method",
              "value": "createUser()",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "method",
              "value": "deleteUser()",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Team defines teamName and members, and includes methods addMember and removeMember, and relies on User, which requires Team.",
    "PlantUML": "class Team {\n    +teamName: String\n    +members: List<User>\n    +addMember(user: User): void\n    +removeMember(user: User): void\n}\n\nUser --> Team : \"belongs to\"\nTeam \"1\" --> \"*\" User : \"has members\"\n",
    "Model": "I99",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Team",
          "children": [
            {
              "type": "attribute",
              "value": "teamName",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "members",
              "visibility": "+",
              "data_type": "List<User>"
            },
            {
              "type": "method",
              "value": "addMember(user: User)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "removeMember(user: User)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "\"has members\"",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Team"
                }
              ],
              "label": "\"belongs to\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Task features assignTo method, taskName, description, and completed attributes, and is needed by Project, which defines projectName and tasks.",
    "PlantUML": "class Task {\n  +taskName: String\n  +description: String\n  +completed: boolean\n  +assignTo(user: User): void\n}\n\nclass Project {\n  +projectName: String\n  +tasks: List<Task>\n}\n\nTask --> User : \"assigned to\"\nProject --> Task : \"includes\"\n",
    "Model": "I99",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Task",
          "children": [
            {
              "type": "attribute",
              "value": "taskName",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "completed",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "method",
              "value": "assignTo(user: User)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "\"assigned to\""
            }
          ]
        },
        {
          "type": "class",
          "value": "Project",
          "children": [
            {
              "type": "attribute",
              "value": "projectName",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "tasks",
              "visibility": "+",
              "data_type": "List<Task>"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Task"
                }
              ],
              "label": "\"includes\""
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Message defines content and timestamp, and includes sendMessage method; Notification includes message, date, and sendNotification method, and both depend on User.",
    "PlantUML": "class Message {\n  +content: String\n  +timestamp: Date\n  +sendMessage(user: User): void\n}\n\nclass Notification {\n  +message: String\n  +date: Date\n  +sendNotification(user: User): void\n}\n\nMessage --> User : \"sent by\"\nNotification --> User : \"received by\"\n",
    "Model": "I99",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Message",
          "children": [
            {
              "type": "attribute",
              "value": "content",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "method",
              "value": "sendMessage(user: User)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "\"sent by\""
            }
          ]
        },
        {
          "type": "class",
          "value": "Notification",
          "children": [
            {
              "type": "attribute",
              "value": "message",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "date",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "method",
              "value": "sendNotification(user: User)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "\"received by\""
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "File defines fileName and content, and includes uploadFile method; Collaboration contains fileName, content, and editFile, and both depend on File, which is needed by Team.",
    "PlantUML": "class File {\n  +fileName: String\n  +content: List<byte>\n  +uploadFile(): void\n}\n\nclass Collaboration {\n  +fileName: String\n  +content: String\n  +editFile(file: File): void\n}\n\nTeam --> File : \"shares\"\nCollaboration --> File : \"collaborates on\"\n",
    "Model": "I99",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "File",
          "children": [
            {
              "type": "attribute",
              "value": "fileName",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "content",
              "visibility": "+",
              "data_type": "List<byte>"
            },
            {
              "type": "method",
              "value": "uploadFile()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Collaboration",
          "children": [
            {
              "type": "attribute",
              "value": "fileName",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "content",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "editFile(file: File)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "File"
                }
              ],
              "label": "\"collaborates on\""
            }
          ]
        },
        {
          "type": "class",
          "value": "Team",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "File"
                }
              ],
              "label": "\"shares\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Event includes eventName, eventDate, and a scheduleEvent method; Calendar defines calendarName and events, and adds events through addEvent method, relying on Event.",
    "PlantUML": "class Event {\n  +eventName: String\n  +eventDate: Date\n  +scheduleEvent(): void\n}\n\nclass Calendar {\n  +calendarName: String\n  +events: List<Event>\n  +addEvent(event: Event): void\n}\n\nCalendar --> Event : \"includes\"\n",
    "Model": "I99",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Event",
          "children": [
            {
              "type": "attribute",
              "value": "eventName",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "eventDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "method",
              "value": "scheduleEvent()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Calendar",
          "children": [
            {
              "type": "attribute",
              "value": "calendarName",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "events",
              "visibility": "+",
              "data_type": "List<Event>"
            },
            {
              "type": "method",
              "value": "addEvent(event: Event)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Event"
                }
              ],
              "label": "\"includes\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Role contains roleName and permissions, and depends on Permission; User includes accessResource method and role, and depends on Role.",
    "PlantUML": "class Role {\n  +roleName: String\n  +permissions: List<String>\n}\n\nclass User {\n  +role: Role\n  +accessResource(): boolean\n}\n\nUser --> Role : \"has\"\nRole \"1\" --> \"*\" Permission : \"grants\"\n",
    "Model": "I99",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Role",
          "children": [
            {
              "type": "attribute",
              "value": "roleName",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "permissions",
              "visibility": "+",
              "data_type": "List<String>"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Permission"
                }
              ],
              "label": "\"grants\"",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "role",
              "visibility": "+",
              "data_type": "Role"
            },
            {
              "type": "method",
              "value": "accessResource()",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Role"
                }
              ],
              "label": "\"has\""
            }
          ]
        },
        {
          "type": "class",
          "value": "Permission",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Report contains generateReport and reportName, and relies on Analytics, which includes metric and generateMetrics method.",
    "PlantUML": "class Report {\n  +reportName: String\n  +generateReport(): void\n}\n\nclass Analytics {\n  +metric: String\n  +generateMetrics(): void\n}\n\nReport --> Analytics : \"includes\"\n",
    "Model": "I99",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Report",
          "children": [
            {
              "type": "attribute",
              "value": "reportName",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "generateReport()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Analytics"
                }
              ],
              "label": "\"includes\""
            }
          ]
        },
        {
          "type": "class",
          "value": "Analytics",
          "children": [
            {
              "type": "attribute",
              "value": "metric",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "generateMetrics()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Activity includes activityType, timestamp, and a method showActivity; Feed defines displayFeed and activities, and depends on Activity.",
    "PlantUML": "class Activity {\n  +activityType: String\n  +timestamp: Date\n  +showActivity(): void\n}\n\nclass Feed {\n  +activities: List<Activity>\n  +displayFeed(): void\n}\n\nFeed --> Activity : \"displays\"\n",
    "Model": "I99",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Activity",
          "children": [
            {
              "type": "attribute",
              "value": "activityType",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "method",
              "value": "showActivity()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Feed",
          "children": [
            {
              "type": "attribute",
              "value": "activities",
              "visibility": "+",
              "data_type": "List<Activity>"
            },
            {
              "type": "method",
              "value": "displayFeed()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Activity"
                }
              ],
              "label": "\"displays\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Settings contains updateSettings method, theme, and emailNotifications; User includes settings and updateProfile, and relies on Settings.",
    "PlantUML": "class Settings {\n  +theme: String\n  +emailNotifications: boolean\n  +updateSettings(): void\n}\n\nclass User {\n  +settings: Settings\n  +updateProfile(): void\n}\n\nUser --> Settings : \"has\"\n",
    "Model": "I99",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Settings",
          "children": [
            {
              "type": "attribute",
              "value": "theme",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "emailNotifications",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "method",
              "value": "updateSettings()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "settings",
              "visibility": "+",
              "data_type": "Settings"
            },
            {
              "type": "method",
              "value": "updateProfile()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Settings"
                }
              ],
              "label": "\"has\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "User has id, name, and email attributes.",
    "PlantUML": "class User {\n  +id: String\n  +name: String\n  +email: String\n}\n",
    "Model": "I100",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Book contains isbn, title, author, and publisher attributes.",
    "PlantUML": "class Book {\n  +isbn: String\n  +title: String\n  +author: String\n  +publisher: String\n}\n",
    "Model": "I100",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Book",
          "children": [
            {
              "type": "attribute",
              "value": "isbn",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "author",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "publisher",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Book defines isAvailable attribute and relies on Library, which includes a method checkBookAvailability.",
    "PlantUML": "class Book {\n  +isAvailable: Boolean\n}\n\nclass Library {\n  +checkBookAvailability(isbn: String): Boolean\n}\n\nBook --> Library : \"checks\"\n",
    "Model": "I100",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Book",
          "children": [
            {
              "type": "attribute",
              "value": "isAvailable",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Library"
                }
              ],
              "label": "\"checks\""
            }
          ]
        },
        {
          "type": "class",
          "value": "Library",
          "children": [
            {
              "type": "method",
              "value": "checkBookAvailability(isbn: String)",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Borrowing has borrowDate and dueDate, and is required by both User and Book.",
    "PlantUML": "class Borrowing {\n  +borrowDate: Date\n  +dueDate: Date\n}\n\nUser --> Borrowing : \"borrows\"\nBook --> Borrowing : \"borrowed in\"\n",
    "Model": "I100",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Borrowing",
          "children": [
            {
              "type": "attribute",
              "value": "borrowDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "dueDate",
              "visibility": "+",
              "data_type": "Date"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Borrowing"
                }
              ],
              "label": "\"borrows\""
            }
          ]
        },
        {
          "type": "class",
          "value": "Book",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Borrowing"
                }
              ],
              "label": "\"borrowed in\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Return defines returnDate attribute, and is needed by both User and Book, which is also connected to Library.",
    "PlantUML": "class Return {\n  +returnDate: Date\n}\n\nUser --> Return : \"returns\"\nBook --> Return : \"returned\"\nBook --> Library : \"update\"\n",
    "Model": "I100",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Return",
          "children": [
            {
              "type": "attribute",
              "value": "returnDate",
              "visibility": "+",
              "data_type": "Date"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Return"
                }
              ],
              "label": "\"returns\""
            }
          ]
        },
        {
          "type": "class",
          "value": "Book",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Return"
                }
              ],
              "label": "\"returned\""
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Library"
                }
              ],
              "label": "\"update\""
            }
          ]
        },
        {
          "type": "class",
          "value": "Library",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The LateFee structure consists of calculateFee and amount, and Borrowing requires LateFee.",
    "PlantUML": "class LateFee {\n  +amount: Double\n  +calculateFee(dueDate: Date, returnDate: Date): Double\n}\n\nBorrowing --> LateFee : \"has\"\n",
    "Model": "I100",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "LateFee",
          "children": [
            {
              "type": "attribute",
              "value": "amount",
              "visibility": "+",
              "data_type": "double"
            },
            {
              "type": "method",
              "value": "calculateFee(dueDate: Date, returnDate: Date)",
              "visibility": "+",
              "data_type": "double"
            }
          ]
        },
        {
          "type": "class",
          "value": "Borrowing",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "LateFee"
                }
              ],
              "label": "\"has\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Authentication features a login method, which is needed by User.",
    "PlantUML": "class Authentication {\n  +login(email: String, password: String): Boolean\n}\n\nUser --> Authentication : \"authenticates\"\n",
    "Model": "I100",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Authentication",
          "children": [
            {
              "type": "method",
              "value": "login(email: String, password: String)",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Authentication"
                }
              ],
              "label": "\"authenticates\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Reservation includes the reservationDate attribute; both User and Book rely on Reservation.",
    "PlantUML": "class Reservation {\n  +reservationDate: Date\n}\n\nUser --> Reservation : \"reserves\"\nBook --> Reservation : \"reserved\"\n",
    "Model": "I100",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Reservation",
          "children": [
            {
              "type": "attribute",
              "value": "reservationDate",
              "visibility": "+",
              "data_type": "Date"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Reservation"
                }
              ],
              "label": "\"reserves\""
            }
          ]
        },
        {
          "type": "class",
          "value": "Book",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Reservation"
                }
              ],
              "label": "\"reserved\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Notification provides a sendNotification method, which Borrowing depends on.",
    "PlantUML": "class Notification {\n    +sendNotification(user: User, message: String): Void\n}\n\nBorrowing --> Notification : \"sends\"\n",
    "Model": "I100",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Notification",
          "children": [
            {
              "type": "method",
              "value": "sendNotification(user: User, message: String)",
              "visibility": "+",
              "data_type": "Void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Borrowing",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Notification"
                }
              ],
              "label": "\"sends\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Catalog offers a searchBooks method, with dependencies from User and Book.",
    "PlantUML": "class Catalog {\n  +searchBooks(query: String): List<Book>\n}\nUser --> Catalog : \"searches\"\nBook --> Catalog : \"listed in\"\n",
    "Model": "I100",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Catalog",
          "children": [
            {
              "type": "method",
              "value": "searchBooks(query: String)",
              "visibility": "+",
              "data_type": "List<Book>"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Catalog"
                }
              ],
              "label": "\"searches\""
            }
          ]
        },
        {
          "type": "class",
          "value": "Book",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Catalog"
                }
              ],
              "label": "\"listed in\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Job has attributes such as jobTitle, description, qualifications, and deadline, while Employer has name and email attributes and is linked to Job.",
    "PlantUML": "class Job {\n  -jobTitle: String\n  -description: String\n  -qualifications: String\n  -deadline: Date\n}\n\nclass Employer {\n  -name: String\n  -email: String\n}\n\nEmployer \"1\" -- \"0..*\" Job : posts\n",
    "Model": "I101",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Job",
          "children": [
            {
              "type": "attribute",
              "value": "jobTitle",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "qualifications",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "deadline",
              "visibility": "-",
              "data_type": "Date"
            }
          ]
        },
        {
          "type": "class",
          "value": "Employer",
          "children": [
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Job"
                }
              ],
              "label": "posts",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Candidate's design includes name, email, phone, and resume attributes and is connected to Registration, which records registrationDate.",
    "PlantUML": "class Candidate {\n  -name: String\n  -email: String\n  -phone: String\n  -resume: String\n}\n\nclass Registration {\n  -registrationDate: Date\n}\n\nCandidate \"1\" -- \"1\" Registration : registers\n",
    "Model": "I101",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Candidate",
          "children": [
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "phone",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "resume",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Registration"
                }
              ],
              "label": "registers",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Registration",
          "children": [
            {
              "type": "attribute",
              "value": "registrationDate",
              "visibility": "-",
              "data_type": "Date"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Application features coverLetter and applicationDate attributes; Job and Candidate are linked to Application.",
    "PlantUML": "class Application {\n  -coverLetter: String\n  -applicationDate: Date\n}\n\nJob \"1\" -- \"0..*\" Application : has\nCandidate \"1\" -- \"0..*\" Application : applies\n",
    "Model": "I101",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Application",
          "children": [
            {
              "type": "attribute",
              "value": "coverLetter",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "applicationDate",
              "visibility": "-",
              "data_type": "Date"
            }
          ]
        },
        {
          "type": "class",
          "value": "Job",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Application"
                }
              ],
              "label": "has",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Candidate",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Application"
                }
              ],
              "label": "applies",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "ApplicationStatus contains a status attribute and is associated with Application.",
    "PlantUML": "class ApplicationStatus {\n  -status: String\n}\n\nclass Application\n\nApplication \"1\" -- \"1\" ApplicationStatus : has\n",
    "Model": "I101",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ApplicationStatus",
          "children": [
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Application",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "ApplicationStatus"
                }
              ],
              "label": "has",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Interview consists of dateTime and type attributes, linked to Application.",
    "PlantUML": "class Interview {\n  -dateTime: Date\n  -type: String\n}\n\nApplication \"1\" -- \"1\" Interview : schedules\n",
    "Model": "I101",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Interview",
          "children": [
            {
              "type": "attribute",
              "value": "dateTime",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "type",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Application",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Interview"
                }
              ],
              "label": "schedules",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "ResumeReview has comments and rating attributes and is related to Application.",
    "PlantUML": "class ResumeReview {\n  -comments: String\n  -rating: int\n}\n\nApplication \"1\" -- \"1\" ResumeReview : has\n",
    "Model": "I101",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ResumeReview",
          "children": [
            {
              "type": "attribute",
              "value": "comments",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "rating",
              "visibility": "-",
              "data_type": "int"
            }
          ]
        },
        {
          "type": "class",
          "value": "Application",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "ResumeReview"
                }
              ],
              "label": "has",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "JobSearch includes keyword and location attributes and is linked to Job.",
    "PlantUML": "class JobSearch {\n  -keyword: String\n  -location: String\n}\n\nJobSearch \"1\" -- \"0..*\" Job : searches\n",
    "Model": "I101",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "JobSearch",
          "children": [
            {
              "type": "attribute",
              "value": "keyword",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "location",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Job"
                }
              ],
              "label": "searches",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Job",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "EmployerProfile contains companyName and location attributes and is associated with Employer.",
    "PlantUML": "class EmployerProfile {\n  -companyName: String\n  -location: String\n}\n\nEmployer \"1\" -- \"1\" EmployerProfile : manages\n\n",
    "Model": "I101",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "EmployerProfile",
          "children": [
            {
              "type": "attribute",
              "value": "companyName",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "location",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Employer",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "EmployerProfile"
                }
              ],
              "label": "manages",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "JobClosing features a closedDate attribute and is connected to Job.",
    "PlantUML": "class JobClosing {\n  -closedDate: Date\n}\n\nJob \"1\" -- \"1\" JobClosing : closes\n",
    "Model": "I101",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "JobClosing",
          "children": [
            {
              "type": "attribute",
              "value": "closedDate",
              "visibility": "-",
              "data_type": "Date"
            }
          ]
        },
        {
          "type": "class",
          "value": "Job",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "JobClosing"
                }
              ],
              "label": "closes",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Notification class contains message and dateTime attributes and is associated with both Application and Candidate.",
    "PlantUML": "class Notification {\n  -message: String\n  -dateTime: Date\n}\n\nApplication \"1\" -- \"0..*\" Notification : generates\nCandidate \"1\" -- \"0..*\" Notification : receives\n",
    "Model": "I101",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Notification",
          "children": [
            {
              "type": "attribute",
              "value": "message",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "dateTime",
              "visibility": "-",
              "data_type": "Date"
            }
          ]
        },
        {
          "type": "class",
          "value": "Application",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Notification"
                }
              ],
              "label": "generates",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Candidate",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Notification"
                }
              ],
              "label": "receives",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "PatentApplication holds patentId, title, description, submissionDate, and status attributes and requires an Applicant, who has applicantId, name, and contactInfo.",
    "PlantUML": "class PatentApplication {\n  +patentId : int\n  +title : String\n  +description : String\n  +submissionDate : Date\n  +status : String\n}\n\nclass Applicant {\n  +applicantId : int\n  +name : String\n  +contactInfo : String\n}\n\nPatentApplication \"1\" --> \"1..*\" Applicant : \"has\"\n",
    "Model": "I102",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "PatentApplication",
          "children": [
            {
              "type": "attribute",
              "value": "patentId",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "submissionDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Applicant"
                }
              ],
              "label": "\"has\"",
              "multiplicity1": "1",
              "multiplicity2": "1..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Applicant",
          "children": [
            {
              "type": "attribute",
              "value": "applicantId",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "contactInfo",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "PatentApplication includes attributes patentId, title, description, submissionDate, and status, and depends on an Examiner, which contains examinerId, name, and department.",
    "PlantUML": "class PatentApplication {\n  +patentId : int\n  +title : String\n  +description : String\n  +submissionDate : Date\n  +status : String\n}\n\nclass Examiner {\n  +examinerId : int\n  +name : String\n  +department : String\n}\n\nPatentApplication \"1\" --> \"1\" Examiner : \"reviewed by\"\n",
    "Model": "I102",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "PatentApplication",
          "children": [
            {
              "type": "attribute",
              "value": "patentId",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "submissionDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Examiner"
                }
              ],
              "label": "\"reviewed by\"",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Examiner",
          "children": [
            {
              "type": "attribute",
              "value": "examinerId",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "department",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "PatentApplication has patentId, title, description, submissionDate, and status attributes and requires ApprovalStatus, which includes status and approvalDate.",
    "PlantUML": "class PatentApplication {\n  +patentId : int\n  +title : String\n  +description : String\n  +submissionDate : Date\n  +status : String\n}\n\nclass ApprovalStatus {\n  +status : String\n  +approvalDate : Date\n}\n\nPatentApplication \"1\" --> \"1\" ApprovalStatus : \"has\"\n",
    "Model": "I102",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "PatentApplication",
          "children": [
            {
              "type": "attribute",
              "value": "patentId",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "submissionDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "ApprovalStatus"
                }
              ],
              "label": "\"has\"",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "ApprovalStatus",
          "children": [
            {
              "type": "attribute",
              "value": "status",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "approvalDate",
              "visibility": "+",
              "data_type": "Date"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "PatentApplication consists of patentId, title, description, submissionDate, and status and depends on FilingHistory, which contains actionDate, action, and status.",
    "PlantUML": "class PatentApplication {\n  +patentId : int\n  +title : String\n  +description : String\n  +submissionDate : Date\n  +status : String\n}\n\nclass FilingHistory {\n  +actionDate : Date\n  +action : String\n  +status : String\n}\n\nPatentApplication \"1\" --> \"1..*\" FilingHistory : \"has\"\n",
    "Model": "I102",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "PatentApplication",
          "children": [
            {
              "type": "attribute",
              "value": "patentId",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "submissionDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "FilingHistory"
                }
              ],
              "label": "\"has\"",
              "multiplicity1": "1",
              "multiplicity2": "1..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "FilingHistory",
          "children": [
            {
              "type": "attribute",
              "value": "actionDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "action",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Patent comprises patentId, title, expirationDate, and status attributes and relies on Renewal, which includes renewalDate and feeAmount.",
    "PlantUML": "class Patent {\n  + patentId : int\n  + title : String\n  + expirationDate : Date\n  + status : String\n}\n\nclass Renewal {\n  + renewalDate : Date\n  + feeAmount : double\n}\n\nPatent \"1\" --> \"1..*\" Renewal : has\n",
    "Model": "I102",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Patent",
          "children": [
            {
              "type": "attribute",
              "value": "patentId",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "expirationDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Renewal"
                }
              ],
              "label": "has",
              "multiplicity1": "1",
              "multiplicity2": "1..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Renewal",
          "children": [
            {
              "type": "attribute",
              "value": "renewalDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "feeAmount",
              "visibility": "+",
              "data_type": "double"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "License features licenseId, startDate, endDate, and feeAmount attributes and is required by Patent.",
    "PlantUML": "class License {\n  +licenseId : int\n  +startDate : Date\n  +endDate : Date\n  +feeAmount : double\n}\n\nPatent \"1\" --> \"1..*\" License : licensed\n",
    "Model": "I102",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "License",
          "children": [
            {
              "type": "attribute",
              "value": "licenseId",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "startDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "endDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "feeAmount",
              "visibility": "+",
              "data_type": "double"
            }
          ]
        },
        {
          "type": "class",
          "value": "Patent",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "License"
                }
              ],
              "label": "licensed",
              "multiplicity1": "1",
              "multiplicity2": "1..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Litigation consists of caseId, caseDate, court, and caseStatus attributes and is a dependency of Patent.",
    "PlantUML": "class Litigation {\n  +caseId: int\n  +caseDate: Date\n  +court: String\n  +caseStatus: String\n}\n\nPatent \"1\" --> \"0..*\" Litigation : \"involved\"\n",
    "Model": "I102",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Litigation",
          "children": [
            {
              "type": "attribute",
              "value": "caseId",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "caseDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "court",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "caseStatus",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Patent",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Litigation"
                }
              ],
              "label": "\"involved\"",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Patent is characterized by patentId, title, and claims attributes and requires Infringement, which is defined by infringementId, infringementDetails, and detectionDate.",
    "PlantUML": "class Patent {\n    +patentId: int\n    +title: String\n    +claims: String\n}\n\nclass Infringement {\n    +infringementId: int\n    +infringementDetails: String\n    +detectionDate: Date\n}\n\nPatent \"1\" --> \"0..*\" Infringement : \"has\"\n",
    "Model": "I102",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Patent",
          "children": [
            {
              "type": "attribute",
              "value": "patentId",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "claims",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Infringement"
                }
              ],
              "label": "\"has\"",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Infringement",
          "children": [
            {
              "type": "attribute",
              "value": "infringementId",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "infringementDetails",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "detectionDate",
              "visibility": "+",
              "data_type": "Date"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "User is designed with userId, name, and role attributes and depends on Patent.",
    "PlantUML": "class User {\n  +userId : int\n  +name : String\n  +role : String\n}\n\nUser \"1\" --> \"0..*\" Patent : manages\n",
    "Model": "I102",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userId",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "role",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Patent"
                }
              ],
              "label": "manages",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Patent",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Analytics encapsulates metric and value attributes and is a dependency of Patent.",
    "PlantUML": "class Analytics {\n  +metric : String\n  +value : double\n}\n\nPatent \"1\" --> \"0..*\" Analytics : provides\n",
    "Model": "I102",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Analytics",
          "children": [
            {
              "type": "attribute",
              "value": "metric",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "value",
              "visibility": "+",
              "data_type": "double"
            }
          ]
        },
        {
          "type": "class",
          "value": "Patent",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Analytics"
                }
              ],
              "label": "provides",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Vehicle integrates id, model, registrationNumber attributes, and the addTrip method, relying on Trip, which includes startTime, endTime, and location.",
    "PlantUML": "class Vehicle {\n  +id: String\n  +model: String\n  +registrationNumber: String\n  +addTrip(trip: Trip)\n}\n\nclass Trip {\n  +startTime: Date\n  +endTime: Date\n  +location: String\n}\n\nVehicle \"1\" --> \"*\" Trip : has\n",
    "Model": "I103",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Vehicle",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "model",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "registrationNumber",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "addTrip(trip: Trip)",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Trip"
                }
              ],
              "label": "has",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Trip",
          "children": [
            {
              "type": "attribute",
              "value": "startTime",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "endTime",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "location",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "User has assignVehicle, userId, and role attributes and depends on Vehicle.",
    "PlantUML": "class User {\n  +userId: String\n  +role: String\n  +assignVehicle(vehicle: Vehicle)\n}\n\nUser \"1\" --> \"*\" Vehicle : tracks\n",
    "Model": "I103",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "role",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "assignVehicle(vehicle: Vehicle)",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Vehicle"
                }
              ],
              "label": "tracks",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Vehicle",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "GPS consists of latitude, longitude attributes, and a reportLocation method, with Vehicle depending on GPS.",
    "PlantUML": "class GPS {\n  +latitude: Double\n  +longitude: Double\n  +reportLocation(vehicle: Vehicle)\n}\n\nVehicle \"1\" --> \"*\" GPS : uses\n",
    "Model": "I103",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "GPS",
          "children": [
            {
              "type": "attribute",
              "value": "latitude",
              "visibility": "+",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "longitude",
              "visibility": "+",
              "data_type": "double"
            },
            {
              "type": "method",
              "value": "reportLocation(vehicle: Vehicle)",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Vehicle",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "GPS"
                }
              ],
              "label": "uses",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Alert includes alertId, alertType, and message attributes; Vehicle contains generateAlert method and relies on Alert.",
    "PlantUML": "class Alert {\n  +alertId: String\n  +alertType: String\n  +message: String\n}\n\nclass Vehicle {\n  +generateAlert(alert: Alert)\n}\n\nVehicle \"1\" --> \"*\" Alert : generates\n",
    "Model": "I103",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Alert",
          "children": [
            {
              "type": "attribute",
              "value": "alertId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "alertType",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "message",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Vehicle",
          "children": [
            {
              "type": "method",
              "value": "generateAlert(alert: Alert)",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Alert"
                }
              ],
              "label": "generates",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Report features generateReport method and reportId attribute and is needed by Vehicle.",
    "PlantUML": "class Report {\n  +reportId: String\n  +generateReport(vehicle: Vehicle)\n}\n\nVehicle \"1\" --> \"*\" Report : generates\n",
    "Model": "I103",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Report",
          "children": [
            {
              "type": "attribute",
              "value": "reportId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "generateReport(vehicle: Vehicle)",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Vehicle",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Report"
                }
              ],
              "label": "generates",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Maintenance holds maintenanceId, scheduleDate, and status attributes and is required by Vehicle.",
    "PlantUML": "class Maintenance {\n  +maintenanceId: String\n  +scheduleDate: Date\n  +status: String\n}\n\nVehicle \"1\" --> \"*\" Maintenance : needs\n",
    "Model": "I103",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Maintenance",
          "children": [
            {
              "type": "attribute",
              "value": "maintenanceId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "scheduleDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Vehicle",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Maintenance"
                }
              ],
              "label": "needs",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Admin encapsulates methods addVehicle, removeVehicle, addUser, removeUser, and an adminId attribute, depending on both Vehicle and User.",
    "PlantUML": "class Admin {\n  +adminId: String\n  +addVehicle(vehicle: Vehicle)\n  +removeVehicle(vehicle: Vehicle)\n  +addUser(user: User)\n  +removeUser(user: User)\n}\n\nAdmin \"1\" --> \"*\" Vehicle : manages\nAdmin \"1\" --> \"*\" User : manages\n",
    "Model": "I103",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Admin",
          "children": [
            {
              "type": "attribute",
              "value": "adminId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "addVehicle(vehicle: Vehicle)",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "removeVehicle(vehicle: Vehicle)",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "addUser(user: User)",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "removeUser(user: User)",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Vehicle"
                }
              ],
              "label": "manages",
              "multiplicity1": "1",
              "multiplicity2": "*"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "manages",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Vehicle",
          "children": []
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Driver includes driverId attribute and viewTripHistory method, relying on Vehicle.",
    "PlantUML": "class Driver {\n  +driverId: String\n  +viewTripHistory(vehicle: Vehicle)\n}\n\nDriver \"1\" --> \"*\" Vehicle : \"assigned to\"\n",
    "Model": "I103",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Driver",
          "children": [
            {
              "type": "attribute",
              "value": "driverId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "viewTripHistory(vehicle: Vehicle)",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Vehicle"
                }
              ],
              "label": "\"assigned to\"",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Vehicle",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Route integrates routeId, startLocation, and endLocation attributes and is required by Trip.",
    "PlantUML": "class Route {\n  +routeId: String\n  +startLocation: String\n  +endLocation: String\n}\n\nTrip \"1\" --> \"1\" Route : follows\n",
    "Model": "I103",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Route",
          "children": [
            {
              "type": "attribute",
              "value": "routeId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "startLocation",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "endLocation",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Trip",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Route"
                }
              ],
              "label": "follows",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Notification class contains notificationId and message attributes; User depends on Notification.",
    "PlantUML": "class Notification {\n    +notificationId: String\n    +message: String\n}\nUser \"1\" --> \"*\" Notification : receives\n",
    "Model": "I103",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Notification",
          "children": [
            {
              "type": "attribute",
              "value": "notificationId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "message",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Notification"
                }
              ],
              "label": "receives",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Robot is defined by id, capability, and status attributes and requires Task, which includes id, type, and status attributes.",
    "PlantUML": "class Robot {\n  id: int\n  capability: String\n  status: String\n}\n\nclass Task {\n  id: int\n  type: String\n  status: String\n}\n\nRobot \"1\" --> \"0..*\" Task : assignedTasks\n",
    "Model": "I104",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Robot",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "capability",
              "visibility": "",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Task"
                }
              ],
              "label": "assignedTasks",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Task",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "type",
              "visibility": "",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Location comprises x, y, and timestamp attributes and is needed by Robot.",
    "PlantUML": "class Location {\n  x: int\n  y: int\n  timestamp: DateTime\n}\n\nRobot \"1\" --> \"1\" Location : currentLocation\n",
    "Model": "I104",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Location",
          "children": [
            {
              "type": "attribute",
              "value": "x",
              "visibility": "",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "y",
              "visibility": "",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "",
              "data_type": "DateTime"
            }
          ]
        },
        {
          "type": "class",
          "value": "Robot",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Location"
                }
              ],
              "label": "currentLocation",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Path has points and status attributes and is a dependency of Robot.",
    "PlantUML": "class Path {\n  points: List<Location>\n  status: String\n}\n\nRobot \"1\" --> \"1\" Path : assignedPath\n",
    "Model": "I104",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Path",
          "children": [
            {
              "type": "attribute",
              "value": "points",
              "visibility": "",
              "data_type": "List<Location>"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Robot",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Path"
                }
              ],
              "label": "assignedPath",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "InventoryItem includes id, name, and quantity attributes, with Robot depending on it.",
    "PlantUML": "class InventoryItem {\n  id: int\n  name: String\n  quantity: int\n}\n\nRobot \"1\" --> \"0..*\" InventoryItem : interactingWith\n",
    "Model": "I104",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "InventoryItem",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "quantity",
              "visibility": "",
              "data_type": "int"
            }
          ]
        },
        {
          "type": "class",
          "value": "Robot",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "InventoryItem"
                }
              ],
              "label": "interactingWith",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Battery features level and status attributes and is required by Robot.",
    "PlantUML": "class Battery {\n  level: int\n  status: String\n}\n\nRobot \"1\" --> \"1\" Battery : hasBattery\n",
    "Model": "I104",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Battery",
          "children": [
            {
              "type": "attribute",
              "value": "level",
              "visibility": "",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Robot",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Battery"
                }
              ],
              "label": "hasBattery",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "ErrorLog is defined by id, timestamp, and description attributes and is needed by Robot.",
    "PlantUML": "class ErrorLog {\n  id: int\n  timestamp: DateTime\n  description: String\n}\n\nRobot \"1\" --> \"0..*\" ErrorLog : logs\n",
    "Model": "I104",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ErrorLog",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Robot",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "ErrorLog"
                }
              ],
              "label": "logs",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Supervisor consists of id and name attributes and depends on Task.",
    "PlantUML": "class Supervisor {\n  id: int\n  name: String\n}\n\nSupervisor \"1\" --> \"0..*\" Task : manuallyAssigns\n",
    "Model": "I104",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Supervisor",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Task"
                }
              ],
              "label": "manuallyAssigns",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Task",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Priority class contains level and weight attributes; Task relies on Priority.",
    "PlantUML": "Task \"1\" --> \"1\" Priority : hasPriority\n\nclass Priority {\n    level: String\n    weight: int\n}\n",
    "Model": "I104",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Priority",
          "children": [
            {
              "type": "attribute",
              "value": "level",
              "visibility": "",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "weight",
              "visibility": "",
              "data_type": "int"
            }
          ]
        },
        {
          "type": "class",
          "value": "Task",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Priority"
                }
              ],
              "label": "hasPriority",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Maintenance includes id, date, and description attributes and is required by Robot.",
    "PlantUML": "class Maintenance {\n  id: int\n  date: DateTime\n  description: String\n}\n\nRobot \"1\" --> \"0..*\" Maintenance : scheduledFor\n",
    "Model": "I104",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Maintenance",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "date",
              "visibility": "",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Robot",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Maintenance"
                }
              ],
              "label": "scheduledFor",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "ExternalSystem integrates id, name, and type attributes, depending on Robot.",
    "PlantUML": "class ExternalSystem {\n  id: int\n  name: String\n  type: String\n}\n\nRobot \"1\" --> \"0..*\" ExternalSystem : communicatesWith\n",
    "Model": "I104",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ExternalSystem",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "type",
              "visibility": "",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Robot",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "ExternalSystem"
                }
              ],
              "label": "communicatesWith",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "User structure contains authenticate method, userId, and password attributes, and is composed with Role, which has assignRole method, roleId, and roleName attributes.",
    "PlantUML": "class User {\n  - userId: String\n  - password: String\n  + authenticate(): Boolean\n}\n\nclass Role {\n  - roleId: String\n  - roleName: String\n  + assignRole(): void\n}\n\nUser \"1\" *-- \"1..*\" Role\n",
    "Model": "I105",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "authenticate()",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Role"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "1..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Role",
          "children": [
            {
              "type": "attribute",
              "value": "roleId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "roleName",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "assignRole()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Classroom consists of roomId and schedule attributes and is composed with Schedule, which provides createSchedule and updateSchedule methods, scheduleId, and timeSlot attributes.",
    "PlantUML": "class Classroom {\n  - roomId: String\n  - schedule: List<Schedule>\n}\n\nclass Schedule {\n  - scheduleId: String\n  - timeSlot: String\n  + createSchedule(): void\n  + updateSchedule(): void\n}\n\nClassroom \"1\" *-- \"1..*\" Schedule\n",
    "Model": "I105",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Classroom",
          "children": [
            {
              "type": "attribute",
              "value": "roomId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "schedule",
              "visibility": "-",
              "data_type": "List<Schedule>"
            },
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Schedule"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "1..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Schedule",
          "children": [
            {
              "type": "attribute",
              "value": "scheduleId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timeSlot",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "createSchedule()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "updateSchedule()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Attendance integrates attendanceId, date, status attributes, and markAttendance method; Student encapsulates studentId and name and is composed with Attendance.",
    "PlantUML": "class Attendance {\n  - attendanceId: String\n  - date: Date\n  - status: Boolean\n  + markAttendance(): void\n}\n\nclass Student {\n  - studentId: String\n  - name: String\n}\n\nStudent \"1\" *-- \"0..*\" Attendance\n",
    "Model": "I105",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Attendance",
          "children": [
            {
              "type": "attribute",
              "value": "attendanceId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "date",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "boolean"
            },
            {
              "type": "method",
              "value": "markAttendance()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Student",
          "children": [
            {
              "type": "attribute",
              "value": "studentId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Attendance"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Assignment includes assignmentId and description attributes, along with createAssignment and submitAssignment methods; both Student and Teacher are composed with Assignment.",
    "PlantUML": "class Assignment {\n  - assignmentId: String\n  - description: String\n  + createAssignment(): void\n  + submitAssignment(): void\n}\n\nStudent \"1\" *-- \"0..*\" Assignment\nTeacher \"1\" *-- \"1..*\" Assignment\n",
    "Model": "I105",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Assignment",
          "children": [
            {
              "type": "attribute",
              "value": "assignmentId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "createAssignment()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "submitAssignment()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Student",
          "children": [
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Assignment"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Teacher",
          "children": [
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Assignment"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "1..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Exam holds examId and subject attributes, and a createExam method; it is composed with Grade, which contains gradeId, score attributes, and recordGrade method; Student is composed with Grade, and Teacher is associated with Exam.",
    "PlantUML": "class Exam {\n  - examId: String\n  - subject: String\n  + createExam(): void\n}\n\nclass Grade {\n  - gradeId: String\n  - score: Float\n  + recordGrade(): void\n}\n\nclass Student {}\n\nclass Teacher {}\n\nStudent \"1\" *-- \"0..*\" Grade\nExam \"1\" *-- \"0..*\" Grade\nTeacher \"1\" *-- \"0..*\" Exam\n",
    "Model": "I105",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Exam",
          "children": [
            {
              "type": "attribute",
              "value": "examId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "subject",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "createExam()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Grade"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Grade",
          "children": [
            {
              "type": "attribute",
              "value": "gradeId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "score",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "method",
              "value": "recordGrade()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Student",
          "children": [
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Grade"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Teacher",
          "children": [
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Exam"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Notification class contains sendNotification method, notificationId, and message attributes.",
    "PlantUML": "class Notification {\n  - notificationId: String\n  - message: String\n  + sendNotification(): void\n}\n\nStudent \"0..*\" <.. \"1\" Notification\nTeacher \"0..*\" <.. \"1\" Notification\n",
    "Model": "I105",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Notification",
          "children": [
            {
              "type": "attribute",
              "value": "notificationId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "message",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "sendNotification()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Resource integrates uploadResource method, resourceId, type, and content attributes; Teacher is composed with Resource.",
    "PlantUML": "class Resource {\n  - resourceId: String\n  - type: String\n  - content: String\n  + uploadResource(): void\n}\n\nTeacher \"1\" *-- \"1..*\" Resource\nStudent \"0..*\" <.. \"1\" Resource\n",
    "Model": "I105",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Resource",
          "children": [
            {
              "type": "attribute",
              "value": "resourceId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "type",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "content",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "uploadResource()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Teacher",
          "children": [
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Resource"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "1..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Analytics features generateReport method and analyticsId and data attributes; Student has Analytics as a part, and Teacher is composed with Analytics.",
    "PlantUML": "class Analytics {\n  - analyticsId: String\n  - data: String\n  + generateReport(): void\n}\n\nStudent \"1\" *-- \"0..*\" Analytics\nTeacher \"1\" *-- \"0..*\" Analytics\n",
    "Model": "I105",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Analytics",
          "children": [
            {
              "type": "attribute",
              "value": "analyticsId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "data",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "generateReport()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Student",
          "children": [
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Analytics"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Teacher",
          "children": [
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Analytics"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "LiveClass includes sessionId and topic attributes, along with startClass and joinClass methods; Teacher is composed with LiveClass.",
    "PlantUML": "class LiveClass {\n  - sessionId: String\n  - topic: String\n  + startClass(): void\n  + joinClass(): void\n}\n\nTeacher \"1\" *-- \"1..*\" LiveClass\nStudent \"0..*\" <.. \"1\" LiveClass\n",
    "Model": "I105",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "LiveClass",
          "children": [
            {
              "type": "attribute",
              "value": "sessionId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "topic",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "startClass()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "joinClass()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Teacher",
          "children": [
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "LiveClass"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "1..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Parent encapsulates viewChildRecords method, parentId, and name attributes; Parent is composed with Student.",
    "PlantUML": "class Parent {\n  - parentId: String\n  - name: String\n  + viewChildRecords(): void\n}\n\nParent \"1\" *-- \"1..*\" Student\nParent \"1\" <.. \"0..*\" Attendance\nParent \"1\" <.. \"0..*\" Grade\n",
    "Model": "I105",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Parent",
          "children": [
            {
              "type": "attribute",
              "value": "parentId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "viewChildRecords()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Student"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "1..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Student",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "User includes username and password attributes and register and login methods.",
    "PlantUML": "class User {\n    +register()\n    +login()\n    -username: String\n    -password: String\n}\n",
    "Model": "I106",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "method",
              "value": "register()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "login()",
              "visibility": "+"
            },
            {
              "type": "attribute",
              "value": "username",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Ticket structure contains bookTicket method, ticketId, routeId, and date attributes; User depends on Ticket.",
    "PlantUML": "class Ticket {\n  +bookTicket()\n  -ticketId: String\n  -routeId: String\n  -date: Date\n}\nUser --> Ticket : books\n",
    "Model": "I106",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Ticket",
          "children": [
            {
              "type": "method",
              "value": "bookTicket()",
              "visibility": "+"
            },
            {
              "type": "attribute",
              "value": "ticketId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "routeId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "date",
              "visibility": "-",
              "data_type": "Date"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Ticket"
                }
              ],
              "label": "books"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Payment includes processPayment method, paymentId, and amount attribute; Ticket requires Payment.",
    "PlantUML": "class Payment {\n  +processPayment()\n  -paymentId: String\n  -amount: Double\n}\nTicket --> Payment : processes\n",
    "Model": "I106",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Payment",
          "children": [
            {
              "type": "method",
              "value": "processPayment()",
              "visibility": "+"
            },
            {
              "type": "attribute",
              "value": "paymentId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "amount",
              "visibility": "-",
              "data_type": "double"
            }
          ]
        },
        {
          "type": "class",
          "value": "Ticket",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Payment"
                }
              ],
              "label": "processes"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Route features addRoute and getSchedule methods, plus routeId, startPoint, endPoint, and schedule attributes; Ticket depends on Route.",
    "PlantUML": "class Route {\n  +addRoute()\n  +getSchedule()\n  -routeId: String\n  -startPoint: String\n  -endPoint: String\n  -schedule: List<Date>\n}\n\nTicket --> Route : refers to\n",
    "Model": "I106",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Route",
          "children": [
            {
              "type": "method",
              "value": "addRoute()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "getSchedule()",
              "visibility": "+"
            },
            {
              "type": "attribute",
              "value": "routeId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "startPoint",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "endPoint",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "schedule",
              "visibility": "-",
              "data_type": "List<Date>"
            }
          ]
        },
        {
          "type": "class",
          "value": "Ticket",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Route"
                }
              ],
              "label": "refers to"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Fare encapsulates distance and routeType attributes and calculateFare method; Route depends on Fare.",
    "PlantUML": "class Fare {\n  +calculateFare()\n  -distance: Double\n  -routeType: String\n}\n\nRoute --> Fare : uses\n",
    "Model": "I106",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Fare",
          "children": [
            {
              "type": "method",
              "value": "calculateFare()",
              "visibility": "+"
            },
            {
              "type": "attribute",
              "value": "distance",
              "visibility": "-",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "routeType",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Route",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Fare"
                }
              ],
              "label": "uses"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Admin is defined by manageUsers and manageRoutes methods and requires User.",
    "PlantUML": "class Admin {\n  +manageUsers()\n  +manageRoutes()\n}\n\nAdmin --> User\n",
    "Model": "I106",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Admin",
          "children": [
            {
              "type": "method",
              "value": "manageUsers()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "manageRoutes()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Validator consists of validateTicket method and ticketId attribute; Ticket depends on Validator.",
    "PlantUML": "class Validator {\n  +validateTicket()\n  -ticketId: String\n}\n\nTicket --> Validator : validates\n",
    "Model": "I106",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Validator",
          "children": [
            {
              "type": "method",
              "value": "validateTicket()",
              "visibility": "+"
            },
            {
              "type": "attribute",
              "value": "ticketId",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Ticket",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Validator"
                }
              ],
              "label": "validates"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Notification structure has sendNotification method, notificationId, and message attributes; User and Ticket depend on Notification.",
    "PlantUML": "class Notification {\n  +sendNotification()\n  -notificationId: String\n  -message: String\n}\n\nUser --> Notification : receives\nTicket --> Notification : triggers\n",
    "Model": "I106",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Notification",
          "children": [
            {
              "type": "method",
              "value": "sendNotification()",
              "visibility": "+"
            },
            {
              "type": "attribute",
              "value": "notificationId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "message",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Notification"
                }
              ],
              "label": "receives"
            }
          ]
        },
        {
          "type": "class",
          "value": "Ticket",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Notification"
                }
              ],
              "label": "triggers"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "History class includes historyId, ticketList, and getTravelHistory method; User requires History.",
    "PlantUML": "class History {\n  + getTravelHistory()\n  - historyId: String\n  - ticketList: List<Ticket>\n}\n\nUser --> History : views\n",
    "Model": "I106",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "History",
          "children": [
            {
              "type": "method",
              "value": "getTravelHistory()",
              "visibility": "+"
            },
            {
              "type": "attribute",
              "value": "historyId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "ticketList",
              "visibility": "-",
              "data_type": "List<Ticket>"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "History"
                }
              ],
              "label": "views"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Support encapsulates raiseTicket method, supportId, and query attributes; User depends on Support.",
    "PlantUML": "class Support {\n  +raiseTicket()\n  -supportId: String\n  -query: String\n}\n\nUser --> Support : raises\n",
    "Model": "I106",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Support",
          "children": [
            {
              "type": "method",
              "value": "raiseTicket()",
              "visibility": "+"
            },
            {
              "type": "attribute",
              "value": "supportId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "query",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Support"
                }
              ],
              "label": "raises"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Repository design integrates name, url attributes and createRepository, cloneRepository, and deleteRepository methods; User encapsulates accessRepository and username and depends on Repository.",
    "PlantUML": "class Repository {\n  -name: String\n  -url: String\n  +createRepository()\n  +cloneRepository()\n  +deleteRepository()\n}\n\nclass User {\n  -username: String\n  +accessRepository()\n}\n\nUser --> Repository : \"manages\"\n",
    "Model": "I107",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Repository",
          "children": [
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "url",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "createRepository()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "cloneRepository()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "deleteRepository()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "username",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "accessRepository()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Repository"
                }
              ],
              "label": "\"manages\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Branch structure provides createBranch, switchBranch, deleteBranch methods, and name attribute; Repository requires Branch.",
    "PlantUML": "class Branch {\n  -name: String\n  +createBranch()\n  +switchBranch()\n  +deleteBranch()\n}\n\nRepository --> Branch : \"contains\"\n",
    "Model": "I107",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Branch",
          "children": [
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "createBranch()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "switchBranch()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "deleteBranch()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Repository",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Branch"
                }
              ],
              "label": "\"contains\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Commit includes stageChanges and commitChanges methods and hash and message attributes; Branch depends on Commit, and User relies on Commit.",
    "PlantUML": "class Commit {\n  -hash: String\n  -message: String\n  +stageChanges()\n  +commitChanges()\n}\n\nBranch --> Commit : \"tracks\"\nUser --> Commit : \"makes\"\n",
    "Model": "I107",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Commit",
          "children": [
            {
              "type": "attribute",
              "value": "hash",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "message",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "stageChanges()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "commitChanges()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Branch",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Commit"
                }
              ],
              "label": "\"tracks\""
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Commit"
                }
              ],
              "label": "\"makes\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Merge is defined by mergeBranches and resolveConflicts methods; Branch depends on Merge.",
    "PlantUML": "class Merge {\n  +mergeBranches()\n  +resolveConflicts()\n}\n\nBranch --> Merge : \"merges\"\n",
    "Model": "I107",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Merge",
          "children": [
            {
              "type": "method",
              "value": "mergeBranches()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "resolveConflicts()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Branch",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Merge"
                }
              ],
              "label": "\"merges\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "History encapsulates viewLogs method; Commit and Repository depend on History.",
    "PlantUML": "class History {\n  +viewLogs()\n}\n\nCommit --> History : \"maintains\"\nRepository --> History : \"contains\"\n",
    "Model": "I107",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "History",
          "children": [
            {
              "type": "method",
              "value": "viewLogs()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Commit",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "History"
                }
              ],
              "label": "\"maintains\""
            }
          ]
        },
        {
          "type": "class",
          "value": "Repository",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "History"
                }
              ],
              "label": "\"contains\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Collaboration includes pushChanges and pullChanges methods; User depends on Collaboration, and Repository depends on Collaboration.",
    "PlantUML": "class Collaboration {\n    +pushChanges()\n    +pullChanges()\n}\n\nUser --> Collaboration : \"participates\"\nRepository --> Collaboration : \"facilitates\"\n",
    "Model": "I107",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Collaboration",
          "children": [
            {
              "type": "method",
              "value": "pushChanges()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "pullChanges()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Collaboration"
                }
              ],
              "label": "\"participates\""
            }
          ]
        },
        {
          "type": "class",
          "value": "Repository",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Collaboration"
                }
              ],
              "label": "\"facilitates\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "AccessControl has permissions attribute and assignRole and checkPermission methods; User depends on AccessControl, and Repository needs AccessControl.",
    "PlantUML": "class AccessControl {\n  -permissions: String\n  +assignRole()\n  +checkPermission()\n}\n\nUser --> AccessControl : \"uses\"\nRepository --> AccessControl : \"enforces\"\n",
    "Model": "I107",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AccessControl",
          "children": [
            {
              "type": "attribute",
              "value": "permissions",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "assignRole()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "checkPermission()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "AccessControl"
                }
              ],
              "label": "\"uses\""
            }
          ]
        },
        {
          "type": "class",
          "value": "Repository",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "AccessControl"
                }
              ],
              "label": "\"enforces\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Tag includes name attribute and createTag and deleteTag methods; Commit depends on Tag.",
    "PlantUML": "class Tag {\n  -name: String\n  +createTag()\n  +deleteTag()\n}\nCommit --> Tag : \"associates\"\n",
    "Model": "I107",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Tag",
          "children": [
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "createTag()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "deleteTag()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Commit",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Tag"
                }
              ],
              "label": "\"associates\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Conflict class has detectConflict and resolveConflict methods; Merge depends on Conflict, and File needs Conflict.",
    "PlantUML": "class Conflict {\n  +detectConflict()\n  +resolveConflict()\n}\n\nMerge --> Conflict : \"handles\"\nFile --> Conflict : \"detects\"\n",
    "Model": "I107",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Conflict",
          "children": [
            {
              "type": "method",
              "value": "detectConflict()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "resolveConflict()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Merge",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Conflict"
                }
              ],
              "label": "\"handles\""
            }
          ]
        },
        {
          "type": "class",
          "value": "File",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Conflict"
                }
              ],
              "label": "\"detects\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Backup encapsulates createBackup and restoreBackup methods; Repository depends on Backup.",
    "PlantUML": "class Backup {\n  +createBackup()\n  +restoreBackup()\n}\n\nRepository --> Backup : \"supports\"\n",
    "Model": "I107",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Backup",
          "children": [
            {
              "type": "method",
              "value": "createBackup()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "restoreBackup()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Repository",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Backup"
                }
              ],
              "label": "\"supports\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "CodeEditor contains textContent attribute and highlightSyntax, autoComplete features, plus formatText method.",
    "PlantUML": "class CodeEditor {\n  +textContent : String\n  +highlightSyntax()\n  +autoComplete()\n  +formatText()\n}",
    "Model": "I108",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "CodeEditor",
          "children": [
            {
              "type": "attribute",
              "value": "textContent",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "highlightSyntax()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "autoComplete()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "formatText()",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Debugger structure has startDebugging, stepOver, setBreakpoint, and inspectVariable methods; CodeEditor depends on Debugger.",
    "PlantUML": "class Debugger {\n    +startDebugging()\n    +stepOver()\n    +setBreakpoint(line: int)\n    +inspectVariable(variable: String)\n}\nCodeEditor --> Debugger : uses",
    "Model": "I108",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Debugger",
          "children": [
            {
              "type": "method",
              "value": "startDebugging()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "stepOver()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "setBreakpoint(line: int)",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "inspectVariable(variable: String)",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "CodeEditor",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Debugger"
                }
              ],
              "label": "uses"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "FileManager is defined by openFile, saveFile, and closeFile methods; CodeEditor depends on FileManager.",
    "PlantUML": "class FileManager {\n  +openFile(filePath: String)\n  +saveFile(filePath: String)\n  +closeFile()\n}\nCodeEditor --> FileManager : interacts",
    "Model": "I108",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "FileManager",
          "children": [
            {
              "type": "method",
              "value": "openFile(filePath: String)",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "saveFile(filePath: String)",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "closeFile()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "CodeEditor",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "FileManager"
                }
              ],
              "label": "interacts"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "CodeFormatter includes formatCode method; CodeEditor requires CodeFormatter.",
    "PlantUML": "class CodeFormatter {\n  +formatCode(code: String): String\n}\nCodeEditor --> CodeFormatter : uses",
    "Model": "I108",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "CodeFormatter",
          "children": [
            {
              "type": "method",
              "value": "formatCode(code: String)",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "CodeEditor",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "CodeFormatter"
                }
              ],
              "label": "uses"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "VersionControl offers commitChanges, pushChanges, and pullChanges methods; CodeEditor depends on VersionControl.",
    "PlantUML": "class VersionControl {\n  +commitChanges(message: String)\n  +pushChanges()\n  +pullChanges()\n}\nCodeEditor --> VersionControl : interacts",
    "Model": "I108",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "VersionControl",
          "children": [
            {
              "type": "method",
              "value": "commitChanges(message: String)",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "pushChanges()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "pullChanges()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "CodeEditor",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "VersionControl"
                }
              ],
              "label": "interacts"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "BuildSystem encapsulates compileCode, runCode, and showOutput methods; CodeEditor relies on BuildSystem.",
    "PlantUML": "class BuildSystem {\n  +compileCode()\n  +runCode()\n  +showOutput()\n}\nCodeEditor --> BuildSystem : triggers\n",
    "Model": "I108",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "BuildSystem",
          "children": [
            {
              "type": "method",
              "value": "compileCode()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "runCode()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "showOutput()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "CodeEditor",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "BuildSystem"
                }
              ],
              "label": "triggers"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "ProjectManager features createProject and switchProject attributes; FileManager depends on ProjectManager.",
    "PlantUML": "class ProjectManager {\n  +createProject: String\n  +switchProject: String\n}\n\nFileManager --> ProjectManager : interacts\n",
    "Model": "I108",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ProjectManager",
          "children": [
            {
              "type": "attribute",
              "value": "createProject",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "switchProject",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "FileManager",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "ProjectManager"
                }
              ],
              "label": "interacts"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "CodeEditor requires SyntaxChecker.",
    "PlantUML": "class SyntaxChecker {\n  + checkSyntax: code: String : boolean\n}\n\nCodeEditor --> SyntaxChecker : validates\n",
    "Model": "I108",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "SyntaxChecker",
          "children": []
        },
        {
          "type": "class",
          "value": "CodeEditor",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "SyntaxChecker"
                }
              ],
              "label": "validates"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Plugin provides installPlugin and enablePlugin methods; CodeEditor depends on Plugin.",
    "PlantUML": "class Plugin {\n  +installPlugin: String\n  +enablePlugin: String\n}\n\nCodeEditor --> Plugin : supports\n",
    "Model": "I108",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Plugin",
          "children": [
            {
              "type": "attribute",
              "value": "installPlugin",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "enablePlugin",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "CodeEditor",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Plugin"
                }
              ],
              "label": "supports"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "UserPreferences structure includes setTheme, setKeybinding, and setFontSize methods; CodeEditor depends on UserPreferences.",
    "PlantUML": "class UserPreferences {\n  +setTheme(themeName: String)\n  +setKeybinding(key: String, action: String)\n  +setFontSize(size: int)\n}\nCodeEditor --> UserPreferences : applies\n",
    "Model": "I108",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "UserPreferences",
          "children": [
            {
              "type": "method",
              "value": "setTheme(themeName: String)",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "setKeybinding(key: String, action: String)",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "setFontSize(size: int)",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "CodeEditor",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "UserPreferences"
                }
              ],
              "label": "applies"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "OS is defined by createProcess, scheduleProcess, and terminateProcess methods and requires Process, which has processID, state, and priority attributes.",
    "PlantUML": "class OS {\n  +createProcess()\n  +scheduleProcess()\n  +terminateProcess()\n}\n\nclass Process {\n  +processID\n  +state\n  +priority\n}\n\nOS --> Process : manages",
    "Model": "I109",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "OS",
          "children": [
            {
              "type": "method",
              "value": "createProcess()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "scheduleProcess()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "terminateProcess()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Process"
                }
              ],
              "label": "manages"
            }
          ]
        },
        {
          "type": "class",
          "value": "Process",
          "children": [
            {
              "type": "attribute",
              "value": "processID",
              "visibility": "+"
            },
            {
              "type": "attribute",
              "value": "state",
              "visibility": "+"
            },
            {
              "type": "attribute",
              "value": "priority",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "OS provides allocateMemory and deallocateMemory methods and depends on Memory, which includes totalSize, usedSize, and freeSize attributes.",
    "PlantUML": "class OS {\n    +allocateMemory()\n    +deallocateMemory()\n}\nclass Memory {\n    -totalSize\n    -usedSize\n    -freeSize\n}\nOS --> Memory : manages",
    "Model": "I109",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "OS",
          "children": [
            {
              "type": "method",
              "value": "allocateMemory()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "deallocateMemory()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Memory"
                }
              ],
              "label": "manages"
            }
          ]
        },
        {
          "type": "class",
          "value": "Memory",
          "children": [
            {
              "type": "attribute",
              "value": "totalSize",
              "visibility": "-"
            },
            {
              "type": "attribute",
              "value": "usedSize",
              "visibility": "-"
            },
            {
              "type": "attribute",
              "value": "freeSize",
              "visibility": "-"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "OS features createFile, deleteFile, readFile, and writeFile methods and depends on File, which includes fileName, fileSize, and fileType attributes.",
    "PlantUML": "class OS {\n    +createFile()\n    +deleteFile()\n    +readFile()\n    +writeFile()\n}\n\nclass File {\n    +fileName\n    +fileSize\n    +fileType\n}\n\nOS --> File : manages",
    "Model": "I109",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "OS",
          "children": [
            {
              "type": "method",
              "value": "createFile()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "deleteFile()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "readFile()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "writeFile()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "File"
                }
              ],
              "label": "manages"
            }
          ]
        },
        {
          "type": "class",
          "value": "File",
          "children": [
            {
              "type": "attribute",
              "value": "fileName",
              "visibility": "+"
            },
            {
              "type": "attribute",
              "value": "fileSize",
              "visibility": "+"
            },
            {
              "type": "attribute",
              "value": "fileType",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "OS is defined by initializeDevice and manageDevice methods and depends on Device, which encapsulates deviceID, deviceType, and deviceStatus attributes.",
    "PlantUML": "class OS {\n    +initializeDevice()\n    +manageDevice()\n}\nclass Device {\n    +deviceID\n    +deviceType\n    +deviceStatus\n}\nOS --> Device : controls",
    "Model": "I109",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "OS",
          "children": [
            {
              "type": "method",
              "value": "initializeDevice()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "manageDevice()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Device"
                }
              ],
              "label": "controls"
            }
          ]
        },
        {
          "type": "class",
          "value": "Device",
          "children": [
            {
              "type": "attribute",
              "value": "deviceID",
              "visibility": "+"
            },
            {
              "type": "attribute",
              "value": "deviceType",
              "visibility": "+"
            },
            {
              "type": "attribute",
              "value": "deviceStatus",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "OS includes displayUserInterface features and depends on UserInterface, defined by interfaceType and UIStatus attributes.",
    "PlantUML": "class OS {\n  +displayUserInterface()\n}\nclass UserInterface {\n  +interfaceType\n  +UIStatus\n}\nOS --> UserInterface : provides",
    "Model": "I109",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "OS",
          "children": [
            {
              "type": "method",
              "value": "displayUserInterface()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "UserInterface"
                }
              ],
              "label": "provides"
            }
          ]
        },
        {
          "type": "class",
          "value": "UserInterface",
          "children": [
            {
              "type": "attribute",
              "value": "interfaceType",
              "visibility": "+"
            },
            {
              "type": "attribute",
              "value": "UIStatus",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "OS offers authenticateUser and authorizeAccess methods and depends on User, which includes userID and userRole attributes.",
    "PlantUML": "class OS {\n  +authenticateUser()\n  +authorizeAccess()\n}\nclass User {\n  +userID\n  +userRole\n}\nOS --> User : manages",
    "Model": "I109",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "OS",
          "children": [
            {
              "type": "method",
              "value": "authenticateUser()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "authorizeAccess()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "manages"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userID",
              "visibility": "+"
            },
            {
              "type": "attribute",
              "value": "userRole",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "OS provides establishConnection and manageNetworkProtocols methods and depends on Network, designed with protocol and status attributes.",
    "PlantUML": "class OS {\n  +establishConnection()\n  +manageNetworkProtocols()\n}\nclass Network {\n  -protocol\n  -status\n}\nOS --> Network : controls",
    "Model": "I109",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "OS",
          "children": [
            {
              "type": "method",
              "value": "establishConnection()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "manageNetworkProtocols()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Network"
                }
              ],
              "label": "controls"
            }
          ]
        },
        {
          "type": "class",
          "value": "Network",
          "children": [
            {
              "type": "attribute",
              "value": "protocol",
              "visibility": "-"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "OS design includes scheduleTask method and depends on Task, which integrates taskID and priorityLevel attributes.",
    "PlantUML": "class OS {\n  +scheduleTask()\n}\n\nclass Task {\n  +taskID\n  +priorityLevel\n}\n\nOS --> Task : schedules",
    "Model": "I109",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "OS",
          "children": [
            {
              "type": "method",
              "value": "scheduleTask()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Task"
                }
              ],
              "label": "schedules"
            }
          ]
        },
        {
          "type": "class",
          "value": "Task",
          "children": [
            {
              "type": "attribute",
              "value": "taskID",
              "visibility": "+"
            },
            {
              "type": "attribute",
              "value": "priorityLevel",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "OS contains handleInterrupt method and depends on Interrupt, which has interruptType and interruptSource attributes.",
    "PlantUML": "class OS {\n  +handleInterrupt()\n}\n\nclass Interrupt {\n  +interruptType\n  +interruptSource\n}\n\nOS --> Interrupt : responds",
    "Model": "I109",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "OS",
          "children": [
            {
              "type": "method",
              "value": "handleInterrupt()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Interrupt"
                }
              ],
              "label": "responds"
            }
          ]
        },
        {
          "type": "class",
          "value": "Interrupt",
          "children": [
            {
              "type": "attribute",
              "value": "interruptType",
              "visibility": "+"
            },
            {
              "type": "attribute",
              "value": "interruptSource",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "OS design features detectError and handleError methods and depends on Error, which includes errorCode and errorDescription attributes.",
    "PlantUML": "class OS {\n  +detectError()\n  +handleError()\n}\n\nclass Error {\n  -errorCode\n  -errorDescription\n}\n\nOS --> Error : manages",
    "Model": "I109",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "OS",
          "children": [
            {
              "type": "method",
              "value": "detectError()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "handleError()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Error"
                }
              ],
              "label": "manages"
            }
          ]
        },
        {
          "type": "class",
          "value": "Error",
          "children": [
            {
              "type": "attribute",
              "value": "errorCode",
              "visibility": "-"
            },
            {
              "type": "attribute",
              "value": "errorDescription",
              "visibility": "-"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "NetworkMonitor design integrates collectMetrics and storeMetrics methods and is associated with NetworkMetrics, which encapsulates latency, bandwidthUsage, and packetLoss attributes.",
    "PlantUML": "class NetworkMonitor {\n  +collectMetrics()\n  +storeMetrics()\n}\nclass NetworkMetrics {\n  +latency: int\n  +bandwidthUsage: int\n  +packetLoss: int\n}\nNetworkMonitor -- NetworkMetrics : collects",
    "Model": "I110",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "NetworkMonitor",
          "children": [
            {
              "type": "method",
              "value": "collectMetrics()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "storeMetrics()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "NetworkMetrics"
                }
              ],
              "label": "collects"
            }
          ]
        },
        {
          "type": "class",
          "value": "NetworkMetrics",
          "children": [
            {
              "type": "attribute",
              "value": "latency",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "bandwidthUsage",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "packetLoss",
              "visibility": "+",
              "data_type": "int"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "NetworkTrafficAnalyzer provides analyzeTraffic and detectBottlenecks methods and is linked to NetworkTraffic, which includes incomingTraffic and outgoingTraffic attributes.",
    "PlantUML": "class NetworkTrafficAnalyzer {\n  +analyzeTraffic()\n  +detectBottlenecks()\n}\nclass NetworkTraffic {\n  +incomingTraffic: int\n  +outgoingTraffic: int\n}\nNetworkTrafficAnalyzer -- NetworkTraffic : analyzes",
    "Model": "I110",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "NetworkTrafficAnalyzer",
          "children": [
            {
              "type": "method",
              "value": "analyzeTraffic()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "detectBottlenecks()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "NetworkTraffic"
                }
              ],
              "label": "analyzes"
            }
          ]
        },
        {
          "type": "class",
          "value": "NetworkTraffic",
          "children": [
            {
              "type": "attribute",
              "value": "incomingTraffic",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "outgoingTraffic",
              "visibility": "+",
              "data_type": "int"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "AlertSystem features generateAlert and sendAlert methods and is linked to NetworkMetrics; NetworkMonitor is associated with AlertSystem.",
    "PlantUML": "class AlertSystem {\n  +generateAlert()\n  +sendAlert()\n}\n\nclass NetworkMonitor {\n}\n\nclass NetworkMetrics {\n}\n\nNetworkMonitor -- AlertSystem : triggers \nAlertSystem -- NetworkMetrics : uses",
    "Model": "I110",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AlertSystem",
          "children": [
            {
              "type": "method",
              "value": "generateAlert()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "sendAlert()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "NetworkMetrics"
                }
              ],
              "label": "uses"
            }
          ]
        },
        {
          "type": "class",
          "value": "NetworkMonitor",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "AlertSystem"
                }
              ],
              "label": "triggers"
            }
          ]
        },
        {
          "type": "class",
          "value": "NetworkMetrics",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "HistoricalData encapsulates storeData and retrieveData methods and is linked to NetworkMonitor.",
    "PlantUML": "class HistoricalData {\n  +storeData()\n  +retrieveData()\n}\nNetworkMonitor -- HistoricalData : stores",
    "Model": "I110",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "HistoricalData",
          "children": [
            {
              "type": "method",
              "value": "storeData()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "retrieveData()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "NetworkMonitor",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "HistoricalData"
                }
              ],
              "label": "stores"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "User design integrates authenticate and viewReports methods and is associated with Authentication, which includes validateUser method.",
    "PlantUML": "class User { \n+authenticate()\n+viewReports()\n}\nclass Authentication { \n+validateUser()\n}\nUser -- Authentication : uses",
    "Model": "I110",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "method",
              "value": "authenticate()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "viewReports()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Authentication"
                }
              ],
              "label": "uses"
            }
          ]
        },
        {
          "type": "class",
          "value": "Authentication",
          "children": [
            {
              "type": "method",
              "value": "validateUser()",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "NetworkDevice includes attributes deviceID, deviceType, and status. DeviceManager class features methods addDevice, removeDevice, and updateDeviceStatus, and it connects to NetworkDevice.",
    "PlantUML": "class NetworkDevice {\n  +deviceID: int\n  +deviceType: String\n  +status: String\n}\nclass DeviceManager {\n  +addDevice()\n  +removeDevice()\n  +updateDeviceStatus()\n}\nDeviceManager -- NetworkDevice : manages",
    "Model": "I110",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "NetworkDevice",
          "children": [
            {
              "type": "attribute",
              "value": "deviceID",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "deviceType",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "DeviceManager",
          "children": [
            {
              "type": "method",
              "value": "addDevice()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "removeDevice()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "updateDeviceStatus()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "NetworkDevice"
                }
              ],
              "label": "manages"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Report is structured with methods generateReport and displayReport, and it is linked to NetworkMonitor.",
    "PlantUML": "class Report { \n    +generateReport()\n    +displayReport() \n} \nNetworkMonitor -- Report : creates",
    "Model": "I110",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Report",
          "children": [
            {
              "type": "method",
              "value": "generateReport()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "displayReport()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "NetworkMonitor",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Report"
                }
              ],
              "label": "creates"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "ThresholdConfig provides methods setThreshold and updateThreshold, with AlertSystem associated to it.",
    "PlantUML": "class ThresholdConfig {\n  +setThreshold()\n  +updateThreshold()\n}\nAlertSystem -- ThresholdConfig : checks",
    "Model": "I110",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ThresholdConfig",
          "children": [
            {
              "type": "method",
              "value": "setThreshold()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "updateThreshold()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "AlertSystem",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "ThresholdConfig"
                }
              ],
              "label": "checks"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Troubleshooter class contains methods identifyIssue and attemptFix, linked to NetworkMonitor.",
    "PlantUML": "class Troubleshooter {\n  +identifyIssue()\n  +attemptFix()\n}\nNetworkMonitor -- Troubleshooter : triggers",
    "Model": "I110",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Troubleshooter",
          "children": [
            {
              "type": "method",
              "value": "identifyIssue()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "attemptFix()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "NetworkMonitor",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Troubleshooter"
                }
              ],
              "label": "triggers"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "ThirdPartyAPI includes methods fetchData and sendData, connected to NetworkMonitor.",
    "PlantUML": "class ThirdPartyAPI {\n  +fetchData()\n  +sendData()\n}\nNetworkMonitor -- ThirdPartyAPI : integrates ",
    "Model": "I110",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ThirdPartyAPI",
          "children": [
            {
              "type": "method",
              "value": "fetchData()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "sendData()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "NetworkMonitor",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "ThirdPartyAPI"
                }
              ],
              "label": "integrates"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "FirewallSystem features a method authenticateUser and is associated with User, which has username and password attributes.",
    "PlantUML": "class FirewallSystem {\n  +authenticateUser(username: String, password: String): Boolean\n}\n\nclass User {\n  -username: String\n  -password: String\n}\n\nFirewallSystem -- User : authenticates",
    "Model": "I111",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "FirewallSystem",
          "children": [
            {
              "type": "method",
              "value": "authenticateUser(username: String, password: String)",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "authenticates"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "username",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "FirewallSystem class includes method filterPackets and is linked to Packet, which has sourceIP, destinationIP, and protocol attributes.",
    "PlantUML": "class FirewallSystem {\n  +filterPackets(packet: Packet): Boolean\n}\n\nclass Packet {\n  -sourceIP: String\n  -destinationIP: String\n  -protocol: String\n}\n\nFirewallSystem -- Packet : filters",
    "Model": "I111",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "FirewallSystem",
          "children": [
            {
              "type": "method",
              "value": "filterPackets(packet: Packet)",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Packet"
                }
              ],
              "label": "filters"
            }
          ]
        },
        {
          "type": "class",
          "value": "Packet",
          "children": [
            {
              "type": "attribute",
              "value": "sourceIP",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "destinationIP",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "protocol",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "FirewallSystem has methods addRule and removeRule, linked to Rule, which contains ruleID, action, and protocol attributes.",
    "PlantUML": "class FirewallSystem {\n  +addRule(rule: Rule): Boolean\n  +removeRule(ruleID: String): Boolean\n}\n\nclass Rule {\n  -ruleID: String\n  -action: String\n  -protocol: String\n}\n\nFirewallSystem -- Rule : manages",
    "Model": "I111",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "FirewallSystem",
          "children": [
            {
              "type": "method",
              "value": "addRule(rule: Rule)",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "method",
              "value": "removeRule(ruleID: String)",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Rule"
                }
              ],
              "label": "manages"
            }
          ]
        },
        {
          "type": "class",
          "value": "Rule",
          "children": [
            {
              "type": "attribute",
              "value": "ruleID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "action",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "protocol",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "FirewallSystem includes methods logTraffic and monitorTraffic, associated with Log and Packet; Log contains timestamp and packet attributes.",
    "PlantUML": "class FirewallSystem {\n  +logTraffic(packet: Packet): void\n  +monitorTraffic(): void\n}\n\nclass Log {\n  -timestamp: String\n  -packet: Packet\n}\n\nFirewallSystem -- Log : logs\nFirewallSystem -- Packet : monitors",
    "Model": "I111",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "FirewallSystem",
          "children": [
            {
              "type": "method",
              "value": "logTraffic(packet: Packet)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "monitorTraffic()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Log"
                }
              ],
              "label": "logs"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Packet"
                }
              ],
              "label": "monitors"
            }
          ]
        },
        {
          "type": "class",
          "value": "Log",
          "children": [
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "packet",
              "visibility": "-",
              "data_type": "Packet"
            }
          ]
        },
        {
          "type": "class",
          "value": "Packet",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "FirewallSystem features methods detectIntrusion and generateAlert, linked to Alert and Packet; Alert holds alertMessage and severity attributes.",
    "PlantUML": "class FirewallSystem {\n  +detectIntrusion(packet: Packet): Boolean\n  +generateAlert(alertMessage: String): void\n}\n\nclass Alert {\n  -alertMessage: String\n  -severity: String\n}\n\nFirewallSystem -- Alert : generates\nFirewallSystem -- Packet : detects",
    "Model": "I111",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "FirewallSystem",
          "children": [
            {
              "type": "method",
              "value": "detectIntrusion(packet: Packet)",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "method",
              "value": "generateAlert(alertMessage: String)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Alert"
                }
              ],
              "label": "generates"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Packet"
                }
              ],
              "label": "detects"
            }
          ]
        },
        {
          "type": "class",
          "value": "Alert",
          "children": [
            {
              "type": "attribute",
              "value": "alertMessage",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "severity",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Packet",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "FirewallSystem includes method applyACL and is associated with AccessControlList, which contains aclID and rules and is linked to Rule.",
    "PlantUML": "class FirewallSystem {\n  +applyACL(acl: AccessControlList): void\n}\n\nclass AccessControlList {\n  -aclID: String\n  -rules: List<Rule>\n}\n\nFirewallSystem -- AccessControlList : applies\nAccessControlList -- Rule : contains",
    "Model": "I111",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "FirewallSystem",
          "children": [
            {
              "type": "method",
              "value": "applyACL(acl: AccessControlList)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "AccessControlList"
                }
              ],
              "label": "applies"
            }
          ]
        },
        {
          "type": "class",
          "value": "AccessControlList",
          "children": [
            {
              "type": "attribute",
              "value": "aclID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "rules",
              "visibility": "-",
              "data_type": "List<Rule>"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Rule"
                }
              ],
              "label": "contains"
            }
          ]
        },
        {
          "type": "class",
          "value": "Rule",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "FirewallSystem offers a performNAT method and is associated with NAT, which has privateIP and publicIP attributes and is connected to Packet.",
    "PlantUML": "class FirewallSystem {\n  +performNAT(packet: Packet): Packet\n}\n\nclass NAT {\n  -privateIP: String\n  -publicIP: String\n}\n\nclass Packet\n\nFirewallSystem -- NAT : performs\nNAT -- Packet : modifies",
    "Model": "I111",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "FirewallSystem",
          "children": [
            {
              "type": "method",
              "value": "performNAT(packet: Packet)",
              "visibility": "+",
              "data_type": "Packet"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "NAT"
                }
              ],
              "label": "performs"
            }
          ]
        },
        {
          "type": "class",
          "value": "NAT",
          "children": [
            {
              "type": "attribute",
              "value": "privateIP",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "publicIP",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Packet"
                }
              ],
              "label": "modifies"
            }
          ]
        },
        {
          "type": "class",
          "value": "Packet",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "FirewallSystem includes inspectState method and is linked to Connection, which encapsulates connectionID and state attributes.",
    "PlantUML": "class FirewallSystem {\n  +inspectState(connection: Connection): Boolean\n}\n\nclass Connection {\n  -connectionID: String\n  -state: String\n}\n\nFirewallSystem -- Connection : inspects",
    "Model": "I111",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "FirewallSystem",
          "children": [
            {
              "type": "method",
              "value": "inspectState(connection: Connection)",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Connection"
                }
              ],
              "label": "inspects"
            }
          ]
        },
        {
          "type": "class",
          "value": "Connection",
          "children": [
            {
              "type": "attribute",
              "value": "connectionID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "state",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "FirewallSystem establishes VPN connections and is associated with VPN, which has vpnID and protocol attributes and links to User.",
    "PlantUML": "class FirewallSystem {\n  +establishVPNConnection(user: User): Boolean\n}\n\nclass VPN {\n  -vpnID: String\n  -protocol: String\n}\n\nclass User {\n}\n\nFirewallSystem -- VPN : supports\nVPN -- User : \"access\"",
    "Model": "I111",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "FirewallSystem",
          "children": [
            {
              "type": "method",
              "value": "establishVPNConnection(user: User)",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "VPN"
                }
              ],
              "label": "supports"
            }
          ]
        },
        {
          "type": "class",
          "value": "VPN",
          "children": [
            {
              "type": "attribute",
              "value": "vpnID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "protocol",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "\"access\""
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "FirewallSystem has applyZoneRules method, associated with Zone, which contains zoneID and name attributes and links to Rule.",
    "PlantUML": "class FirewallSystem {\n  +applyZoneRules(zone: Zone, rules: List<Rule>): void\n}\n\nclass Zone {\n  -zoneID: String\n  -name: String\n}\n\nFirewallSystem -- Zone : applies\nZone -- Rule : contains",
    "Model": "I111",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "FirewallSystem",
          "children": [
            {
              "type": "method",
              "value": "applyZoneRules(zone: Zone, rules: List<Rule>)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Zone"
                }
              ],
              "label": "applies"
            }
          ]
        },
        {
          "type": "class",
          "value": "Zone",
          "children": [
            {
              "type": "attribute",
              "value": "zoneID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Rule"
                }
              ],
              "label": "contains"
            }
          ]
        },
        {
          "type": "class",
          "value": "Rule",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "GeographicLocation features attributes name, latitude, longitude, and data, and it is connected to Coordinates, which includes latitude and longitude.",
    "PlantUML": "class GeographicLocation {\n  +name : String\n  +latitude : double\n  +longitude : double\n  +data : String\n}\n\nclass Coordinates {\n  +latitude : double\n  +longitude : double\n}\n\nGeographicLocation \"1\" -- \"1\" Coordinates : has",
    "Model": "I112",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "GeographicLocation",
          "children": [
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "latitude",
              "visibility": "+",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "longitude",
              "visibility": "+",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "data",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Coordinates"
                }
              ],
              "label": "has",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Coordinates",
          "children": [
            {
              "type": "attribute",
              "value": "latitude",
              "visibility": "+",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "longitude",
              "visibility": "+",
              "data_type": "double"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "MapLayer contains attributes name, layerType, and data; User has username and password attributes and is linked to MapLayer.",
    "PlantUML": "class MapLayer {\n+name : String\n+layerType : String\n+data : String\n}\n\nclass User {\n+username : String\n+password : String\n}\n\nUser \"1\" -- \"*\" MapLayer : views",
    "Model": "I112",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "MapLayer",
          "children": [
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "layerType",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "data",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "username",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "MapLayer"
                }
              ],
              "label": "views",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "MapLayer is connected to other MapLayer instances.",
    "PlantUML": "MapLayer \"1\" -- \"0..*\" MapLayer : overlays\n",
    "Model": "I112",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "MapLayer",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "MapLayer"
                }
              ],
              "label": "overlays",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "GeographicFeature holds attributes featureName and featureType, linked to GeographicLocation.",
    "PlantUML": "class GeographicFeature {\n  +featureName : String\n  +featureType : String\n}\n\nGeographicLocation \"1\" -- \"0..*\" GeographicFeature : contains\n",
    "Model": "I112",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "GeographicFeature",
          "children": [
            {
              "type": "attribute",
              "value": "featureName",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "featureType",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "GeographicLocation",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "GeographicFeature"
                }
              ],
              "label": "contains",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "SearchQuery contains queryText and featureType attributes and links to GeographicFeature.",
    "PlantUML": "class SearchQuery {\n  +queryText : String\n  +featureType : String\n}\n\nSearchQuery \"1\" -- \"0..*\" GeographicFeature : searches\n",
    "Model": "I112",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "SearchQuery",
          "children": [
            {
              "type": "attribute",
              "value": "queryText",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "featureType",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "GeographicFeature"
                }
              ],
              "label": "searches",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "GeographicFeature",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Annotation has text and description attributes and is linked to MapLayer.",
    "PlantUML": "class Annotation {\n    +text : String\n    +description : String\n}\n\nMapLayer \"1\" -- \"0..*\" Annotation : contains\n",
    "Model": "I112",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Annotation",
          "children": [
            {
              "type": "attribute",
              "value": "text",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "MapLayer",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Annotation"
                }
              ],
              "label": "contains",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "SpatialAnalysis includes methods calculateDistance and calculateArea, linked to GeographicFeature.",
    "PlantUML": "class SpatialAnalysis {\n  +calculateDistance(): double\n  +calculateArea(feature: Feature): double\n}\n\nGeographicFeature \"1\" -- \"1\" SpatialAnalysis : analyzes\n",
    "Model": "I112",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "SpatialAnalysis",
          "children": [
            {
              "type": "method",
              "value": "calculateDistance()",
              "visibility": "+",
              "data_type": "double"
            },
            {
              "type": "method",
              "value": "calculateArea(feature: Feature)",
              "visibility": "+",
              "data_type": "double"
            }
          ]
        },
        {
          "type": "class",
          "value": "GeographicFeature",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "SpatialAnalysis"
                }
              ],
              "label": "analyzes",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Metadata holds attributes creationDate, author, and dataSource, linked to MapLayer.",
    "PlantUML": "class Metadata {\n    +creationDate: Date\n    +author: String\n    +dataSource: String\n}\n\nMapLayer \"1\" -- \"1\" Metadata : has\n",
    "Model": "I112",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Metadata",
          "children": [
            {
              "type": "attribute",
              "value": "creationDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "author",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "dataSource",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "MapLayer",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Metadata"
                }
              ],
              "label": "has",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "FileExport features method exportLayer and format attribute, linked to MapLayer.",
    "PlantUML": "class FileExport {\n  +format : String\n  +exportLayer(layer: Layer) : void\n}\n\nMapLayer \"1\" -- \"0..*\" FileExport : \"exports\"\n",
    "Model": "I112",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "FileExport",
          "children": [
            {
              "type": "attribute",
              "value": "format",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "exportLayer(layer: Layer)",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "MapLayer",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "FileExport"
                }
              ],
              "label": "\"exports\"",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Role class contains roleName and permissions attributes; User is linked to Role, as is MapLayer.",
    "PlantUML": "class Role {\n  +roleName : String\n  +permissions : List<String>\n}\n\nUser \"1\" -- \"0..*\" Role : has\nMapLayer \"1\" -- \"0..*\" Role : \"accessible by\"\n",
    "Model": "I112",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Role",
          "children": [
            {
              "type": "attribute",
              "value": "roleName",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "permissions",
              "visibility": "+",
              "data_type": "List<String>"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Role"
                }
              ],
              "label": "has",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "MapLayer",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Role"
                }
              ],
              "label": "\"accessible by\"",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "DataInput includes methods importData and validateData, linked to CSVImporter and associated with ExcelImporter; CSVImporter has readCSV method, and ExcelImporter features readExcel method.",
    "PlantUML": "class DataInput {\n  +importData(): void\n  +validateData(): boolean\n}\n\nclass CSVImporter {\n  +readCSV(): void\n}\n\nclass ExcelImporter {\n  +readExcel(): void\n}\n\nDataInput \"1\" -- \"1..*\" CSVImporter : uses\nDataInput \"1\" -- \"1..*\" ExcelImporter : uses\n",
    "Model": "I113",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "DataInput",
          "children": [
            {
              "type": "method",
              "value": "importData()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "validateData()",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "CSVImporter"
                }
              ],
              "label": "uses",
              "multiplicity1": "1",
              "multiplicity2": "1..*"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "ExcelImporter"
                }
              ],
              "label": "uses",
              "multiplicity1": "1",
              "multiplicity2": "1..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "CSVImporter",
          "children": [
            {
              "type": "method",
              "value": "readCSV()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "ExcelImporter",
          "children": [
            {
              "type": "method",
              "value": "readExcel()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "DescriptiveStatistics includes methods calculateMean, calculateMedian, and calculateMode, and is linked to DataInput.",
    "PlantUML": "class DescriptiveStatistics {\n  +calculateMean(): double\n  +calculateMedian(): double\n  +calculateMode(): List<double>\n}\n\nDataInput \"1\" -- \"1\" DescriptiveStatistics : processes\n",
    "Model": "I113",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "DescriptiveStatistics",
          "children": [
            {
              "type": "method",
              "value": "calculateMean()",
              "visibility": "+",
              "data_type": "double"
            },
            {
              "type": "method",
              "value": "calculateMedian()",
              "visibility": "+",
              "data_type": "double"
            },
            {
              "type": "method",
              "value": "calculateMode()",
              "visibility": "+",
              "data_type": "List<double>"
            }
          ]
        },
        {
          "type": "class",
          "value": "DataInput",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "DescriptiveStatistics"
                }
              ],
              "label": "processes",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "RegressionAnalysis contains methods performLinearRegression and getRegressionResults, associated with DataInput.",
    "PlantUML": "class RegressionAnalysis {\n  +performLinearRegression(): double\n  +getRegressionResults(): List<double>\n}\n\nDataInput \"1\" -- \"1\" RegressionAnalysis : processes\n",
    "Model": "I113",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "RegressionAnalysis",
          "children": [
            {
              "type": "method",
              "value": "performLinearRegression()",
              "visibility": "+",
              "data_type": "double"
            },
            {
              "type": "method",
              "value": "getRegressionResults()",
              "visibility": "+",
              "data_type": "List<double>"
            }
          ]
        },
        {
          "type": "class",
          "value": "DataInput",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "RegressionAnalysis"
                }
              ],
              "label": "processes",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Visualization class includes methods createHistogram, createScatterPlot, and createBoxPlot, linked to DataInput.",
    "PlantUML": "class Visualization {\n    +createHistogram(): void\n    +createScatterPlot(): void\n    +createBoxPlot(): void\n}\n\nDataInput \"1\" -- \"1\" Visualization : visualizes\n",
    "Model": "I113",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Visualization",
          "children": [
            {
              "type": "method",
              "value": "createHistogram()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "createScatterPlot()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "createBoxPlot()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "DataInput",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Visualization"
                }
              ],
              "label": "visualizes",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "DataOutput has methods exportToCSV and exportToPDF, linked to DescriptiveStatistics and RegressionAnalysis.",
    "PlantUML": "class DataOutput {\n    +exportToCSV(): void\n    +exportToPDF(): void\n}\n\nDescriptiveStatistics \"1\" -- \"1\" DataOutput : outputs\nRegressionAnalysis \"1\" -- \"1\" DataOutput : outputs\n",
    "Model": "I113",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "DataOutput",
          "children": [
            {
              "type": "method",
              "value": "exportToCSV()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "exportToPDF()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "DescriptiveStatistics",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "DataOutput"
                }
              ],
              "label": "outputs",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "RegressionAnalysis",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "DataOutput"
                }
              ],
              "label": "outputs",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "User class encapsulates methods login and logout, associated with DataInput and linked to DataOutput.",
    "PlantUML": "class User {\n  +login(): boolean\n  +logout(): void\n}\nUser \"1\" -- \"1..*\" DataInput : manages\nUser \"1\" -- \"1..*\" DataOutput : manages\n",
    "Model": "I113",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "method",
              "value": "login()",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "method",
              "value": "logout()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "DataInput"
                }
              ],
              "label": "manages",
              "multiplicity1": "1",
              "multiplicity2": "1..*"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "DataOutput"
                }
              ],
              "label": "manages",
              "multiplicity1": "1",
              "multiplicity2": "1..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "DataInput",
          "children": []
        },
        {
          "type": "class",
          "value": "DataOutput",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Session design includes methods startSession and endSession, with User linked to Session.",
    "PlantUML": "class Session {\n  +startSession(): void\n  +endSession(): void\n}\n\nUser \"1\" -- \"1\" Session : tracks\n",
    "Model": "I113",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Session",
          "children": [
            {
              "type": "method",
              "value": "startSession()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "endSession()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Session"
                }
              ],
              "label": "tracks",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "ErrorLogger contains method logError, associated with DescriptiveStatistics and RegressionAnalysis.",
    "PlantUML": "class ErrorLogger {\n  +logError(message: String): void\n}\n\nDescriptiveStatistics \"1\" -- \"1\" ErrorLogger : logs\nRegressionAnalysis \"1\" -- \"1\" ErrorLogger : logs\n",
    "Model": "I113",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ErrorLogger",
          "children": [
            {
              "type": "method",
              "value": "logError(message: String)",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "DescriptiveStatistics",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "ErrorLogger"
                }
              ],
              "label": "logs",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "RegressionAnalysis",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "ErrorLogger"
                }
              ],
              "label": "logs",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "DataEncryption is defined by methods encryptData and decryptData, linked to DataInput.",
    "PlantUML": "class DataEncryption {\n  +encryptData(): void\n  +decryptData(): void\n}\n\nDataInput \"1\" -- \"1\" DataEncryption : secures\n",
    "Model": "I113",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "DataEncryption",
          "children": [
            {
              "type": "method",
              "value": "encryptData()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "decryptData()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "DataInput",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "DataEncryption"
                }
              ],
              "label": "secures",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "LanguageSupport features method setLanguage, associated with User.",
    "PlantUML": "class LanguageSupport {\n  +setLanguage(language: String): void\n}\n\nUser \"1\" -- \"1\" LanguageSupport : configures\n",
    "Model": "I113",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "LanguageSupport",
          "children": [
            {
              "type": "method",
              "value": "setLanguage(language: String)",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "LanguageSupport"
                }
              ],
              "label": "configures",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "User is defined by attributes userID, username, password, and methods register and login; User is linked to Account, which includes methods createAccount, deleteAccount, and attributes accountID and user.",
    "PlantUML": "class User {\n  -userID: String\n  -username: String\n  -password: String\n  +register(): void\n  +login(): void\n}\n\nclass Account {\n  -accountID: String\n  -user: User\n  +createAccount(): void\n  +deleteAccount(): void\n}\n\nUser \"1\" -- \"1\" Account : manages\n",
    "Model": "I114",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "username",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "register()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "login()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Account"
                }
              ],
              "label": "manages",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Account",
          "children": [
            {
              "type": "attribute",
              "value": "accountID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "user",
              "visibility": "-",
              "data_type": "User"
            },
            {
              "type": "method",
              "value": "createAccount()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "deleteAccount()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Image features methods uploadImage and deleteImage, with attributes imageID and imagePath; Image is associated with Storage, which has storageID attribute, image data, and methods storeImage and retrieveImage.",
    "PlantUML": "class Image {\n  -imageID: String\n  -imagePath: String\n  +uploadImage(): void\n  +deleteImage(): void\n}\n\nclass Storage {\n  -storageID: String\n  -image: Image\n  +storeImage(): void\n  +retrieveImage(): void\n}\n\nImage \"1\" -- \"1\" Storage : stored in\n",
    "Model": "I114",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Image",
          "children": [
            {
              "type": "attribute",
              "value": "imageID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "imagePath",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "uploadImage()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "deleteImage()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Storage"
                }
              ],
              "label": "stored in",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Storage",
          "children": [
            {
              "type": "attribute",
              "value": "storageID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "image",
              "visibility": "-",
              "data_type": "Image"
            },
            {
              "type": "method",
              "value": "storeImage()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "retrieveImage()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "ImageEditor includes methods cropImage, rotateImage, resizeImage, adjustBrightness, and adjustContrast, linked to Image; Image has imageID and imagePath attributes.",
    "PlantUML": "class ImageEditor {\n  +cropImage(): void\n  +rotateImage(): void\n  +resizeImage(): void\n  +adjustBrightness(): void\n  +adjustContrast(): void\n}\n\nclass Image {\n  -imageID: String\n  -imagePath: String\n}\n\nImageEditor \"1\" -- \"1\" Image : edits\n",
    "Model": "I114",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ImageEditor",
          "children": [
            {
              "type": "method",
              "value": "cropImage()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "rotateImage()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "resizeImage()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "adjustBrightness()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "adjustContrast()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Image"
                }
              ],
              "label": "edits",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Image",
          "children": [
            {
              "type": "attribute",
              "value": "imageID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "imagePath",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "History holds actionID attribute and methods undo and redo, linked to ImageEditor, which also has a history attribute.",
    "PlantUML": "class History {\n  -actionID: String\n  +undo(): void\n  +redo(): void\n}\n\nclass ImageEditor {\n  -history: History\n}\n\nHistory \"1\" -- \"1\" ImageEditor : tracks\n",
    "Model": "I114",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "History",
          "children": [
            {
              "type": "attribute",
              "value": "actionID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "undo()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "redo()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "ImageEditor"
                }
              ],
              "label": "tracks",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "ImageEditor",
          "children": [
            {
              "type": "attribute",
              "value": "history",
              "visibility": "-",
              "data_type": "History"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Filter has method applyFilter and filterID attribute; Effect class features method applyEffect and effectID attribute; ImageEditor includes filter and effect attributes, linked to both Filter and Effect.",
    "PlantUML": "class Filter {\n  - filterID: String\n  + applyFilter(): void\n}\n\nclass Effect {\n  - effectID: String\n  + applyEffect(): void\n}\n\nclass ImageEditor {\n  - filter: Filter\n  - effect: Effect\n}\n\nImageEditor \"1\" -- \"1\" Filter : applies\nImageEditor \"1\" -- \"1\" Effect : applies\n",
    "Model": "I114",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Filter",
          "children": [
            {
              "type": "attribute",
              "value": "filterID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "applyFilter()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Effect",
          "children": [
            {
              "type": "attribute",
              "value": "effectID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "applyEffect()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "ImageEditor",
          "children": [
            {
              "type": "attribute",
              "value": "filter",
              "visibility": "-",
              "data_type": "Filter"
            },
            {
              "type": "attribute",
              "value": "effect",
              "visibility": "-",
              "data_type": "Effect"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Filter"
                }
              ],
              "label": "applies",
              "multiplicity1": "1",
              "multiplicity2": "1"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Effect"
                }
              ],
              "label": "applies",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Export features method exportImage and format attribute; Image has imageID and imagePath attributes and is linked to Export.",
    "PlantUML": "class Export {\n  - format: String\n  + exportImage(): void\n}\n\nclass Image {\n  - imageID: String\n  - imagePath: String\n}\n\nImage \"1\" -- \"1\" Export : \"saved as\"\n",
    "Model": "I114",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Export",
          "children": [
            {
              "type": "attribute",
              "value": "format",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "exportImage()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Image",
          "children": [
            {
              "type": "attribute",
              "value": "imageID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "imagePath",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Export"
                }
              ],
              "label": "\"saved as\"",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Layer class contains attributes layerID and layerContent; ImageEditor defines methods addLayer and removeLayer, includes layers attribute, and is associated with Layer.",
    "PlantUML": "class Layer {\n  -layerID: String\n  -layerContent: String\n}\n\nclass ImageEditor {\n  -layers: List<Layer>\n  +addLayer(): void\n  +removeLayer(): void\n}\n\nImageEditor \"1\" -- \"*\" Layer : contains\n",
    "Model": "I114",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Layer",
          "children": [
            {
              "type": "attribute",
              "value": "layerID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "layerContent",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "ImageEditor",
          "children": [
            {
              "type": "attribute",
              "value": "layers",
              "visibility": "-",
              "data_type": "List<Layer>"
            },
            {
              "type": "method",
              "value": "addLayer()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "removeLayer()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Layer"
                }
              ],
              "label": "contains",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Comparison class has method compareImages, linked to Image; Image contains originalImage and editedImage attributes.",
    "PlantUML": "class Comparison {\n  +compareImages(): void\n}\n\nclass Image {\n  -originalImage: Image\n  -editedImage: Image\n}\n\nComparison \"1\" -- \"*\" Image : compares\n",
    "Model": "I114",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Comparison",
          "children": [
            {
              "type": "method",
              "value": "compareImages()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Image"
                }
              ],
              "label": "compares",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Image",
          "children": [
            {
              "type": "attribute",
              "value": "originalImage",
              "visibility": "-",
              "data_type": "Image"
            },
            {
              "type": "attribute",
              "value": "editedImage",
              "visibility": "-",
              "data_type": "Image"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "UserSettings includes method setPreferences and attributes settingID and preferences; User holds settings attribute and is linked to UserSettings.",
    "PlantUML": "class UserSettings {\n  - settingID: String\n  - preferences: String\n  + setPreferences(): void\n}\n\nclass User {\n  - settings: UserSettings\n}\n\nUser \"1\" -- \"1\" UserSettings : manages\n",
    "Model": "I114",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "UserSettings",
          "children": [
            {
              "type": "attribute",
              "value": "settingID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "preferences",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "setPreferences()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "settings",
              "visibility": "-",
              "data_type": "UserSettings"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "UserSettings"
                }
              ],
              "label": "manages",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Metadata includes attributes resolution, colorDepth, and size; Image has imageID, imagePath, and metadata attributes, associated with Metadata.",
    "PlantUML": "class Metadata {\n  - resolution: String\n  - colorDepth: String\n  - size: String\n}\n\nclass Image {\n  - imageID: String\n  - imagePath: String\n  - metadata: Metadata\n}\n\nImage \"1\" -- \"1\" Metadata : contains\n",
    "Model": "I114",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Metadata",
          "children": [
            {
              "type": "attribute",
              "value": "resolution",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "colorDepth",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "size",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Image",
          "children": [
            {
              "type": "attribute",
              "value": "imageID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "imagePath",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "metadata",
              "visibility": "-",
              "data_type": "Metadata"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Metadata"
                }
              ],
              "label": "contains",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "User comprises id, username, password, and email attributes, depending on Credentials; Credentials class contains username and password attributes.",
    "PlantUML": "class User {\n  +id: int\n  +username: String\n  +password: String\n  +email: String\n}\n\nclass Credentials {\n  +username: String\n  +password: String\n}\n\nUser \"1\" --> \"1\" Credentials : has\n",
    "Model": "I115",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "username",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Credentials"
                }
              ],
              "label": "has",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Credentials",
          "children": [
            {
              "type": "attribute",
              "value": "username",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Video design integrates attributes id, title, filePath, and format; User has id and username attributes and requires Video.",
    "PlantUML": "class Video {\n  +id: int\n  +title: String\n  +filePath: String\n  +format: String\n}\n\nclass User {\n  +id: int\n  +username: String\n}\n\nUser \"1\" --> \"0..*\" Video : uploads\n",
    "Model": "I115",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Video",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "filePath",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "format",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "username",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Video"
                }
              ],
              "label": "uploads",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Video includes id, title, and filePath attributes; Editor encapsulates methods edit and applyEffect and depends on Video.",
    "PlantUML": "class Video {\n  +id: int\n  +title: String\n  +filePath: String\n}\n\nclass Editor {\n  +edit(video: Video): void\n  +applyEffect(video: Video, effect: String): void\n}\n\nEditor \"1\" --> \"1..*\" Video : edits\n",
    "Model": "I115",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Video",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "filePath",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Editor",
          "children": [
            {
              "type": "method",
              "value": "edit(video: Video)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "applyEffect(video: Video, effect: String)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Video"
                }
              ],
              "label": "edits",
              "multiplicity1": "1",
              "multiplicity2": "1..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "AudioTrack contains id, filePath, and duration attributes; Video depends on AudioTrack.",
    "PlantUML": "class AudioTrack {\n  +id: int\n  +filePath: String\n  +duration: double\n}\n\nVideo \"1\" --> \"0..*\" AudioTrack : includes\n",
    "Model": "I115",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AudioTrack",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "filePath",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "duration",
              "visibility": "+",
              "data_type": "double"
            }
          ]
        },
        {
          "type": "class",
          "value": "Video",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "AudioTrack"
                }
              ],
              "label": "includes",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Transition design integrates id and type attributes; VideoClip has id, startTime, and endTime attributes and requires Transition.",
    "PlantUML": "class Transition {\n  +id: int\n  +type: String\n}\n\nclass VideoClip {\n  +id: int\n  +startTime: double\n  +endTime: double\n}\n\nVideoClip \"1\" --> \"0..*\" Transition : applies\n",
    "Model": "I115",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Transition",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "type",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "VideoClip",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "startTime",
              "visibility": "+",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "endTime",
              "visibility": "+",
              "data_type": "double"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Transition"
                }
              ],
              "label": "applies",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Effect includes id, name, and description attributes; Video design incorporates id and filePath attributes and depends on Effect.",
    "PlantUML": "class Effect {\n  +id: int\n  +name: String\n  +description: String\n}\n\nclass Video {\n  +id: int\n  +filePath: String\n}\n\nVideo \"1\" --> \"0..*\" Effect : applies\n",
    "Model": "I115",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Effect",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Video",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "filePath",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Effect"
                }
              ],
              "label": "applies",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Timeline features id and totalDuration attributes; Timeline depends on VideoClip; VideoClip contains id, startTime, and endTime attributes.",
    "PlantUML": "class Timeline {\n  +id: int\n  +totalDuration: double\n}\n\nclass VideoClip {\n  +id: int\n  +startTime: double\n  +endTime: double\n}\n\nTimeline \"1\" --> \"0..*\" VideoClip : contains\n",
    "Model": "I115",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Timeline",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "totalDuration",
              "visibility": "+",
              "data_type": "double"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "VideoClip"
                }
              ],
              "label": "contains",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "VideoClip",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "startTime",
              "visibility": "+",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "endTime",
              "visibility": "+",
              "data_type": "double"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Export features format and resolution attributes and export method; Video depends on Export.",
    "PlantUML": "class Export {\n    + format: String\n    + resolution: String\n    + export(video: Video): void\n}\n\nVideo \"1\" --> \"1\" Export : exports\n",
    "Model": "I115",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Export",
          "children": [
            {
              "type": "attribute",
              "value": "format",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "resolution",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "export(video: Video)",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Video",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Export"
                }
              ],
              "label": "exports",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Preview contains id and play attributes; Video depends on Preview.",
    "PlantUML": "class Preview {\n  +id: int\n  +play(video: Video): void\n}\n\nVideo \"1\" --> \"1\" Preview : isPreviewedBy\n",
    "Model": "I115",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Preview",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "method",
              "value": "play(video: Video)",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Video",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Preview"
                }
              ],
              "label": "isPreviewedBy",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Role is defined by roleName and permissions attributes; User class contains id and username attributes and requires Role.",
    "PlantUML": "class Role {\n  +roleName: String\n  +permissions: String\n}\nclass User {\n  +id: int\n  +username: String\n}\nUser \"1\" --> \"1\" Role : assignedTo\n",
    "Model": "I115",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Role",
          "children": [
            {
              "type": "attribute",
              "value": "roleName",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "permissions",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "username",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Role"
                }
              ],
              "label": "assignedTo",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "User defines methods createProfile, deleteProfile, and updateProfile; User is associated with Profile, which includes username, email, and password attributes.",
    "PlantUML": "class User {\n  +createProfile()\n  +deleteProfile()\n  +updateProfile()\n}\nclass Profile {\n  +username: String\n  +email: String\n  +password: String\n}\nUser -- Profile : has",
    "Model": "I116",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "method",
              "value": "createProfile()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "deleteProfile()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "updateProfile()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Profile"
                }
              ],
              "label": "has"
            }
          ]
        },
        {
          "type": "class",
          "value": "Profile",
          "children": [
            {
              "type": "attribute",
              "value": "username",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "AudioFile design integrates methods importFile and exportFile; AudioFile is linked to Format, which includes name and extension attributes.",
    "PlantUML": "class AudioFile {\n  +importFile(format: String)\n  +exportFile(format: String)\n}\nclass Format {\n  +name: String\n  +extension: String\n}\nAudioFile -- Format : supports",
    "Model": "I116",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AudioFile",
          "children": [
            {
              "type": "method",
              "value": "importFile(format: String)",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "exportFile(format: String)",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Format"
                }
              ],
              "label": "supports"
            }
          ]
        },
        {
          "type": "class",
          "value": "Format",
          "children": [
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "extension",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Track class defines methods addTrack, removeTrack, and editTrack; Track is associated with AudioEditor, which includes adjustVolume and applyEffects.",
    "PlantUML": "class Track {\n  +addTrack()\n  +removeTrack()\n  +editTrack()\n}\nclass AudioEditor {\n  +adjustVolume()\n  +applyEffects()\n}\nTrack -- AudioEditor : editedBy",
    "Model": "I116",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Track",
          "children": [
            {
              "type": "method",
              "value": "addTrack()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "removeTrack()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "editTrack()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "AudioEditor"
                }
              ],
              "label": "editedBy"
            }
          ]
        },
        {
          "type": "class",
          "value": "AudioEditor",
          "children": [
            {
              "type": "method",
              "value": "adjustVolume()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "applyEffects()",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Effect class defines methods applyVolumeChange, applyPitchAdjustment, and applyReverb; AudioTrack structure contains method applyEffect and is linked to Effect.",
    "PlantUML": "class Effect {\n  +applyVolumeChange(level: Int)\n  +applyPitchAdjustment(level: Int)\n  +applyReverb()\n}\nclass AudioTrack {\n  +applyEffect(effect: Effect)\n}\nAudioTrack -- Effect : has",
    "Model": "I116",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Effect",
          "children": [
            {
              "type": "method",
              "value": "applyVolumeChange(level: Int)",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "applyPitchAdjustment(level: Int)",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "applyReverb()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "AudioTrack",
          "children": [
            {
              "type": "method",
              "value": "applyEffect(effect: Effect)",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Effect"
                }
              ],
              "label": "has"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "AudioMixer encapsulates mixTracks method and is linked to Track.",
    "PlantUML": "class AudioMixer {\n  +mixTracks(tracks: List<Track>)\n}\nAudioMixer -- Track : mixes",
    "Model": "I116",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AudioMixer",
          "children": [
            {
              "type": "method",
              "value": "mixTracks(tracks: List<Track>)",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Track"
                }
              ],
              "label": "mixes"
            }
          ]
        },
        {
          "type": "class",
          "value": "Track",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "UndoRedo design includes methods undo and redo; UndoRedo is associated with Action, which contains method performAction.",
    "PlantUML": "class UndoRedo {\n  +undo()\n  +redo()\n}\nclass Action {\n  +performAction()\n}\nUndoRedo -- Action : tracks",
    "Model": "I116",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "UndoRedo",
          "children": [
            {
              "type": "method",
              "value": "undo()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "redo()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Action"
                }
              ],
              "label": "tracks"
            }
          ]
        },
        {
          "type": "class",
          "value": "Action",
          "children": [
            {
              "type": "method",
              "value": "performAction()",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "AudioPlayer includes methods play, pause, stop, and setSpeed; AudioPlayer is linked to Track, which has a duration attribute.",
    "PlantUML": "class AudioPlayer {\n  +play()\n  +pause()\n  +stop()\n  +setSpeed(speed: Float)\n}\nclass Track {\n  +duration: Double\n}\nAudioPlayer \"1\"-- \"*\" Track : plays",
    "Model": "I116",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AudioPlayer",
          "children": [
            {
              "type": "method",
              "value": "play()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "pause()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "stop()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "setSpeed(speed: Float)",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Track"
                }
              ],
              "label": "plays",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Track",
          "children": [
            {
              "type": "attribute",
              "value": "duration",
              "visibility": "+",
              "data_type": "double"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Waveform design includes method generateWaveform; Track design includes method displayWaveform; Track is linked to Waveform.",
    "PlantUML": "class Waveform {\n  +generateWaveform()\n}\nclass Track {\n  +displayWaveform()\n}\nTrack \"1\" -- \"*\" Waveform : has",
    "Model": "I116",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Waveform",
          "children": [
            {
              "type": "method",
              "value": "generateWaveform()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Track",
          "children": [
            {
              "type": "method",
              "value": "displayWaveform()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Waveform"
                }
              ],
              "label": "has",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Project contains methods saveProject and loadProject, linked to AudioFile; AudioFile class includes method addFileToProject.",
    "PlantUML": "class Project {\n  +saveProject()\n  +loadProject()\n}\n\nclass AudioFile {\n  +addFileToProject()\n}\n\nProject \"1\" -- \"*\" AudioFile : contains",
    "Model": "I116",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Project",
          "children": [
            {
              "type": "method",
              "value": "saveProject()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "loadProject()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "AudioFile"
                }
              ],
              "label": "contains",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "AudioFile",
          "children": [
            {
              "type": "method",
              "value": "addFileToProject()",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Exporter class has method exportAsMP3 and is associated with AudioTrack; AudioTrack class includes method export.",
    "PlantUML": "class Exporter {\n  +exportAsMP3()\n}\nclass AudioTrack {\n  +export()\n}\nExporter -- AudioTrack : exports",
    "Model": "I116",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Exporter",
          "children": [
            {
              "type": "method",
              "value": "exportAsMP3()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "AudioTrack"
                }
              ],
              "label": "exports"
            }
          ]
        },
        {
          "type": "class",
          "value": "AudioTrack",
          "children": [
            {
              "type": "method",
              "value": "export()",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "User design integrates methods createObject, editObject, and deleteObject; User requires Object3D, which encapsulates name and properties attributes.",
    "PlantUML": "class User {\n  +createObject()\n  +editObject()\n  +deleteObject()\n}\nclass Object3D {\n  +name: String\n  +properties: Map\n}\nUser --> Object3D : manages\n",
    "Model": "I117",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "method",
              "value": "createObject()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "editObject()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "deleteObject()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Object3D"
                }
              ],
              "label": "manages"
            }
          ]
        },
        {
          "type": "class",
          "value": "Object3D",
          "children": [
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "properties",
              "visibility": "+",
              "data_type": "Map"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Object3D is a subclass of Cube, Sphere, and Cylinder.",
    "PlantUML": "class Cube{}\nclass Sphere{}\nclass Cylinder{}\nObject3D <|-- Cube\nObject3D <|-- Sphere\nObject3D <|-- Cylinder",
    "Model": "I117",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Cube",
          "children": []
        },
        {
          "type": "class",
          "value": "Sphere",
          "children": []
        },
        {
          "type": "class",
          "value": "Cylinder",
          "children": []
        },
        {
          "type": "class",
          "value": "Object3D",
          "children": [
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Cube"
                }
              ]
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Sphere"
                }
              ]
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Cylinder"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Collection features name attribute, objects collection, and methods addObject and removeObject; Collection is aggregated within Object3D.",
    "PlantUML": "class Collection {\n  +name: String\n  +objects: List<Object3D>\n  +addObject(Object3D)\n  +removeObject(Object3D)\n}\nCollection o-- Object3D : contains",
    "Model": "I117",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Collection",
          "children": [
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "objects",
              "visibility": "+",
              "data_type": "List<Object3D>"
            },
            {
              "type": "method",
              "value": "addObject(Object3D)",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "removeObject(Object3D)",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "Object3D"
                }
              ],
              "label": "contains"
            }
          ]
        },
        {
          "type": "class",
          "value": "Object3D",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "TransformTool includes methods translate, rotate, and scale.",
    "PlantUML": "class TransformTool {\n  +translate(x: Float, y: Float, z: Float)\n  +rotate(axis: String, angle: Float)\n  +scale(factor: Float)\n}\nObject3D <.. TransformTool : uses",
    "Model": "I117",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "TransformTool",
          "children": [
            {
              "type": "method",
              "value": "translate(x: Float, y: Float, z: Float)",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "rotate(axis: String, angle: Float)",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "scale(factor: Float)",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Material features name, color, and texture attributes; Object3D requires Material.",
    "PlantUML": "class Material {\n  +name: String\n  +color: String\n  +texture: String\n}\nObject3D --> Material : applies\n",
    "Model": "I117",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Material",
          "children": [
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "color",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "texture",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Object3D",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Material"
                }
              ],
              "label": "applies"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "SceneGraph class contains methods addChild and removeChild and includes Object3D as a component.",
    "PlantUML": "class SceneGraph {\n  +addChild(Object3D)\n  +removeChild(Object3D)\n}\nSceneGraph *-- Object3D : nodes",
    "Model": "I117",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "SceneGraph",
          "children": [
            {
              "type": "method",
              "value": "addChild(Object3D)",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "removeChild(Object3D)",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Object3D"
                }
              ],
              "label": "nodes"
            }
          ]
        },
        {
          "type": "class",
          "value": "Object3D",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Action includes methods execute, undo, and redo; UndoRedoManager design incorporates undo, redo, and actions and depends on Action; User depends on UndoRedoManager.",
    "PlantUML": "class Action {\n  +execute()\n  +undo()\n  +redo()\n}\nclass UndoRedoManager {\n  +actions: List<Action>\n  +undo()\n  +redo()\n}\nUser --> UndoRedoManager : interacts\nUndoRedoManager --> Action : manages",
    "Model": "I117",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Action",
          "children": [
            {
              "type": "method",
              "value": "execute()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "undo()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "redo()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "UndoRedoManager",
          "children": [
            {
              "type": "attribute",
              "value": "actions",
              "visibility": "+",
              "data_type": "List<Action>"
            },
            {
              "type": "method",
              "value": "undo()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "redo()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Action"
                }
              ],
              "label": "manages"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "UndoRedoManager"
                }
              ],
              "label": "interacts"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Exporter structure includes export method; SceneGraph depends on Exporter.",
    "PlantUML": "class Exporter {\n  +export(scene: SceneGraph, format: String)\n}\nclass SceneGraph {\n}\nSceneGraph --> Exporter : exports",
    "Model": "I117",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Exporter",
          "children": [
            {
              "type": "method",
              "value": "export(scene: SceneGraph, format: String)",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "SceneGraph",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Exporter"
                }
              ],
              "label": "exports"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Camera encapsulates move and rotate methods and position attribute; SceneGraph depends on Camera.",
    "PlantUML": "class Camera {\n  +position: Point\n  +move(x: Float, y: Float, z: Float)\n  +rotate(axis: String, angle: Float)\n}\nSceneGraph --> Camera : controls",
    "Model": "I117",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Camera",
          "children": [
            {
              "type": "attribute",
              "value": "position",
              "visibility": "+",
              "data_type": "Point"
            },
            {
              "type": "method",
              "value": "move(x: Float, y: Float, z: Float)",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "rotate(axis: String, angle: Float)",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "SceneGraph",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Camera"
                }
              ],
              "label": "controls"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Light includes attributes type, intensity, and position; SceneGraph is aggregated within Light.",
    "PlantUML": "class Light {\n  +type: String\n  +intensity: Float\n  +position: Point\n}\nSceneGraph o-- Light : contains",
    "Model": "I117",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Light",
          "children": [
            {
              "type": "attribute",
              "value": "type",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "intensity",
              "visibility": "+",
              "data_type": "float"
            },
            {
              "type": "attribute",
              "value": "position",
              "visibility": "+",
              "data_type": "Point"
            }
          ]
        },
        {
          "type": "class",
          "value": "SceneGraph",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "Light"
                }
              ],
              "label": "contains"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "OCRSystem class contains method uploadImage; OCRSystem depends on Image, which has fileType and fileSize attributes.",
    "PlantUML": "class OCRSystem {\n  +uploadImage(file: Image)\n}\nclass Image {\n  -fileType: String\n  -fileSize: Number\n}\nOCRSystem --> Image : uploads",
    "Model": "I118",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "OCRSystem",
          "children": [
            {
              "type": "method",
              "value": "uploadImage(file: Image)",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Image"
                }
              ],
              "label": "uploads"
            }
          ]
        },
        {
          "type": "class",
          "value": "Image",
          "children": [
            {
              "type": "attribute",
              "value": "fileType",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "fileSize",
              "visibility": "-",
              "data_type": "Number"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "OCRSystem features method extractText and depends on Text and Image; Text is defined by content and language attributes.",
    "PlantUML": "class OCRSystem {\n  +extractText(image: Image): Text\n}\nclass Text {\n  -content: String\n  -language: String\n}\nOCRSystem --> Text : outputs\nOCRSystem --> Image : processes",
    "Model": "I118",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "OCRSystem",
          "children": [
            {
              "type": "method",
              "value": "extractText(image: Image)",
              "visibility": "+",
              "data_type": "Text"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Text"
                }
              ],
              "label": "outputs"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Image"
                }
              ],
              "label": "processes"
            }
          ]
        },
        {
          "type": "class",
          "value": "Text",
          "children": [
            {
              "type": "attribute",
              "value": "content",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "language",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Image",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Language includes name and code attributes; OCRSystem depends on Language.",
    "PlantUML": "class Language {\n  - name: String\n  - code: String\n}\nOCRSystem --> Language : supports",
    "Model": "I118",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Language",
          "children": [
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "code",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "OCRSystem",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Language"
                }
              ],
              "label": "supports"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "TextFormat features fontStyle, fontSize, and alignment attributes; Text depends on TextFormat.",
    "PlantUML": "class TextFormat {\n  - fontStyle: String\n  - fontSize: Number\n  - alignment: String\n}\nText --> TextFormat : retains",
    "Model": "I118",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "TextFormat",
          "children": [
            {
              "type": "attribute",
              "value": "fontStyle",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "fontSize",
              "visibility": "-",
              "data_type": "Number"
            },
            {
              "type": "attribute",
              "value": "alignment",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Text",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "TextFormat"
                }
              ],
              "label": "retains"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "ExternalApplication contains attributes appName and appType; OCRSystem requires ExternalApplication.",
    "PlantUML": "class ExternalApplication {\n  - appName: String\n  - appType: String\n}\nOCRSystem --> ExternalApplication : integrates",
    "Model": "I118",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ExternalApplication",
          "children": [
            {
              "type": "attribute",
              "value": "appName",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "appType",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "OCRSystem",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "ExternalApplication"
                }
              ],
              "label": "integrates"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "ErrorLog class includes errorType and description attributes; ConfidenceScore contains value and description; OCRSystem depends on ErrorLog; Text depends on ConfidenceScore.",
    "PlantUML": "class ErrorLog {\n  -errorType: String\n  -description: String\n}\nclass ConfidenceScore {\n  -value: Number\n  -description: String\n}\nOCRSystem --> ErrorLog : logs\nText --> ConfidenceScore : includes",
    "Model": "I118",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ErrorLog",
          "children": [
            {
              "type": "attribute",
              "value": "errorType",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "ConfidenceScore",
          "children": [
            {
              "type": "attribute",
              "value": "value",
              "visibility": "-",
              "data_type": "Number"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "OCRSystem",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "ErrorLog"
                }
              ],
              "label": "logs"
            }
          ]
        },
        {
          "type": "class",
          "value": "Text",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "ConfidenceScore"
                }
              ],
              "label": "includes"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "User encapsulates userId and role attributes; OCRSystem requires User.",
    "PlantUML": "class User {\n  - userId: String\n  - role: String\n}\nOCRSystem --> User : authenticates",
    "Model": "I118",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "role",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "OCRSystem",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "authenticates"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Batch structure comprises images and depends on Image; OCRSystem needs Batch.",
    "PlantUML": "class Batch {\n  -images: List<Image>\n}\nOCRSystem --> Batch : processes\nBatch --> Image : contains",
    "Model": "I118",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Batch",
          "children": [
            {
              "type": "attribute",
              "value": "images",
              "visibility": "-",
              "data_type": "List<Image>"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Image"
                }
              ],
              "label": "contains"
            }
          ]
        },
        {
          "type": "class",
          "value": "OCRSystem",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Batch"
                }
              ],
              "label": "processes"
            }
          ]
        },
        {
          "type": "class",
          "value": "Image",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "RealTimeInput features deviceType attribute; RealTimeInput depends on Image; OCRSystem depends on RealTimeInput.",
    "PlantUML": "class RealTimeInput {\n  - deviceType: String\n}\nOCRSystem --> RealTimeInput : supports\nRealTimeInput --> Image : captures",
    "Model": "I118",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "RealTimeInput",
          "children": [
            {
              "type": "attribute",
              "value": "deviceType",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Image"
                }
              ],
              "label": "captures"
            }
          ]
        },
        {
          "type": "class",
          "value": "OCRSystem",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "RealTimeInput"
                }
              ],
              "label": "supports"
            }
          ]
        },
        {
          "type": "class",
          "value": "Image",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "AuditLog includes userId, timestamp, and action attributes; AuditLog depends on User; OCRSystem requires AuditLog.",
    "PlantUML": "class AuditLog {\n  - userId: String\n  - timestamp: DateTime\n  - action: String\n}\nOCRSystem --> AuditLog : records\nAuditLog --> User : references",
    "Model": "I118",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AuditLog",
          "children": [
            {
              "type": "attribute",
              "value": "userId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "action",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "references"
            }
          ]
        },
        {
          "type": "class",
          "value": "OCRSystem",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "AuditLog"
                }
              ],
              "label": "records"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "User contains username, password, and email attributes; User depends on AccountManager, which includes methods createAccount and deleteAccount.",
    "PlantUML": "class User {\n  +username: String\n  +password: String\n  +email: String\n}\nclass AccountManager {\n  +createAccount(): User\n  +deleteAccount(username: String): void\n}\nUser --> AccountManager : manages",
    "Model": "I119",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "username",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "AccountManager"
                }
              ],
              "label": "manages"
            }
          ]
        },
        {
          "type": "class",
          "value": "AccountManager",
          "children": [
            {
              "type": "method",
              "value": "createAccount()",
              "visibility": "+",
              "data_type": "User"
            },
            {
              "type": "method",
              "value": "deleteAccount(username: String)",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Language features languageCode and languageName attributes; Language depends on TranslationService, which includes methods setSourceLanguage and setTargetLanguage.",
    "PlantUML": "class Language {\n  +languageCode: String\n  +languageName: String\n}\nclass TranslationService {\n  +setSourceLanguage(language: Language): void\n  +setTargetLanguage(language: Language): void\n}\nLanguage --> TranslationService : used by",
    "Model": "I119",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Language",
          "children": [
            {
              "type": "attribute",
              "value": "languageCode",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "languageName",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "TranslationService"
                }
              ],
              "label": "used by"
            }
          ]
        },
        {
          "type": "class",
          "value": "TranslationService",
          "children": [
            {
              "type": "method",
              "value": "setSourceLanguage(language: Language)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "setTargetLanguage(language: Language)",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "UserInput contains text attribute and depends on TranslationService; TranslationService includes method translateText.",
    "PlantUML": "class UserInput {\n  +text: String\n}\nclass TranslationService {\n  +translateText(input: UserInput): String\n}\nUserInput --> TranslationService : \"provided to\"",
    "Model": "I119",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "UserInput",
          "children": [
            {
              "type": "attribute",
              "value": "text",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "TranslationService"
                }
              ],
              "label": "\"provided to\""
            }
          ]
        },
        {
          "type": "class",
          "value": "TranslationService",
          "children": [
            {
              "type": "method",
              "value": "translateText(input: UserInput)",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "TranslationEngine design integrates method processTranslation; TranslationService design includes method translateText and depends on TranslationEngine.",
    "PlantUML": "class TranslationEngine {\n  +processTranslation(sourceText: String, sourceLang: Language, targetLang: Language): String\n}\nclass TranslationService {\n  +translateText(input: UserInput): String\n}\nTranslationService --> TranslationEngine : \"delegates to\"",
    "Model": "I119",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "TranslationEngine",
          "children": [
            {
              "type": "method",
              "value": "processTranslation(sourceText: String, sourceLang: Language, targetLang: Language)",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "TranslationService",
          "children": [
            {
              "type": "method",
              "value": "translateText(input: UserInput)",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "TranslationEngine"
                }
              ],
              "label": "\"delegates to\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "TranslationHistory features methods saveHistory and retrieveHistory; User has username attribute and depends on TranslationHistory.",
    "PlantUML": "class TranslationHistory {\n  +saveHistory(user: User, translatedText: String): void\n  +retrieveHistory(user: User): List<String>\n}\nclass User {\n  +username: String\n}\nUser --> TranslationHistory : maintains",
    "Model": "I119",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "TranslationHistory",
          "children": [
            {
              "type": "method",
              "value": "saveHistory(user: User, translatedText: String)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "retrieveHistory(user: User)",
              "visibility": "+",
              "data_type": "List<String>"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "username",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "TranslationHistory"
                }
              ],
              "label": "maintains"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "ErrorHandler includes methods logError and displayError; TranslationService contains method translateText and depends on ErrorHandler.",
    "PlantUML": "class ErrorHandler {\n  +logError(errorMessage: String): void\n  +displayError(user: User, errorMessage: String): void\n}\nclass TranslationService {\n  +translateText(input: UserInput): String\n}\nTranslationService --> ErrorHandler : \"interacts with\"",
    "Model": "I119",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ErrorHandler",
          "children": [
            {
              "type": "method",
              "value": "logError(errorMessage: String)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "displayError(user: User, errorMessage: String)",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "TranslationService",
          "children": [
            {
              "type": "method",
              "value": "translateText(input: UserInput)",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "ErrorHandler"
                }
              ],
              "label": "\"interacts with\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "VoiceInput structure comprises methods recordVoice and convertToText; VoiceInput requires TranslationService, which includes method translateText.",
    "PlantUML": "class VoiceInput {\n  +recordVoice(): Audio\n  +convertToText(audio: Audio): String\n}\nclass TranslationService {\n  +translateText(input: UserInput): String\n}\nVoiceInput --> TranslationService : supports",
    "Model": "I119",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "VoiceInput",
          "children": [
            {
              "type": "method",
              "value": "recordVoice()",
              "visibility": "+",
              "data_type": "Audio"
            },
            {
              "type": "method",
              "value": "convertToText(audio: Audio)",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "TranslationService"
                }
              ],
              "label": "supports"
            }
          ]
        },
        {
          "type": "class",
          "value": "TranslationService",
          "children": [
            {
              "type": "method",
              "value": "translateText(input: UserInput)",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Feedback contains rating and comments attributes; Feedback depends on TranslationService; User has username attribute and requires Feedback; TranslationService has method recordFeedback.",
    "PlantUML": "class Feedback {\n  +rating: int\n  +comments: String\n}\nclass User {\n  +username: String\n}\nclass TranslationService {\n  +recordFeedback(user: User, feedback: Feedback): void\n}\nUser --> Feedback : submits\nFeedback --> TranslationService : \"stored in\"",
    "Model": "I119",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Feedback",
          "children": [
            {
              "type": "attribute",
              "value": "rating",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "comments",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "TranslationService"
                }
              ],
              "label": "\"stored in\""
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "username",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Feedback"
                }
              ],
              "label": "submits"
            }
          ]
        },
        {
          "type": "class",
          "value": "TranslationService",
          "children": [
            {
              "type": "method",
              "value": "recordFeedback(user: User, feedback: Feedback)",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "TranslationModel features translate method and modelName attribute; TranslationModel depends on TranslationService, which includes selectModel method.",
    "PlantUML": "class TranslationModel {\n  +modelName: String\n  +translate(input: String): String\n}\nclass TranslationService {\n  +selectModel(model: TranslationModel): void\n}\nTranslationModel --> TranslationService : \"utilized by\"",
    "Model": "I119",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "TranslationModel",
          "children": [
            {
              "type": "attribute",
              "value": "modelName",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "translate(input: String)",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "TranslationService"
                }
              ],
              "label": "\"utilized by\""
            }
          ]
        },
        {
          "type": "class",
          "value": "TranslationService",
          "children": [
            {
              "type": "method",
              "value": "selectModel(model: TranslationModel)",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "FileUpload class includes method parseFile and filePath attribute; FileUpload requires TranslationService, which contains method translateBatch.",
    "PlantUML": "class FileUpload {\n  +filePath: String\n  +parseFile(): List<String>\n}\nclass TranslationService {\n  +translateBatch(fileData: List): List<String>\n}\nFileUpload --> TranslationService : supports",
    "Model": "I119",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "FileUpload",
          "children": [
            {
              "type": "attribute",
              "value": "filePath",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "parseFile()",
              "visibility": "+",
              "data_type": "List<String>"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "TranslationService"
                }
              ],
              "label": "supports"
            }
          ]
        },
        {
          "type": "class",
          "value": "TranslationService",
          "children": [
            {
              "type": "method",
              "value": "translateBatch(fileData: List)",
              "visibility": "+",
              "data_type": "List<String>"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "TextInput provides methods processPlainText, processPDF, and processDOCX.",
    "PlantUML": "class TextInput {\n  +processPlainText()\n  +processPDF()\n  +processDOCX()\n}",
    "Model": "I120",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "TextInput",
          "children": [
            {
              "type": "method",
              "value": "processPlainText()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "processPDF()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "processDOCX()",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "VoiceSettings structure includes methods setVoiceType, adjustPitch, and adjustSpeed; TextInput depends on VoiceSettings.",
    "PlantUML": "class VoiceSettings {\n  +setVoiceType(type: String)\n  +adjustPitch(level: Float)\n  +adjustSpeed(level: Float)\n}\nTextInput --> VoiceSettings : \"uses\"",
    "Model": "I120",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "VoiceSettings",
          "children": [
            {
              "type": "method",
              "value": "setVoiceType(type: String)",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "adjustPitch(level: Float)",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "adjustSpeed(level: Float)",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "TextInput",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "VoiceSettings"
                }
              ],
              "label": "\"uses\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "AudioOutput class contains methods generateAudio and playAudio; VoiceSettings requires AudioOutput.",
    "PlantUML": "class AudioOutput {\n  +generateAudio(text: String)\n  +playAudio()\n}\nclass VoiceSettings {\n}\nVoiceSettings --> AudioOutput : configures",
    "Model": "I120",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AudioOutput",
          "children": [
            {
              "type": "method",
              "value": "generateAudio(text: String)",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "playAudio()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "VoiceSettings",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "AudioOutput"
                }
              ],
              "label": "configures"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "AudioFile features method saveToFile; AudioOutput depends on AudioFile.",
    "PlantUML": "class AudioFile {\n  +saveToFile(format: String)\n}\nAudioOutput --> AudioFile : \"exports\"",
    "Model": "I120",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AudioFile",
          "children": [
            {
              "type": "method",
              "value": "saveToFile(format: String)",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "AudioOutput",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "AudioFile"
                }
              ],
              "label": "\"exports\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "LanguageSupport includes method setLanguage; TextInput requires LanguageSupport.",
    "PlantUML": "class LanguageSupport {\n  +setLanguage(language: String)\n}\nTextInput --> LanguageSupport : \"depends on\"",
    "Model": "I120",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "LanguageSupport",
          "children": [
            {
              "type": "method",
              "value": "setLanguage(language: String)",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "TextInput",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "LanguageSupport"
                }
              ],
              "label": "\"depends on\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "In PlaybackControl, methods pauseAudio and resumeAudio are available. AudioOutput relies on PlaybackControl.",
    "PlantUML": "class PlaybackControl {\n  +pauseAudio()\n  +resumeAudio()\n}\nAudioOutput --> PlaybackControl : \"manages\"",
    "Model": "I120",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "PlaybackControl",
          "children": [
            {
              "type": "method",
              "value": "pauseAudio()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "resumeAudio()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "AudioOutput",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "PlaybackControl"
                }
              ],
              "label": "\"manages\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "RealTimePlayback includes the method readTextAloud. TextInput depends on RealTimePlayback.",
    "PlantUML": "class RealTimePlayback {\n  +readTextAloud(input: String)\n}\nTextInput --> RealTimePlayback : supports",
    "Model": "I120",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "RealTimePlayback",
          "children": [
            {
              "type": "method",
              "value": "readTextAloud(input: String)",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "TextInput",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "RealTimePlayback"
                }
              ],
              "label": "supports"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "ErrorHandling class contains validateInput and showError methods. TextInput depends on ErrorHandling.",
    "PlantUML": "class ErrorHandling {\n  +validateInput(input: String)\n  +showError(message: String)\n}\nTextInput --> ErrorHandling : \"validates\"",
    "Model": "I120",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ErrorHandling",
          "children": [
            {
              "type": "method",
              "value": "validateInput(input: String)",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "showError(message: String)",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "TextInput",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "ErrorHandling"
                }
              ],
              "label": "\"validates\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "UserProfile class provides savePreferences and loadPreferences methods. UserAuthentication contains login and register methods and relies on UserProfile. VoiceSettings and LanguageSupport depend on UserProfile.",
    "PlantUML": "class UserProfile {\n  +savePreferences()\n  +loadPreferences()\n}\nclass UserAuthentication {\n  +login(username: String, password: String)\n  +register(username: String, password: String)\n}\nUserAuthentication --> UserProfile : \"manages\"\nVoiceSettings --> UserProfile : \"stores\"\nLanguageSupport --> UserProfile : \"linked to\"",
    "Model": "I120",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "UserProfile",
          "children": [
            {
              "type": "method",
              "value": "savePreferences()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "loadPreferences()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "UserAuthentication",
          "children": [
            {
              "type": "method",
              "value": "login(username: String, password: String)",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "register(username: String, password: String)",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "UserProfile"
                }
              ],
              "label": "\"manages\""
            }
          ]
        },
        {
          "type": "class",
          "value": "VoiceSettings",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "UserProfile"
                }
              ],
              "label": "\"stores\""
            }
          ]
        },
        {
          "type": "class",
          "value": "LanguageSupport",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "UserProfile"
                }
              ],
              "label": "\"linked to\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "ThirdPartyAPI includes methods integrateAPI and fetchVoiceData. AudioOutput relies on ThirdPartyAPI.",
    "PlantUML": "class ThirdPartyAPI {\n  +integrateAPI(apiName: String)\n  +fetchVoiceData()\n}\nAudioOutput --> ThirdPartyAPI : \"uses\"",
    "Model": "I120",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ThirdPartyAPI",
          "children": [
            {
              "type": "method",
              "value": "integrateAPI(apiName: String)",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "fetchVoiceData()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "AudioOutput",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "ThirdPartyAPI"
                }
              ],
              "label": "\"uses\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "User is characterized by userId, email, and password attributes. AccountManager offers createAccount, updateAccount, and deleteAccount methods and depends on User.",
    "PlantUML": "class User {\n  +userId: String\n  +email: String\n  +password: String\n}\n\nclass AccountManager {\n  +createAccount(user: User): void\n  +updateAccount(user: User): void\n  +deleteAccount(userId: String): void\n}\n\nAccountManager --> User : manages\n",
    "Model": "I121",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "AccountManager",
          "children": [
            {
              "type": "method",
              "value": "createAccount(user: User)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "updateAccount(user: User)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "deleteAccount(userId: String)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "manages"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Authentication class offers login and logout methods. Authentication depends on User.",
    "PlantUML": "class Authentication {\n  +login(email: String, password: String): Boolean\n  +logout(userId: String): void\n}\n\nAuthentication --> User : authenticates\n",
    "Model": "I121",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Authentication",
          "children": [
            {
              "type": "method",
              "value": "login(email: String, password: String)",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "method",
              "value": "logout(userId: String)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "authenticates"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Email is defined by emailId, sender, recipients, subject, and body attributes. EmailSender structure includes the sendEmail method and depends on Email.",
    "PlantUML": "class Email {\n  +emailId: String\n  +sender: String\n  +recipients: List<String>\n  +subject: String\n  +body: String\n}\n\nclass EmailSender {\n  +sendEmail(email: Email): Boolean\n}\n\nEmailSender --> Email : sends\nEmail --> User \n",
    "Model": "I121",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Email",
          "children": [
            {
              "type": "attribute",
              "value": "emailId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "sender",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "recipients",
              "visibility": "+",
              "data_type": "List<String>"
            },
            {
              "type": "attribute",
              "value": "subject",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "body",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "EmailSender",
          "children": [
            {
              "type": "method",
              "value": "sendEmail(email: Email)",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Email"
                }
              ],
              "label": "sends"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Inbox holds an emails attribute and depends on both Email and User.",
    "PlantUML": "class Inbox {\n  +emails: List<Email>\n}\n\nInbox --> Email : stores\nInbox --> User : \"belongs to\"\n",
    "Model": "I121",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Inbox",
          "children": [
            {
              "type": "attribute",
              "value": "emails",
              "visibility": "+",
              "data_type": "List<Email>"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Email"
                }
              ],
              "label": "stores"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "\"belongs to\""
            }
          ]
        },
        {
          "type": "class",
          "value": "Email",
          "children": []
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "SpamFilter structure includes a filter method and depends on Email.",
    "PlantUML": "class SpamFilter {\n    +filter(email): Boolean\n}\n\nSpamFilter --> Email : filters\n",
    "Model": "I121",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "SpamFilter",
          "children": [
            {
              "type": "method",
              "value": "filter(email)",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Email"
                }
              ],
              "label": "filters"
            }
          ]
        },
        {
          "type": "class",
          "value": "Email",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "EmailSearch offers methods searchByKeyword and searchBySender and depends on both Inbox and Email.",
    "PlantUML": "class EmailSearch {\n    +searchByKeyword(keyword: String): List<Email>\n    +searchBySender(sender: String): List<Email>\n}\n\nEmailSearch --> Inbox : \"searches\"\nEmailSearch --> Email : \"fetches results\"\n",
    "Model": "I121",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "EmailSearch",
          "children": [
            {
              "type": "method",
              "value": "searchByKeyword(keyword: String)",
              "visibility": "+",
              "data_type": "List<Email>"
            },
            {
              "type": "method",
              "value": "searchBySender(sender: String)",
              "visibility": "+",
              "data_type": "List<Email>"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Inbox"
                }
              ],
              "label": "\"searches\""
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Email"
                }
              ],
              "label": "\"fetches results\""
            }
          ]
        },
        {
          "type": "class",
          "value": "Inbox",
          "children": []
        },
        {
          "type": "class",
          "value": "Email",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Log includes logId, action, and timestamp attributes and depends on User. Logger provides logAction functionality and depends on Log.",
    "PlantUML": "class Log {\n  +logId: String\n  +action: String\n  +timestamp: DateTime\n}\n\nclass Logger {\n  +logAction(log: Log): void\n}\n\nLogger --> Log : creates\nLog --> User : \"records actions\"\n",
    "Model": "I121",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Log",
          "children": [
            {
              "type": "attribute",
              "value": "logId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "action",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "+",
              "data_type": "DateTime"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "\"records actions\""
            }
          ]
        },
        {
          "type": "class",
          "value": "Logger",
          "children": [
            {
              "type": "method",
              "value": "logAction(log: Log)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Log"
                }
              ],
              "label": "creates"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Attachment structure contains fileName and fileSize attributes. Email depends on Attachment.",
    "PlantUML": "class Attachment {\n  +fileName: String\n  +fileSize: int\n}\n\nEmail \"1\" --> \"*\" Attachment : includes\n",
    "Model": "I121",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Attachment",
          "children": [
            {
              "type": "attribute",
              "value": "fileName",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "fileSize",
              "visibility": "+",
              "data_type": "int"
            }
          ]
        },
        {
          "type": "class",
          "value": "Email",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Attachment"
                }
              ],
              "label": "includes",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "MFA offers generateCode and validateCode methods and depends on User.",
    "PlantUML": "class MFA {\n  +generateCode(userId: String): String\n  +validateCode(userId: String, code: String): Boolean\n}\n\nMFA --> User : \"validates\"\n",
    "Model": "I121",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "MFA",
          "children": [
            {
              "type": "method",
              "value": "generateCode(userId: String)",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "validateCode(userId: String, code: String)",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "\"validates\""
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Draft includes draftId and email attributes and depends on Email. User relies on Draft.",
    "PlantUML": "class Draft {\n    +draftId: String\n    +email: Email\n}\n\nUser --> Draft : \"has drafts\"\nDraft --> Email : \"stores email content\"\n",
    "Model": "I121",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Draft",
          "children": [
            {
              "type": "attribute",
              "value": "draftId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "+",
              "data_type": "Email"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Email"
                }
              ],
              "label": "\"stores email content\""
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Draft"
                }
              ],
              "label": "\"has drafts\""
            }
          ]
        },
        {
          "type": "class",
          "value": "Email",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "User includes an authenticate method and username and password attributes. User depends on AuthService, which provides verifyCredentials.",
    "PlantUML": "class User {\n  +username: String\n  +password: String\n  +authenticate(): Boolean\n}\n\nclass AuthService {\n  +verifyCredentials(user: User): Boolean\n}\n\nUser --> AuthService : \"authenticates\"\n",
    "Model": "I122",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "username",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "authenticate()",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "AuthService"
                }
              ],
              "label": "\"authenticates\""
            }
          ]
        },
        {
          "type": "class",
          "value": "AuthService",
          "children": [
            {
              "type": "method",
              "value": "verifyCredentials(user: User)",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "WebServer structure includes hostResource method and depends on Resource. Resource contains id and content attributes.",
    "PlantUML": "class WebServer {\n  +hostResource(resource: Resource): Boolean\n}\n\nclass Resource {\n  +id: String\n  +content: String\n}\n\nWebServer --> Resource : \"hosts\"\n",
    "Model": "I122",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "WebServer",
          "children": [
            {
              "type": "method",
              "value": "hostResource(resource: Resource)",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Resource"
                }
              ],
              "label": "\"hosts\""
            }
          ]
        },
        {
          "type": "class",
          "value": "Resource",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "content",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "HTTPRequest is defined by method and url attributes and depends on HTTPHandler, which includes handleRequest and depends on Resource.",
    "PlantUML": "class HTTPRequest {\n  +method: String\n  +url: String\n}\n\nclass HTTPHandler {\n  +handleRequest(request: HTTPRequest): Response\n}\n\nHTTPRequest --> HTTPHandler : \"processed by\"\nHTTPHandler --> Resource : fetches\n",
    "Model": "I122",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "HTTPRequest",
          "children": [
            {
              "type": "attribute",
              "value": "method",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "url",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "HTTPHandler"
                }
              ],
              "label": "\"processed by\""
            }
          ]
        },
        {
          "type": "class",
          "value": "HTTPHandler",
          "children": [
            {
              "type": "method",
              "value": "handleRequest(request: HTTPRequest)",
              "visibility": "+",
              "data_type": "Response"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Resource"
                }
              ],
              "label": "fetches"
            }
          ]
        },
        {
          "type": "class",
          "value": "Resource",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Logger offers logRequest and logResponse methods. HTTPRequest depends on Logger, and Response depends on Logger.",
    "PlantUML": "class Logger {\n    +logRequest(request: HTTPRequest)\n    +logResponse(response: Response)\n}\n\nHTTPRequest --> Logger : \"logged by\"\nResponse --> Logger : \"logged by\"\n",
    "Model": "I122",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Logger",
          "children": [
            {
              "type": "method",
              "value": "logRequest(request: HTTPRequest)",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "logResponse(response: Response)",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "HTTPRequest",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Logger"
                }
              ],
              "label": "\"logged by\""
            }
          ]
        },
        {
          "type": "class",
          "value": "Response",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Logger"
                }
              ],
              "label": "\"logged by\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "UserSession includes sessionId and user attributes. WebServer relies on UserSession.",
    "PlantUML": "class UserSession {\n  +sessionId: String\n  +user: User\n}\nUser --> UserSession \nWebServer --> UserSession : \"manages\"\n",
    "Model": "I122",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "UserSession",
          "children": [
            {
              "type": "attribute",
              "value": "sessionId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "user",
              "visibility": "+",
              "data_type": "User"
            }
          ]
        },
        {
          "type": "class",
          "value": "WebServer",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "UserSession"
                }
              ],
              "label": "\"manages\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "SecurityRule structure contains ruleId and action attributes. Admin defines rules and depends on SecurityRule. WebServer depends on SecurityRule.",
    "PlantUML": "class SecurityRule {\n  +ruleId: String\n  +action: String\n}\n\nclass Admin {\n  +defineRule(rule: SecurityRule): Boolean\n}\n\nAdmin --> SecurityRule : \"defines\"\nWebServer --> SecurityRule : \"enforces\"\n",
    "Model": "I122",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "SecurityRule",
          "children": [
            {
              "type": "attribute",
              "value": "ruleId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "action",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Admin",
          "children": [
            {
              "type": "method",
              "value": "defineRule(rule: SecurityRule)",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "SecurityRule"
                }
              ],
              "label": "\"defines\""
            }
          ]
        },
        {
          "type": "class",
          "value": "WebServer",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "SecurityRule"
                }
              ],
              "label": "\"enforces\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Database has a connectionString attribute and executeQuery method. WebServer relies on Database.",
    "PlantUML": "class Database {\n  +connectionString: String\n  +executeQuery(query: String): ResultSet\n}\n\nWebServer --> Database : \"connects to\"\n",
    "Model": "I122",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Database",
          "children": [
            {
              "type": "attribute",
              "value": "connectionString",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "executeQuery(query: String)",
              "visibility": "+",
              "data_type": "ResultSet"
            }
          ]
        },
        {
          "type": "class",
          "value": "WebServer",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Database"
                }
              ],
              "label": "\"connects to\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Cache provides addResource and getResource methods and depends on Resource. WebServer depends on Cache.",
    "PlantUML": "class Cache {\n  +addResource(resource: Resource): void\n  +getResource(id: String): Resource\n}\n\nWebServer --> Cache : \"uses\"\nCache --> Resource : \"stores\"\n",
    "Model": "I122",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Cache",
          "children": [
            {
              "type": "method",
              "value": "addResource(resource: Resource)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "getResource(id: String)",
              "visibility": "+",
              "data_type": "Resource"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Resource"
                }
              ],
              "label": "\"stores\""
            }
          ]
        },
        {
          "type": "class",
          "value": "WebServer",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Cache"
                }
              ],
              "label": "\"uses\""
            }
          ]
        },
        {
          "type": "class",
          "value": "Resource",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "LoadBalancer offers distributeRequest method and depends on WebServer.",
    "PlantUML": "class LoadBalancer {\n  +distributeRequest(request: HTTPRequest): WebServer\n}\n\nLoadBalancer --> WebServer : balances load between\n",
    "Model": "I122",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "LoadBalancer",
          "children": [
            {
              "type": "method",
              "value": "distributeRequest(request: HTTPRequest)",
              "visibility": "+",
              "data_type": "WebServer"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "WebServer"
                }
              ],
              "label": "balances load between"
            }
          ]
        },
        {
          "type": "class",
          "value": "WebServer",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "ErrorHandler includes handleError method and depends on Response. WebServer relies on ErrorHandler.",
    "PlantUML": "class ErrorHandler {\n  +handleError(errorCode: String): Response\n}\n\nWebServer --> ErrorHandler : \"delegates\"\nErrorHandler --> Response : \"produces\"\n",
    "Model": "I122",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ErrorHandler",
          "children": [
            {
              "type": "method",
              "value": "handleError(errorCode: String)",
              "visibility": "+",
              "data_type": "Response"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Response"
                }
              ],
              "label": "\"produces\""
            }
          ]
        },
        {
          "type": "class",
          "value": "WebServer",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "ErrorHandler"
                }
              ],
              "label": "\"delegates\""
            }
          ]
        },
        {
          "type": "class",
          "value": "Response",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "User includes role and accessLevel attributes and contains Role, which encapsulates name and description attributes.",
    "PlantUML": "class User {\n  +role: String\n  +accessLevel: int\n}\n\nclass Role {\n  +name: String\n  +description: String\n}\n\nUser \"1\" *-- \"1..*\" Role : \"has\"\n",
    "Model": "I123",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "role",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "accessLevel",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Role"
                }
              ],
              "label": "\"has\"",
              "multiplicity1": "1",
              "multiplicity2": "1..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Role",
          "children": [
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Admin configures rules and includes FilteringRule, which encapsulates criteria and type attributes.",
    "PlantUML": "class Admin {\n  +configureRules()\n}\n\nclass FilteringRule {\n  +criteria: String\n  +type: String\n}\n\nAdmin \"1\" *-- \"1..*\" FilteringRule : \"configures\"\n",
    "Model": "I123",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Admin",
          "children": [
            {
              "type": "method",
              "value": "configureRules()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "FilteringRule"
                }
              ],
              "label": "\"configures\"",
              "multiplicity1": "1",
              "multiplicity2": "1..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "FilteringRule",
          "children": [
            {
              "type": "attribute",
              "value": "criteria",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "type",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "User is composed of FilteringRule.",
    "PlantUML": "User \"1\" *-- \"1..*\" FilteringRule : \"applies\"",
    "Model": "I123",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "FilteringRule"
                }
              ],
              "label": "\"applies\"",
              "multiplicity1": "1",
              "multiplicity2": "1..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "FilteringRule",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Log features timestamp and activity attributes. User includes Log.",
    "PlantUML": "class Log {\n  +timestamp: Date\n  +activity: String\n}\n\nUser \"1\" *-- \"0..*\" Log : \"generates\"\n",
    "Model": "I123",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Log",
          "children": [
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "activity",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Log"
                }
              ],
              "label": "\"generates\"",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "ContentAnalyzer includes analyzeContent method and contains Content, which has a data attribute.",
    "PlantUML": "class ContentAnalyzer {\n    +analyzeContent()\n}\n\nclass Content {\n    +data: String\n}\n\nContentAnalyzer \"1\" *-- \"1..*\" Content : \"analyzes\"\n",
    "Model": "I123",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ContentAnalyzer",
          "children": [
            {
              "type": "method",
              "value": "analyzeContent()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Content"
                }
              ],
              "label": "\"analyzes\"",
              "multiplicity1": "1",
              "multiplicity2": "1..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Content",
          "children": [
            {
              "type": "attribute",
              "value": "data",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Exception structure contains userID and ruleID attributes. Admin includes Exception.",
    "PlantUML": "class Exception {\n  +userID: String\n  +ruleID: String\n}\nAdmin \"1\" *-- \"1..*\" Exception : manages\n",
    "Model": "I123",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Exception",
          "children": [
            {
              "type": "attribute",
              "value": "userID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "ruleID",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Admin",
          "children": [
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Exception"
                }
              ],
              "label": "manages",
              "multiplicity1": "1",
              "multiplicity2": "1..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "ExternalAPI class includes fetchBlacklist method. DynamicFilter contains updateRules method and incorporates ExternalAPI.",
    "PlantUML": "class ExternalAPI {\n  +fetchBlacklist()\n}\n\nclass DynamicFilter {\n  +updateRules()\n}\n\nDynamicFilter \"1\" *-- \"1..*\" ExternalAPI : integrates\n",
    "Model": "I123",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ExternalAPI",
          "children": [
            {
              "type": "method",
              "value": "fetchBlacklist()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "DynamicFilter",
          "children": [
            {
              "type": "method",
              "value": "updateRules()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "ExternalAPI"
                }
              ],
              "label": "integrates",
              "multiplicity1": "1",
              "multiplicity2": "1..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Schedule features startTime and endTime attributes. FilteringRule includes Schedule.",
    "PlantUML": "class Schedule {\n  +startTime: Time\n  +endTime: Time\n}\n\nFilteringRule \"1\" *-- \"1\" Schedule : \"associated with\"\n",
    "Model": "I123",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Schedule",
          "children": [
            {
              "type": "attribute",
              "value": "startTime",
              "visibility": "+",
              "data_type": "Time"
            },
            {
              "type": "attribute",
              "value": "endTime",
              "visibility": "+",
              "data_type": "Time"
            }
          ]
        },
        {
          "type": "class",
          "value": "FilteringRule",
          "children": [
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Schedule"
                }
              ],
              "label": "\"associated with\"",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Feedback contains contentID and message attributes. User includes Feedback.",
    "PlantUML": "class Feedback {\n  +contentID: String\n  +message: String\n}\n\nUser \"1\" *-- \"0..*\" Feedback : \"submits\"\n",
    "Model": "I123",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Feedback",
          "children": [
            {
              "type": "attribute",
              "value": "contentID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "message",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Feedback"
                }
              ],
              "label": "\"submits\"",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Report offers generate method and reportType attribute. Admin contains Report, and Log includes Report.",
    "PlantUML": "class Report {\n  +reportType: String\n  +generate()\n}\n\nAdmin \"1\" *-- \"1..*\" Report : \"reviews\"\nLog \"1..*\" *-- \"1\" Report : \"summarized in\"\n",
    "Model": "I123",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Report",
          "children": [
            {
              "type": "attribute",
              "value": "reportType",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "generate()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Admin",
          "children": [
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Report"
                }
              ],
              "label": "\"reviews\"",
              "multiplicity1": "1",
              "multiplicity2": "1..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Log",
          "children": [
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Report"
                }
              ],
              "label": "\"summarized in\"",
              "multiplicity1": "1..*",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Email design includes content attribute and isSpam method and relies on KeywordFilter, which provides filterEmail method and keywords attribute.",
    "PlantUML": "class Email {\n  +content: String\n  +isSpam(): Boolean\n}\n\nclass KeywordFilter {\n  +keywords: List<String>\n  +filterEmail(email: Email): Boolean\n}\n\nEmail --> KeywordFilter : uses\n",
    "Model": "I124",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Email",
          "children": [
            {
              "type": "attribute",
              "value": "content",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "isSpam()",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "KeywordFilter"
                }
              ],
              "label": "uses"
            }
          ]
        },
        {
          "type": "class",
          "value": "KeywordFilter",
          "children": [
            {
              "type": "attribute",
              "value": "keywords",
              "visibility": "+",
              "data_type": "List<String>"
            },
            {
              "type": "method",
              "value": "filterEmail(email: Email)",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "SpamKeywordDatabase offers addKeyword and removeKeyword methods and contains keywords attribute. Admin has updateKeywords method and depends on SpamKeywordDatabase.",
    "PlantUML": "class SpamKeywordDatabase {\n  +keywords: List<String>\n  +addKeyword(keyword: String): void\n  +removeKeyword(keyword: String): void\n}\n\nclass Admin {\n  +updateKeywords(): void\n}\n\nAdmin --> SpamKeywordDatabase : manages\n",
    "Model": "I124",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "SpamKeywordDatabase",
          "children": [
            {
              "type": "attribute",
              "value": "keywords",
              "visibility": "+",
              "data_type": "List<String>"
            },
            {
              "type": "method",
              "value": "addKeyword(keyword: String)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "removeKeyword(keyword: String)",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Admin",
          "children": [
            {
              "type": "method",
              "value": "updateKeywords()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "SpamKeywordDatabase"
                }
              ],
              "label": "manages"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "User is identified by reportAsSpam and reportAsNotSpam methods and depends on FeedbackProcessor, which offers processFeedback method and relies on SpamKeywordDatabase.",
    "PlantUML": "class User {\n  +reportAsSpam(email: Email): void\n  +reportAsNotSpam(email: Email): void\n}\n\nclass FeedbackProcessor {\n  +processFeedback(email: Email, isSpam: Boolean): void\n}\n\nUser --> FeedbackProcessor : sends\nFeedbackProcessor --> SpamKeywordDatabase : updates\n",
    "Model": "I124",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "method",
              "value": "reportAsSpam(email: Email)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "reportAsNotSpam(email: Email)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "FeedbackProcessor"
                }
              ],
              "label": "sends"
            }
          ]
        },
        {
          "type": "class",
          "value": "FeedbackProcessor",
          "children": [
            {
              "type": "method",
              "value": "processFeedback(email: Email, isSpam: Boolean)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "SpamKeywordDatabase"
                }
              ],
              "label": "updates"
            }
          ]
        },
        {
          "type": "class",
          "value": "SpamKeywordDatabase",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "EmailService provides fetchEmails method and depends on Email.",
    "PlantUML": "class EmailService {\n  +fetchEmails(): List<Email>\n}\nEmailService --> Email : provides\n",
    "Model": "I124",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "EmailService",
          "children": [
            {
              "type": "method",
              "value": "fetchEmails()",
              "visibility": "+",
              "data_type": "List<Email>"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Email"
                }
              ],
              "label": "provides"
            }
          ]
        },
        {
          "type": "class",
          "value": "Email",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "MLModel includes trainModel and classifyEmail methods. Email depends on MLModel.",
    "PlantUML": "class MLModel {\n  +trainModel(data: List<Email>): void\n  +classifyEmail(email: Email): Boolean\n}\n\nEmail --> MLModel : analyzed",
    "Model": "I124",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "MLModel",
          "children": [
            {
              "type": "method",
              "value": "trainModel(data: List<Email>)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "classifyEmail(email: Email)",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        },
        {
          "type": "class",
          "value": "Email",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "MLModel"
                }
              ],
              "label": "analyzed"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Whitelist structure contains trustedSenders attribute and addSender and removeSender methods. User depends on Whitelist.",
    "PlantUML": "class Whitelist {\n  +trustedSenders: List<String>\n  +addSender(email: String): void\n  +removeSender(email: String): void\n}\n\nUser --> Whitelist : manages\n",
    "Model": "I124",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Whitelist",
          "children": [
            {
              "type": "attribute",
              "value": "trustedSenders",
              "visibility": "+",
              "data_type": "List<String>"
            },
            {
              "type": "method",
              "value": "addSender(email: String)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "removeSender(email: String)",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Whitelist"
                }
              ],
              "label": "manages"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Report provides generateReport method. ReportGenerator includes createReport method and depends on Report.",
    "PlantUML": "class Report {\n  +generateReport(): void\n}\n\nclass ReportGenerator {\n  +createReport(): Report\n}\n\nReportGenerator --> Report : creates\n",
    "Model": "I124",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Report",
          "children": [
            {
              "type": "method",
              "value": "generateReport()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "ReportGenerator",
          "children": [
            {
              "type": "method",
              "value": "createReport()",
              "visibility": "+",
              "data_type": "Report"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Report"
                }
              ],
              "label": "creates"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "SpamBlocker offers blockEmail method. Email relies on SpamBlocker.",
    "PlantUML": "class SpamBlocker {\n  +blockEmail(email: Email): void\n}\n\nEmail --> SpamBlocker : processed",
    "Model": "I124",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "SpamBlocker",
          "children": [
            {
              "type": "method",
              "value": "blockEmail(email: Email)",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Email",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "SpamBlocker"
                }
              ],
              "label": "processed"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "CustomFilter is defined by rules and applyFilter method. User depends on CustomFilter, and Email depends on CustomFilter.",
    "PlantUML": "class CustomFilter {\n  +rules: List<String>\n  +applyFilter(email: Email): Boolean\n}\n\nUser --> CustomFilter : defines\nEmail --> CustomFilter : processed\n",
    "Model": "I124",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "CustomFilter",
          "children": [
            {
              "type": "attribute",
              "value": "rules",
              "visibility": "+",
              "data_type": "List<String>"
            },
            {
              "type": "method",
              "value": "applyFilter(email: Email)",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "CustomFilter"
                }
              ],
              "label": "defines"
            }
          ]
        },
        {
          "type": "class",
          "value": "Email",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "CustomFilter"
                }
              ],
              "label": "processed"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "SecurityModule contains encryptData and decryptData methods. EmailService depends on SecurityModule.",
    "PlantUML": "class SecurityModule {\n  + encryptData(data: String): String\n  + decryptData(data: String): String\n}\n\nEmailService --> SecurityModule : communicates\n",
    "Model": "I124",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "SecurityModule",
          "children": [
            {
              "type": "method",
              "value": "encryptData(data: String)",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "decryptData(data: String)",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "EmailService",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "SecurityModule"
                }
              ],
              "label": "communicates"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "BackupSoftware provides createBackupProfile method and depends on BackupProfile, which includes dataSets and schedule attributes.",
    "PlantUML": "class BackupSoftware {\n  +createBackupProfile()\n}\n\nclass BackupProfile {\n  +dataSets: List\n  +schedule: String\n}\n\nBackupSoftware \"1\" --> \"*\" BackupProfile : manages\n",
    "Model": "I125",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "BackupSoftware",
          "children": [
            {
              "type": "method",
              "value": "createBackupProfile()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "BackupProfile"
                }
              ],
              "label": "manages",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "BackupProfile",
          "children": [
            {
              "type": "attribute",
              "value": "dataSets",
              "visibility": "+",
              "data_type": "List"
            },
            {
              "type": "attribute",
              "value": "schedule",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "User integrates configureSchedule method and depends on BackupProfile, which has schedule attribute.",
    "PlantUML": "class User {\n  +configureSchedule()\n}\n\nclass BackupProfile {\n  +schedule: String\n}\n\nUser \"1\" --> \"1\" BackupProfile : configures\n",
    "Model": "I125",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "method",
              "value": "configureSchedule()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "BackupProfile"
                }
              ],
              "label": "configures",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "BackupProfile",
          "children": [
            {
              "type": "attribute",
              "value": "schedule",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "EncryptionModule includes encryptData and decryptData methods and depends on BackupData, which integrates data attribute.",
    "PlantUML": "class EncryptionModule {\n  +encryptData()\n  +decryptData()\n}\n\nclass BackupData {\n  +data: String\n}\n\nEncryptionModule \"1\" --> \"*\" BackupData : secures\n",
    "Model": "I125",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "EncryptionModule",
          "children": [
            {
              "type": "method",
              "value": "encryptData()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "decryptData()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "BackupData"
                }
              ],
              "label": "secures",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "BackupData",
          "children": [
            {
              "type": "attribute",
              "value": "data",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "RestoreManager offers restoreBackup method and depends on BackupData, which includes location attribute.",
    "PlantUML": "class RestoreManager {\n  +restoreBackup()\n}\nclass BackupData {\n  +location: String\n}\nRestoreManager \"1\" --> \"*\" BackupData : restores\n",
    "Model": "I125",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "RestoreManager",
          "children": [
            {
              "type": "method",
              "value": "restoreBackup()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "BackupData"
                }
              ],
              "label": "restores",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "BackupData",
          "children": [
            {
              "type": "attribute",
              "value": "location",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "AuditLog has operations attribute and generateReport method. BackupSoftware includes logOperation method and depends on AuditLog.",
    "PlantUML": "class AuditLog {\n    +operations: List\n    +generateReport()\n}\n\nclass BackupSoftware {\n    +logOperation()\n}\n\nBackupSoftware \"1\" --> \"*\" AuditLog : logs\n",
    "Model": "I125",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AuditLog",
          "children": [
            {
              "type": "attribute",
              "value": "operations",
              "visibility": "+",
              "data_type": "List"
            },
            {
              "type": "method",
              "value": "generateReport()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "BackupSoftware",
          "children": [
            {
              "type": "method",
              "value": "logOperation()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "AuditLog"
                }
              ],
              "label": "logs",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "NotificationSystem provides sendNotification method. BackupSoftware includes status attribute and depends on NotificationSystem.",
    "PlantUML": "class NotificationSystem {\n    +sendNotification(status: String)\n}\n\nclass BackupSoftware {\n    +status: String\n}\n\nBackupSoftware \"1\" --> \"1\" NotificationSystem : notifies\n",
    "Model": "I125",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "NotificationSystem",
          "children": [
            {
              "type": "method",
              "value": "sendNotification(status: String)",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "BackupSoftware",
          "children": [
            {
              "type": "attribute",
              "value": "status",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "NotificationSystem"
                }
              ],
              "label": "notifies",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "CloudStorageProvider encapsulates uploadData and downloadData methods. BackupSoftware includes integrateWithCloud method and depends on CloudStorageProvider.",
    "PlantUML": "class CloudStorageProvider {\n  +uploadData()\n  +downloadData()\n}\n\nclass BackupSoftware {\n  +integrateWithCloud()\n}\n\nBackupSoftware \"1\" --> \"*\" CloudStorageProvider : integrates\n",
    "Model": "I125",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "CloudStorageProvider",
          "children": [
            {
              "type": "method",
              "value": "uploadData()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "downloadData()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "BackupSoftware",
          "children": [
            {
              "type": "method",
              "value": "integrateWithCloud()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "CloudStorageProvider"
                }
              ],
              "label": "integrates",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "IncrementalBackup structure offers compareChanges and storeDifferences methods. BackupSoftware includes startIncrementalBackup method and depends on IncrementalBackup.",
    "PlantUML": "class IncrementalBackup {\n  +compareChanges()\n  +storeDifferences()\n}\n\nclass BackupSoftware {\n  +startIncrementalBackup()\n}\n\nBackupSoftware \"1\" --> \"1\" IncrementalBackup : uses\n",
    "Model": "I125",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "IncrementalBackup",
          "children": [
            {
              "type": "method",
              "value": "compareChanges()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "storeDifferences()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "BackupSoftware",
          "children": [
            {
              "type": "method",
              "value": "startIncrementalBackup()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "IncrementalBackup"
                }
              ],
              "label": "uses",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "TaskScheduler prioritizes tasks and depends on BackupProfile, which has priorityLevel attribute.",
    "PlantUML": "class TaskScheduler {\n  +prioritizeTasks()\n}\n\nclass BackupProfile {\n  +priorityLevel: String\n}\n\nTaskScheduler \"1\" --> \"*\" BackupProfile : prioritizes\n",
    "Model": "I125",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "TaskScheduler",
          "children": [
            {
              "type": "method",
              "value": "prioritizeTasks()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "BackupProfile"
                }
              ],
              "label": "prioritizes",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "BackupProfile",
          "children": [
            {
              "type": "attribute",
              "value": "priorityLevel",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "UserInterface provides displayBackupOptions and displayRestoreOptions methods. BackupSoftware offers manageViaGUI method and depends on UserInterface.",
    "PlantUML": "class UserInterface {\n  +displayBackupOptions()\n  +displayRestoreOptions()\n}\n\nclass BackupSoftware {\n  +manageViaGUI()\n}\n\nBackupSoftware \"1\" --> \"1\" UserInterface : provides\n",
    "Model": "I125",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "UserInterface",
          "children": [
            {
              "type": "method",
              "value": "displayBackupOptions()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "displayRestoreOptions()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "BackupSoftware",
          "children": [
            {
              "type": "method",
              "value": "manageViaGUI()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "UserInterface"
                }
              ],
              "label": "provides",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "BackupScheduler includes scheduleBackup and executeBackup methods and associates with BackupData, which contains storeBackup and retrieveBackup methods.",
    "PlantUML": "class BackupScheduler {\n  +scheduleBackup(): void\n  +executeBackup(): void\n}\nclass BackupData {\n  +storeBackup(): void\n  +retrieveBackup(): void\n}\nBackupScheduler -- BackupData : manages",
    "Model": "I126",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "BackupScheduler",
          "children": [
            {
              "type": "method",
              "value": "scheduleBackup()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "executeBackup()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "BackupData"
                }
              ],
              "label": "manages"
            }
          ]
        },
        {
          "type": "class",
          "value": "BackupData",
          "children": [
            {
              "type": "method",
              "value": "storeBackup()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "retrieveBackup()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "MonitoringSystem monitors health and generates alerts and associates with Server, which has id and status attributes.",
    "PlantUML": "class MonitoringSystem {\n  +monitorHealth(): void\n  +generateAlerts(): void\n}\nclass Server {\n  +id: int\n  +status: String\n}\nMonitoringSystem -- Server : monitors",
    "Model": "I126",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "MonitoringSystem",
          "children": [
            {
              "type": "method",
              "value": "monitorHealth()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "generateAlerts()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Server"
                }
              ],
              "label": "monitors"
            }
          ]
        },
        {
          "type": "class",
          "value": "Server",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "RecoveryPlan contains executePlan and validatePlan methods and includes RecoveryStep, which has stepDescription and executeStep.",
    "PlantUML": "class RecoveryPlan {\n  +executePlan(): void\n  +validatePlan(): void\n}\n\nclass RecoveryStep {\n  +stepDescription: String\n  +executeStep(): void\n}\n\nRecoveryPlan \"1\" *-- \"*\" RecoveryStep : includes",
    "Model": "I126",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "RecoveryPlan",
          "children": [
            {
              "type": "method",
              "value": "executePlan()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "validatePlan()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "RecoveryStep"
                }
              ],
              "label": "includes",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "RecoveryStep",
          "children": [
            {
              "type": "attribute",
              "value": "stepDescription",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "executeStep()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "User structure contains id and role attributes and associates with AccessControl, which provides grantAccess and revokeAccess methods.",
    "PlantUML": "class User {\n  +id: int\n  +role: String\n}\n\nclass AccessControl {\n  +grantAccess(user: User): void\n  +revokeAccess(user: User): void\n}\n\nUser -- AccessControl : manages",
    "Model": "I126",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "role",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "AccessControl"
                }
              ],
              "label": "manages"
            }
          ]
        },
        {
          "type": "class",
          "value": "AccessControl",
          "children": [
            {
              "type": "method",
              "value": "grantAccess(user: User)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "revokeAccess(user: User)",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "AlertSystem offers sendAlert method and includes NotificationChannel, which provides send method and type attribute.",
    "PlantUML": "class AlertSystem {\n  +sendAlert(): void\n}\n\nclass NotificationChannel {\n  +type: String\n  +send(): void\n}\n\nAlertSystem \"1\" *-- \"*\" NotificationChannel : uses",
    "Model": "I126",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AlertSystem",
          "children": [
            {
              "type": "method",
              "value": "sendAlert()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "NotificationChannel"
                }
              ],
              "label": "uses",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "NotificationChannel",
          "children": [
            {
              "type": "attribute",
              "value": "type",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "send()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "DataStorage features location attribute and storeData method. RedundancyManager ensures redundancy and associates with DataStorage.",
    "PlantUML": "class DataStorage {\n    +location: String\n    +storeData(): void\n}\nclass RedundancyManager {\n    +ensureRedundancy(): void\n}\nRedundancyManager -- DataStorage : manages",
    "Model": "I126",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "DataStorage",
          "children": [
            {
              "type": "attribute",
              "value": "location",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "storeData()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "RedundancyManager",
          "children": [
            {
              "type": "method",
              "value": "ensureRedundancy()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "DataStorage"
                }
              ],
              "label": "manages"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "SimulationTest includes runSimulation and validateResults methods and contains Scenario, which has trigger method and description attribute.",
    "PlantUML": "class SimulationTest {\n  +runSimulation(): void\n  +validateResults(): void\n}\n\nclass Scenario {\n  +description: String\n  +trigger(): void\n}\n\nSimulationTest \"1\" *-- \"*\" Scenario : includes",
    "Model": "I126",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "SimulationTest",
          "children": [
            {
              "type": "method",
              "value": "runSimulation()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "validateResults()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Scenario"
                }
              ],
              "label": "includes",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Scenario",
          "children": [
            {
              "type": "attribute",
              "value": "description",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "trigger()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "AuditLog integrates logEvent and retrieveLogs methods and associates with ComplianceChecker, which defines validateCompliance method.",
    "PlantUML": "class AuditLog {\n  +logEvent(event: String): void\n  +retrieveLogs(): void\n}\nclass ComplianceChecker {\n  +validateCompliance(): void\n}\nAuditLog -- ComplianceChecker : validates",
    "Model": "I126",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AuditLog",
          "children": [
            {
              "type": "method",
              "value": "logEvent(event: String)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "retrieveLogs()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "ComplianceChecker"
                }
              ],
              "label": "validates"
            }
          ]
        },
        {
          "type": "class",
          "value": "ComplianceChecker",
          "children": [
            {
              "type": "method",
              "value": "validateCompliance()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "EncryptionService includes encrypt and decrypt methods. BackupData links to EncryptionService.",
    "PlantUML": "class EncryptionService {\n  +encrypt(data: String): String\n  +decrypt(data: String): String\n}\nclass BackupData {}\nBackupData -- EncryptionService : secures",
    "Model": "I126",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "EncryptionService",
          "children": [
            {
              "type": "method",
              "value": "encrypt(data: String)",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "decrypt(data: String)",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "BackupData",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "EncryptionService"
                }
              ],
              "label": "secures"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "PostRecoveryVerification provides verifyDataIntegrity and checkFunctionality methods and links to System, which has id and status attributes.",
    "PlantUML": "class PostRecoveryVerification {\n  +verifyDataIntegrity(): void\n  +checkFunctionality(): void\n}\nclass System {\n  +id: int\n  +status: String\n}\nPostRecoveryVerification -- System : verifies",
    "Model": "I126",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "PostRecoveryVerification",
          "children": [
            {
              "type": "method",
              "value": "verifyDataIntegrity()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "checkFunctionality()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "System"
                }
              ],
              "label": "verifies"
            }
          ]
        },
        {
          "type": "class",
          "value": "System",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "CodeAnalyzer offers analyzeCode method and is a subclass of AnalysisResult, defined by classNames, methodNames, and variableNames attributes.",
    "PlantUML": "class CodeAnalyzer {\n  +analyzeCode(sourceCode: String)\n}\n\nclass AnalysisResult {\n  +classNames: List<String>\n  +methodNames: List<String>\n  +variableNames: List<String>\n}\n\nCodeAnalyzer  <|--  AnalysisResult\n",
    "Model": "I127",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "CodeAnalyzer",
          "children": [
            {
              "type": "method",
              "value": "analyzeCode(sourceCode: String)",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "AnalysisResult"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "AnalysisResult",
          "children": [
            {
              "type": "attribute",
              "value": "classNames",
              "visibility": "+",
              "data_type": "List<String>"
            },
            {
              "type": "attribute",
              "value": "methodNames",
              "visibility": "+",
              "data_type": "List<String>"
            },
            {
              "type": "attribute",
              "value": "variableNames",
              "visibility": "+",
              "data_type": "List<String>"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "SyntaxErrorDetector detects errors and is a subclass of Error, which contains line, column, and message attributes.",
    "PlantUML": "class SyntaxErrorDetector {\n  +detectErrors(sourceCode: String): List<Error>\n}\n\nclass Error {\n  +line: int\n  +column: int\n  +message: String\n}\n\nSyntaxErrorDetector <|-- Error\n",
    "Model": "I127",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "SyntaxErrorDetector",
          "children": [
            {
              "type": "method",
              "value": "detectErrors(sourceCode: String)",
              "visibility": "+",
              "data_type": "List<Error>"
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Error"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Error",
          "children": [
            {
              "type": "attribute",
              "value": "line",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "column",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "message",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The application should assess **code complexity** using **cyclomatic analysis** to identify potentially intricate code segments.",
    "PlantUML": "class ComplexityCalculator {\n  +calculateComplexity: String -> int\n}\n",
    "Model": "I127",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ComplexityCalculator",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "CodeMetrics features linesOfCode, functionCount, and functionSizes attributes.",
    "PlantUML": "class CodeMetrics {\n  +linesOfCode: int\n  +functionCount: int\n  +functionSizes: List<int>\n}\n",
    "Model": "I127",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "CodeMetrics",
          "children": [
            {
              "type": "attribute",
              "value": "linesOfCode",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "functionCount",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "functionSizes",
              "visibility": "+",
              "data_type": "List<int>"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "RefactoringSuggestion contains suggestion and location attributes. RefactoringEngine generates suggestions and is a subclass of RefactoringSuggestion.",
    "PlantUML": "class RefactoringSuggestion {\n  +suggestion: String\n  +location: String\n}\n\nclass RefactoringEngine {\n  +generateSuggestions(sourceCode: String): List<RefactoringSuggestion>\n}\n\nRefactoringEngine  <|-- RefactoringSuggestion\n",
    "Model": "I127",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "RefactoringSuggestion",
          "children": [
            {
              "type": "attribute",
              "value": "suggestion",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "location",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "RefactoringEngine",
          "children": [
            {
              "type": "method",
              "value": "generateSuggestions(sourceCode: String)",
              "visibility": "+",
              "data_type": "List<RefactoringSuggestion>"
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "RefactoringSuggestion"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "CodeStyleChecker includes checkStyle method and is a subclass of FormattingIssue, which features line and message attributes.",
    "PlantUML": "class CodeStyleChecker {\n  +checkStyle(sourceCode: String): FormattingIssue\n}\n\nclass FormattingIssue {\n  +line: int\n  +message: String\n}\n\nCodeStyleChecker <|-- FormattingIssue\n",
    "Model": "I127",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "CodeStyleChecker",
          "children": [
            {
              "type": "method",
              "value": "checkStyle(sourceCode: String)",
              "visibility": "+",
              "data_type": "FormattingIssue"
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "FormattingIssue"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "FormattingIssue",
          "children": [
            {
              "type": "attribute",
              "value": "line",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "message",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "DependencyAnalyzer offers analyzeDependencies method and is a subclass of Dependency, which includes name and isUsed attributes.",
    "PlantUML": "class DependencyAnalyzer {\n  +analyzeDependencies(sourceCode: String): List<Dependency>\n}\n\nclass Dependency {\n  +name: String\n  +isUsed: boolean\n}\n\nDependencyAnalyzer <|-- Dependency\n",
    "Model": "I127",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "DependencyAnalyzer",
          "children": [
            {
              "type": "method",
              "value": "analyzeDependencies(sourceCode: String)",
              "visibility": "+",
              "data_type": "List<Dependency>"
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Dependency"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Dependency",
          "children": [
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "isUsed",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "CodeCloneDetector detects clones and is a subclass of CodeClone, which contains startLine, endLine, and codeSegment attributes.",
    "PlantUML": "class CodeCloneDetector {\n  +detectClones(sourceCode: String): List<CodeClone>\n}\n\nclass CodeClone {\n  +startLine: int\n  +endLine: int\n  +codeSegment: String\n}\n\nCodeCloneDetector <|-- CodeClone\n",
    "Model": "I127",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "CodeCloneDetector",
          "children": [
            {
              "type": "method",
              "value": "detectClones(sourceCode: String)",
              "visibility": "+",
              "data_type": "List<CodeClone>"
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "CodeClone"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "CodeClone",
          "children": [
            {
              "type": "attribute",
              "value": "startLine",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "endLine",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "codeSegment",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "ReportGenerator provides generateReport method and is a subclass of Report, which features content attribute.",
    "PlantUML": "class ReportGenerator {\n  +generateReport(analysisResults: AnalysisResult)\n}\n\nclass Report {\n  +content: String\n}\n\nReportGenerator <|-- Report\n",
    "Model": "I127",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ReportGenerator",
          "children": [
            {
              "type": "method",
              "value": "generateReport(analysisResults: AnalysisResult)",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Report"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Report",
          "children": [
            {
              "type": "attribute",
              "value": "content",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "UserInterface includes uploadCode, showAnalysisResults, and showReport methods and is a subclass of both AnalysisResult and Report.",
    "PlantUML": "class UserInterface {\n  +uploadCode(): void\n  +showAnalysisResults(results: AnalysisResult): void\n  +showReport(report: Report): void\n}\n\nUserInterface <|-- AnalysisResult\nUserInterface <|-- Report\n",
    "Model": "I127",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "UserInterface",
          "children": [
            {
              "type": "method",
              "value": "uploadCode()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "showAnalysisResults(results: AnalysisResult)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "showReport(report: Report)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "AnalysisResult"
                }
              ]
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Report"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "AnalysisResult",
          "children": []
        },
        {
          "type": "class",
          "value": "Report",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "NetworkScanner integrates startScan and stopScan methods.",
    "PlantUML": "class NetworkScanner {\n  +startScan(): void\n  +stopScan(): void\n}\n",
    "Model": "I128",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "NetworkScanner",
          "children": [
            {
              "type": "method",
              "value": "startScan()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "stopScan()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "NetworkDevice provides getDeviceInfo and checkVulnerability methods. NetworkScanner depends on NetworkDevice.",
    "PlantUML": "class NetworkDevice {\n  + getDeviceInfo(): String\n  + checkVulnerability(): Boolean\n}\n\nNetworkScanner --> NetworkDevice : scans\n",
    "Model": "I128",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "NetworkDevice",
          "children": [
            {
              "type": "method",
              "value": "getDeviceInfo()",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "checkVulnerability()",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        },
        {
          "type": "class",
          "value": "NetworkScanner",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "NetworkDevice"
                }
              ],
              "label": "scans"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "VulnerabilityDatabase offers fetchKnownVulnerabilities method. NetworkScanner depends on VulnerabilityDatabase.",
    "PlantUML": "class VulnerabilityDatabase {\n  +fetchKnownVulnerabilities(): List<String>\n}\n\nNetworkScanner --> VulnerabilityDatabase : queries\n",
    "Model": "I128",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "VulnerabilityDatabase",
          "children": [
            {
              "type": "method",
              "value": "fetchKnownVulnerabilities()",
              "visibility": "+",
              "data_type": "List<String>"
            }
          ]
        },
        {
          "type": "class",
          "value": "NetworkScanner",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "VulnerabilityDatabase"
                }
              ],
              "label": "queries"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "VulnerabilityReport includes generateReport and addDeviceInfo methods. NetworkScanner depends on VulnerabilityReport.",
    "PlantUML": "class VulnerabilityReport {\n  +generateReport(): String\n  +addDeviceInfo(device: NetworkDevice): void\n}\n\nNetworkScanner --> VulnerabilityReport : generates\n",
    "Model": "I128",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "VulnerabilityReport",
          "children": [
            {
              "type": "method",
              "value": "generateReport()",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "addDeviceInfo(device: NetworkDevice)",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "NetworkScanner",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "VulnerabilityReport"
                }
              ],
              "label": "generates"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "ScanConfiguration encapsulates setScanParameters and getScanSettings methods. NetworkScanner depends on ScanConfiguration.",
    "PlantUML": "class ScanConfiguration {\n  +setScanParameters(): void\n  +getScanSettings(): String\n}\n\nNetworkScanner --> ScanConfiguration : uses\n",
    "Model": "I128",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ScanConfiguration",
          "children": [
            {
              "type": "method",
              "value": "setScanParameters()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "getScanSettings()",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "NetworkScanner",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "ScanConfiguration"
                }
              ],
              "label": "uses"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "UserInterface provides displayScanResults and startScan methods and depends on NetworkScanner.",
    "PlantUML": "class UserInterface {\n  +displayScanResults(report: VulnerabilityReport): void\n  +startScan(scanConfig: ScanConfiguration): void\n}\n\nUserInterface --> NetworkScanner : controls\n",
    "Model": "I128",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "UserInterface",
          "children": [
            {
              "type": "method",
              "value": "displayScanResults(report: VulnerabilityReport)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "startScan(scanConfig: ScanConfiguration)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "NetworkScanner"
                }
              ],
              "label": "controls"
            }
          ]
        },
        {
          "type": "class",
          "value": "NetworkScanner",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "UserInterface depends on NotificationSystem.",
    "PlantUML": "class NotificationSystem {\n  +sendNotification: message: String : void\n}\n\nUserInterface --> NotificationSystem : triggers\n",
    "Model": "I128",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "NotificationSystem",
          "children": []
        },
        {
          "type": "class",
          "value": "UserInterface",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "NotificationSystem"
                }
              ],
              "label": "triggers"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "ScanScheduler schedules scans and depends on NetworkScanner.",
    "PlantUML": "class ScanScheduler {\n  +scheduleScan(scanConfig: ScanConfiguration): void\n}\nScanScheduler --> NetworkScanner : schedules\n",
    "Model": "I128",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ScanScheduler",
          "children": [
            {
              "type": "method",
              "value": "scheduleScan(scanConfig: ScanConfiguration)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "NetworkScanner"
                }
              ],
              "label": "schedules"
            }
          ]
        },
        {
          "type": "class",
          "value": "NetworkScanner",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "ScanHistory provides getScanHistory method. NetworkScanner depends on ScanHistory.",
    "PlantUML": "class ScanHistory {\n  +getScanHistory(): List<VulnerabilityReport>\n}\n\nNetworkScanner --> ScanHistory : stores\n",
    "Model": "I128",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ScanHistory",
          "children": [
            {
              "type": "method",
              "value": "getScanHistory()",
              "visibility": "+",
              "data_type": "List<VulnerabilityReport>"
            }
          ]
        },
        {
          "type": "class",
          "value": "NetworkScanner",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "ScanHistory"
                }
              ],
              "label": "stores"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "AccessControl includes authorizeUser method. UserInterface relies on AccessControl.",
    "PlantUML": "class AccessControl {\n  +authorizeUser(role: String): Boolean\n}\nUserInterface --> AccessControl : checks\n",
    "Model": "I128",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AccessControl",
          "children": [
            {
              "type": "method",
              "value": "authorizeUser(role: String)",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        },
        {
          "type": "class",
          "value": "UserInterface",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "AccessControl"
                }
              ],
              "label": "checks"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "User offers authenticate method and username and password attributes. User links to ForensicInvestigator, which integrates investigatorId and accessLevel attributes.",
    "PlantUML": "class User {\n  +username: String\n  +password: String\n  +authenticate(): Boolean\n}\n\nclass ForensicInvestigator {\n  +investigatorId: String\n  +accessLevel: String\n}\n\nUser \"1\" -- \"1..*\" ForensicInvestigator : authenticates",
    "Model": "I129",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "username",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "authenticate()",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "ForensicInvestigator"
                }
              ],
              "label": "authenticates",
              "multiplicity1": "1",
              "multiplicity2": "1..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "ForensicInvestigator",
          "children": [
            {
              "type": "attribute",
              "value": "investigatorId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "accessLevel",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "DigitalEvidence integrates evidenceId, deviceType attributes, and dataCollected method. StorageDevice contains deviceId and deviceName attributes and associates with DigitalEvidence.",
    "PlantUML": "class DigitalEvidence {\n    +evidenceId: String\n    +deviceType: String\n    +dataCollected(): Boolean\n}\n\nclass StorageDevice {\n    +deviceId: String\n    +deviceName: String\n}\n\nStorageDevice \"1\" -- \"*\" DigitalEvidence : collects",
    "Model": "I129",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "DigitalEvidence",
          "children": [
            {
              "type": "attribute",
              "value": "evidenceId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "deviceType",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "dataCollected()",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        },
        {
          "type": "class",
          "value": "StorageDevice",
          "children": [
            {
              "type": "attribute",
              "value": "deviceId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "deviceName",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "DigitalEvidence"
                }
              ],
              "label": "collects",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "EvidencePreservation encapsulates preserve method. DigitalEvidence contains evidenceId and links to EvidencePreservation.",
    "PlantUML": "class EvidencePreservation {\n  +preserve(): Boolean\n}\n\nclass DigitalEvidence {\n  +evidenceId: String\n}\n\nDigitalEvidence \"1\" -- \"1\" EvidencePreservation : \"preserved by\"",
    "Model": "I129",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "EvidencePreservation",
          "children": [
            {
              "type": "method",
              "value": "preserve()",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        },
        {
          "type": "class",
          "value": "DigitalEvidence",
          "children": [
            {
              "type": "attribute",
              "value": "evidenceId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "EvidencePreservation"
                }
              ],
              "label": "\"preserved by\"",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "AnalysisTool offers analyze method and toolName attribute and links to DigitalEvidence, which includes evidenceId attribute.",
    "PlantUML": "class AnalysisTool {\n  +toolName: String\n  +analyze(data: DigitalEvidence): String\n}\n\nclass DigitalEvidence {\n  +evidenceId: String\n}\n\nAnalysisTool \"1\" -- \"*\" DigitalEvidence : analyzes",
    "Model": "I129",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AnalysisTool",
          "children": [
            {
              "type": "attribute",
              "value": "toolName",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "analyze(data: DigitalEvidence)",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "DigitalEvidence"
                }
              ],
              "label": "analyzes",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "DigitalEvidence",
          "children": [
            {
              "type": "attribute",
              "value": "evidenceId",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Report includes reportId attribute and generate method and links to AnalysisTool, which integrates toolName.",
    "PlantUML": "class Report {\n  +reportId: String\n  +generate(): String\n}\n\nclass AnalysisTool {\n  +toolName: String\n}\n\nReport \"1\" -- \"1..*\" AnalysisTool : \"generated by\"",
    "Model": "I129",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Report",
          "children": [
            {
              "type": "attribute",
              "value": "reportId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "generate()",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "AnalysisTool"
                }
              ],
              "label": "\"generated by\"",
              "multiplicity1": "1",
              "multiplicity2": "1..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "AnalysisTool",
          "children": [
            {
              "type": "attribute",
              "value": "toolName",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "ChainOfCustody contains timestamp and action attributes and links to DigitalEvidence, which has evidenceId.",
    "PlantUML": "class ChainOfCustody {\n  +timestamp: String\n  +action: String\n}\n\nclass DigitalEvidence {\n  +evidenceId: String\n}\n\nChainOfCustody \"1..*\" -- \"1\" DigitalEvidence : tracks",
    "Model": "I129",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ChainOfCustody",
          "children": [
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "action",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "DigitalEvidence"
                }
              ],
              "label": "tracks",
              "multiplicity1": "1..*",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "DigitalEvidence",
          "children": [
            {
              "type": "attribute",
              "value": "evidenceId",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "SearchEngine integrates search method and associates with DigitalEvidence, which includes evidenceId attribute.",
    "PlantUML": "class SearchEngine {\n  +search(query: String): DigitalEvidence\n}\n\nclass DigitalEvidence {\n  +evidenceId: String\n}\n\nSearchEngine \"1\" -- \"*\" DigitalEvidence : searches",
    "Model": "I129",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "SearchEngine",
          "children": [
            {
              "type": "method",
              "value": "search(query: String)",
              "visibility": "+",
              "data_type": "DigitalEvidence"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "DigitalEvidence"
                }
              ],
              "label": "searches",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "DigitalEvidence",
          "children": [
            {
              "type": "attribute",
              "value": "evidenceId",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "IntegrityCheck offers calculateHash and compareHash methods and links to DigitalEvidence, which contains evidenceId attribute.",
    "PlantUML": "class IntegrityCheck {\n  +calculateHash(data: DigitalEvidence): String\n  +compareHash(evidence: DigitalEvidence): Boolean\n}\n\nclass DigitalEvidence {\n  +evidenceId: String\n}\n\nIntegrityCheck \"1\" -- \"1..*\" DigitalEvidence : verifies",
    "Model": "I129",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "IntegrityCheck",
          "children": [
            {
              "type": "method",
              "value": "calculateHash(data: DigitalEvidence)",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "compareHash(evidence: DigitalEvidence)",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "DigitalEvidence"
                }
              ],
              "label": "verifies",
              "multiplicity1": "1",
              "multiplicity2": "1..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "DigitalEvidence",
          "children": [
            {
              "type": "attribute",
              "value": "evidenceId",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Role includes roleName and permissions attributes and links to User, which contains username.",
    "PlantUML": "class Role {\n  +roleName: String\n  +permissions: String\n}\n\nclass User {\n  +username: String\n}\n\nRole \"1\" -- \"1..*\" User : assigned",
    "Model": "I129",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Role",
          "children": [
            {
              "type": "attribute",
              "value": "roleName",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "permissions",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "assigned",
              "multiplicity1": "1",
              "multiplicity2": "1..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "username",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "AuditLog has logId, action, and timestamp attributes and associates with User, which includes username.",
    "PlantUML": "class AuditLog {\n  +logId: String\n  +action: String\n  +timestamp: String\n}\n\nclass User {\n  +username: String\n}\n\nAuditLog \"1..*\" -- \"1\" User : logged",
    "Model": "I129",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AuditLog",
          "children": [
            {
              "type": "attribute",
              "value": "logId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "action",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "logged",
              "multiplicity1": "1..*",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "username",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "User provides signIn method and email and password attributes and depends on ThirdPartyAuth, which includes signInWithGoogle and signInWithFacebook methods.",
    "PlantUML": "class User {\n  +email: String\n  +password: String\n  +signIn()\n}\n\nclass ThirdPartyAuth {\n  +signInWithGoogle()\n  +signInWithFacebook()\n}\n\nUser --> ThirdPartyAuth : uses\n",
    "Model": "I130",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "email",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "signIn()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "ThirdPartyAuth"
                }
              ],
              "label": "uses"
            }
          ]
        },
        {
          "type": "class",
          "value": "ThirdPartyAuth",
          "children": [
            {
              "type": "method",
              "value": "signInWithGoogle()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "signInWithFacebook()",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Meeting contains meetingID, date, time attributes and addParticipant method. User integrates createMeeting method and depends on Meeting.",
    "PlantUML": "class Meeting {\n  +meetingID : String\n  +date : String\n  +time : String\n  +addParticipant()\n}\n\nclass User {\n  +createMeeting()\n}\n\nUser --> Meeting : creates\n",
    "Model": "I130",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Meeting",
          "children": [
            {
              "type": "attribute",
              "value": "meetingID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "date",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "time",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "addParticipant()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "method",
              "value": "createMeeting()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Meeting"
                }
              ],
              "label": "creates"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "VideoStream provides startStream and stopStream methods. AudioStream includes startStream and stopStream methods. User offers startVideo and startAudio methods and depends on VideoStream and AudioStream.",
    "PlantUML": "class VideoStream {\n  +startStream()\n  +stopStream()\n}\n\nclass AudioStream {\n  +startStream()\n  +stopStream()\n}\n\nclass User {\n  +startVideo()\n  +startAudio()\n}\n\nUser --> VideoStream : initiates\nUser --> AudioStream : initiates\n",
    "Model": "I130",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "VideoStream",
          "children": [
            {
              "type": "method",
              "value": "startStream()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "stopStream()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "AudioStream",
          "children": [
            {
              "type": "method",
              "value": "startStream()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "stopStream()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "method",
              "value": "startVideo()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "startAudio()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "VideoStream"
                }
              ],
              "label": "initiates"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "AudioStream"
                }
              ],
              "label": "initiates"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Participant contains name and isMuted attributes. Meeting offers addParticipant and removeParticipant methods and depends on Participant and User. User provides assignRole method.",
    "PlantUML": "class Participant {\n  +name: String\n  +isMuted: boolean\n}\n\nclass Meeting {\n  +addParticipant()\n  +removeParticipant()\n}\n\nclass User {\n  +assignRole()\n}\n\nMeeting --> Participant : has\nMeeting --> User : \"manages\"\n",
    "Model": "I130",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Participant",
          "children": [
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "isMuted",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        },
        {
          "type": "class",
          "value": "Meeting",
          "children": [
            {
              "type": "method",
              "value": "addParticipant()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "removeParticipant()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Participant"
                }
              ],
              "label": "has"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "\"manages\""
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "method",
              "value": "assignRole()",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "ScreenShare offers startSharing and stopSharing methods. User includes shareScreen method and depends on ScreenShare.",
    "PlantUML": "class ScreenShare {\n  +startSharing()\n  +stopSharing()\n}\n\nclass User {\n  +shareScreen()\n}\n\nUser --> ScreenShare : initiates\n",
    "Model": "I130",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ScreenShare",
          "children": [
            {
              "type": "method",
              "value": "startSharing()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "stopSharing()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "method",
              "value": "shareScreen()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "ScreenShare"
                }
              ],
              "label": "initiates"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "In Chat, methods like sendMessage and receiveMessage are available. The User class has methods sendText and receiveText and relies on Chat.",
    "PlantUML": "class Chat {\n    +sendMessage()\n    +receiveMessage()\n}\n\nclass User {\n    +sendText()\n    +receiveText()\n}\n\nUser --> Chat : uses\n",
    "Model": "I130",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Chat",
          "children": [
            {
              "type": "method",
              "value": "sendMessage()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "receiveMessage()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "method",
              "value": "sendText()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "receiveText()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Chat"
                }
              ],
              "label": "uses"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The Meeting design includes methods startRecording and stopRecording, and depends on Recording which has saveRecording. User manages accessRecording and needs Recording.",
    "PlantUML": "class Meeting {\n  +startRecording()\n  +stopRecording()\n}\n\nclass Recording {\n  +saveRecording()\n}\n\nclass User {\n  +accessRecording()\n}\n\nMeeting --> Recording : produces\nUser --> Recording : views\n",
    "Model": "I130",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Meeting",
          "children": [
            {
              "type": "method",
              "value": "startRecording()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "stopRecording()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Recording"
                }
              ],
              "label": "produces"
            }
          ]
        },
        {
          "type": "class",
          "value": "Recording",
          "children": [
            {
              "type": "method",
              "value": "saveRecording()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "method",
              "value": "accessRecording()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Recording"
                }
              ],
              "label": "views"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "BreakoutRoom features a roomID attribute and addParticipant method. Meeting includes createBreakoutRoom and depends on BreakoutRoom.",
    "PlantUML": "class BreakoutRoom {\n  +roomID : String\n  +addParticipant()\n}\n\nclass Meeting {\n  +createBreakoutRoom()\n}\n\nMeeting --> BreakoutRoom : creates\n",
    "Model": "I130",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "BreakoutRoom",
          "children": [
            {
              "type": "attribute",
              "value": "roomID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "addParticipant()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Meeting",
          "children": [
            {
              "type": "method",
              "value": "createBreakoutRoom()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "BreakoutRoom"
                }
              ],
              "label": "creates"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Meeting contains scheduleMeeting and sendReminder methods, and depends on User. The User class also has scheduleMeeting.",
    "PlantUML": "class Meeting {\n  +scheduleMeeting()\n  +sendReminder()\n}\n\nclass User {\n  +scheduleMeeting()\n}\n\nMeeting --> User : \"scheduled by\"\nMeeting --> User : sends\n",
    "Model": "I130",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Meeting",
          "children": [
            {
              "type": "method",
              "value": "scheduleMeeting()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "sendReminder()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "\"scheduled by\""
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "sends"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "method",
              "value": "scheduleMeeting()",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Meeting handles sendInvite and depends on User, while User includes receiveInvite and depends on Meeting.",
    "PlantUML": "class Meeting {\n  +sendInvite()\n}\n\nclass User {\n  +receiveInvite()\n}\n\nUser --> Meeting : \"invited to\"\nMeeting --> User : sends\n",
    "Model": "I130",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Meeting",
          "children": [
            {
              "type": "method",
              "value": "sendInvite()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "sends"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "method",
              "value": "receiveInvite()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Meeting"
                }
              ],
              "label": "\"invited to\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "User class has email and password attributes, and methods register and authenticate. Authentication includes login and logout methods.",
    "PlantUML": "class User {\n  +email: String\n  +password: String\n  +register()\n  +authenticate()\n}\n\nclass Authentication {\n  +login(User): boolean\n  +logout(User): boolean\n}\n\nUser \"1\" -- \"1\" Authentication : uses\n",
    "Model": "I131",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "email",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "register()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "authenticate()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Authentication"
                }
              ],
              "label": "uses",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Authentication",
          "children": [
            {
              "type": "method",
              "value": "login(User)",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "method",
              "value": "logout(User)",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "ChatRoom is defined by name and description attributes and createRoom method. User has createRoom and email attributes and is linked to ChatRoom.",
    "PlantUML": "class ChatRoom {\n  +name : String\n  +description : String\n  +createRoom()\n}\n\nclass User {\n  +email : String\n  +createRoom(ChatRoom)\n}\n\nUser \"1\" -- \"0..*\" ChatRoom : creates\n",
    "Model": "I131",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ChatRoom",
          "children": [
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "createRoom()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "email",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "createRoom(ChatRoom)",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "ChatRoom"
                }
              ],
              "label": "creates",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Message has content and timestamp attributes. User has an email attribute and is connected to Message. ChatRoom has a name attribute and associates with Message.",
    "PlantUML": "class Message {\n  +content: String\n  +timestamp: Date\n}\n\nclass User {\n  +email: String\n  +sendMessage: void(ChatRoom, Message)\n}\n\nclass ChatRoom {\n  +name: String\n  +receiveMessage: void(Message)\n}\n\nUser \"1\" -- \"0..*\" Message : sends\nChatRoom \"1\" -- \"0..*\" Message : contains\n",
    "Model": "I131",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Message",
          "children": [
            {
              "type": "attribute",
              "value": "content",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "+",
              "data_type": "Date"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "email",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Message"
                }
              ],
              "label": "sends",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "ChatRoom",
          "children": [
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Message"
                }
              ],
              "label": "contains",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "User includes updateStatus method and a status attribute, linked to Status class which has a type attribute.",
    "PlantUML": "class User {\n  +status: String\n  +updateStatus()\n}\n\nclass Status {\n  +type: String\n}\n\nUser \"1\" -- \"1\" Status : has\n",
    "Model": "I131",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "status",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "updateStatus()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Status"
                }
              ],
              "label": "has",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Status",
          "children": [
            {
              "type": "attribute",
              "value": "type",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "File contains upload method, filename, and fileType attributes. ChatRoom has receiveFile method and name attribute, and connects to File. User is linked to File.",
    "PlantUML": "class File {\n    +filename : String\n    +fileType : String\n    +upload()\n}\n\nclass ChatRoom {\n    +name : String\n    +receiveFile(File)\n}\n\nUser \"1\" -- \"0..*\" File : uploads\nChatRoom \"1\" -- \"0..*\" File : contains\n",
    "Model": "I131",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "File",
          "children": [
            {
              "type": "attribute",
              "value": "filename",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "fileType",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "upload()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "ChatRoom",
          "children": [
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "receiveFile(File)",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "File"
                }
              ],
              "label": "contains",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "File"
                }
              ],
              "label": "uploads",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "User features inviteUser method and email attribute, associated with Invitation, which includes sentDate attribute and is linked to User. ChatRoom is connected to Invitation.",
    "PlantUML": "class User {\n  +email\n  +inviteUser(ChatRoom, User)\n}\n\nclass Invitation {\n  +sentDate\n}\n\nUser \"1\" -- \"0..*\" Invitation : sends\nInvitation \"1\" -- \"1\" User : sentTo\nChatRoom \"1\" -- \"0..*\" Invitation : has\n",
    "Model": "I131",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "email",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "inviteUser(ChatRoom, User)",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Invitation"
                }
              ],
              "label": "sends",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Invitation",
          "children": [
            {
              "type": "attribute",
              "value": "sentDate",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "sentTo",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "ChatRoom",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Invitation"
                }
              ],
              "label": "has",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "DirectMessage holds content and timestamp attributes. User has email attribute and sendDirectMessage method, connected to DirectMessage.",
    "PlantUML": "class DirectMessage {\n  +content : String\n  +timestamp : Date\n}\n\nclass User {\n  +email : String\n  +sendDirectMessage(DirectMessage, User)\n}\n\nUser \"1\" -- \"0..*\" DirectMessage : sends\nUser \"1\" -- \"0..*\" DirectMessage : receives\n",
    "Model": "I131",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "DirectMessage",
          "children": [
            {
              "type": "attribute",
              "value": "content",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "+",
              "data_type": "Date"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "email",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "sendDirectMessage(DirectMessage, User)",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "DirectMessage"
                }
              ],
              "label": "sends",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "DirectMessage"
                }
              ],
              "label": "receives",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "User class has receiveNotification method and email attribute, associated with ChatRoom and linked to Message. Message features content and timestamp attributes. ChatRoom includes name and postMessage method and links to Message.",
    "PlantUML": "class User {\n  +email: String\n  +receiveNotification(Message)\n}\n\nclass Message {\n  +content: String\n  +timestamp: Date\n}\n\nclass ChatRoom {\n  +name: String\n  +postMessage(Message)\n}\n\nUser \"1\" -- \"*\" ChatRoom : member\nChatRoom \"1\" -- \"0..*\" Message : contains\nUser \"1\" -- \"0..*\" Message : receives\n\n",
    "Model": "I131",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "email",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "receiveNotification(Message)",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "ChatRoom"
                }
              ],
              "label": "member",
              "multiplicity1": "1",
              "multiplicity2": "*"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Message"
                }
              ],
              "label": "receives",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Message",
          "children": [
            {
              "type": "attribute",
              "value": "content",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "+",
              "data_type": "Date"
            }
          ]
        },
        {
          "type": "class",
          "value": "ChatRoom",
          "children": [
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "postMessage(Message)",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Message"
                }
              ],
              "label": "contains",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Role includes roleName and permissions attributes and is associated with User, which has an email attribute. ChatRoom contains name attribute and assignRole method and links to Role.",
    "PlantUML": "class Role {\n    +roleName : String\n    +permissions : String\n}\n\nclass User {\n    +email : String\n}\n\nclass ChatRoom {\n    +name : String\n    +assignRole(User, Role)\n}\n\nRole \"1\" -- \"0..*\" User : assignedTo\nChatRoom \"1\" -- \"0..*\" Role : has\n",
    "Model": "I131",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Role",
          "children": [
            {
              "type": "attribute",
              "value": "roleName",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "permissions",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "assignedTo",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "email",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "ChatRoom",
          "children": [
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "assignRole(User, Role)",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Role"
                }
              ],
              "label": "has",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Message includes delete method, content and timestamp attributes. User has deleteMessage method and email attribute, linked to Message. Admin, a User subclass, has a role attribute and connects to Message.",
    "PlantUML": "class Message {\n  +content : String\n  +timestamp : Date\n  +delete()\n}\n\nclass User {\n  +email : String\n  +deleteMessage(Message)\n}\n\nclass Admin {\n  +role : String\n}\n\nAdmin  <|--  User\nUser \"1\" -- \"0..*\" Message : deletes\nAdmin \"1\" -- \"0..*\" Message\n",
    "Model": "I131",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Message",
          "children": [
            {
              "type": "attribute",
              "value": "content",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "method",
              "value": "delete()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "email",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "deleteMessage(Message)",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Message"
                }
              ],
              "label": "deletes",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Admin",
          "children": [
            {
              "type": "attribute",
              "value": "role",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ]
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Message"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Campaign has campaignID, name, startDate, endDate attributes and methods createCampaign, editCampaign, and trackCampaign. User features userID, email attribute, and createCampaign method, linked to Campaign.",
    "PlantUML": "class Campaign {\n    +campaignID : String\n    +name : String\n    +startDate : Date\n    +endDate : Date\n    +createCampaign()\n    +editCampaign()\n    +trackCampaign()\n}\nclass User {\n    +userID : String\n    +email : String\n    +createCampaign()\n}\nUser \"1\" -- \"0..*\" Campaign : creates\n",
    "Model": "I132",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Campaign",
          "children": [
            {
              "type": "attribute",
              "value": "campaignID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "startDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "endDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "method",
              "value": "createCampaign()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "editCampaign()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "trackCampaign()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "createCampaign()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Campaign"
                }
              ],
              "label": "creates",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Subscriber contains subscriberID, name, email attributes and methods addSubscriber, editSubscriber, deleteSubscriber, linked to Campaign.",
    "PlantUML": "class Subscriber {\n  +subscriberID: String\n  +name: String\n  +email: String\n  +addSubscriber()\n  +editSubscriber()\n  +deleteSubscriber()\n}\n\nCampaign \"1\" -- \"0..*\" Subscriber : targets\n",
    "Model": "I132",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Subscriber",
          "children": [
            {
              "type": "attribute",
              "value": "subscriberID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "addSubscriber()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "editSubscriber()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "deleteSubscriber()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Campaign",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Subscriber"
                }
              ],
              "label": "targets",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "EmailTemplate includes methods createTemplate, editTemplate, and attributes templateID, subject, and body, associated with Campaign.",
    "PlantUML": "class EmailTemplate {\n  +templateID: String\n  +subject: String\n  +body: String\n  +createTemplate()\n  +editTemplate()\n}\n\nCampaign \"1\" -- \"0..*\" EmailTemplate : uses\n",
    "Model": "I132",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "EmailTemplate",
          "children": [
            {
              "type": "attribute",
              "value": "templateID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "subject",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "body",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "createTemplate()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "editTemplate()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Campaign",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "EmailTemplate"
                }
              ],
              "label": "uses",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Workflow features triggerAction, addCondition, executeWorkflow methods and workflowID and name attributes. User links to Workflow and is associated with Campaign.",
    "PlantUML": "class Workflow {\n  + workflowID: String\n  + name: String\n  + triggerAction()\n  + addCondition()\n  + executeWorkflow()\n}\n\nUser \"1\" -- \"0..*\" Workflow : creates \nUser \"1\" -- \"0..*\" Campaign : automates\n",
    "Model": "I132",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Workflow",
          "children": [
            {
              "type": "attribute",
              "value": "workflowID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "triggerAction()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "addCondition()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "executeWorkflow()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Workflow"
                }
              ],
              "label": "creates",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Campaign"
                }
              ],
              "label": "automates",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Campaign",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "ABTest contains runTest, getResults methods and testID, testName attributes, associated with EmailTemplate. Campaign links to ABTest.",
    "PlantUML": "class ABTest {\n  +testID: String\n  +testName: String\n  +runTest()\n  +getResults()\n}\n\nCampaign \"1\" -- \"0..*\" ABTest : includes\nABTest \"1\" -- \"0..*\" EmailTemplate : tests\n",
    "Model": "I132",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ABTest",
          "children": [
            {
              "type": "attribute",
              "value": "testID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "testName",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "runTest()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "getResults()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "EmailTemplate"
                }
              ],
              "label": "tests",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Campaign",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "ABTest"
                }
              ],
              "label": "includes",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "EmailTemplate",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Report includes generateReport, getMetrics methods and reportID, campaignID, reportDate attributes, linked to Campaign.",
    "PlantUML": "class Report {\n  +reportID : String\n  +campaignID : String\n  +reportDate : Date\n  +generateReport()\n  +getMetrics()\n}\n\nCampaign \"1\" -- \"0..*\" Report : generates\n",
    "Model": "I132",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Report",
          "children": [
            {
              "type": "attribute",
              "value": "reportID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "campaignID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "reportDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "method",
              "value": "generateReport()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "getMetrics()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Campaign",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Report"
                }
              ],
              "label": "generates",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "ListSegment has segmentID and name attributes and createSegment and applyFilters methods. Subscriber is linked to ListSegment, which connects to Campaign.",
    "PlantUML": "class ListSegment {\n  +segmentID : String\n  +name : String\n  +createSegment()\n  +applyFilters()\n}\n\nSubscriber \"1\" -- \"0..*\" ListSegment : belongs\nCampaign \"1\" -- \"0..*\" ListSegment : targets\n",
    "Model": "I132",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ListSegment",
          "children": [
            {
              "type": "attribute",
              "value": "segmentID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "createSegment()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "applyFilters()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Subscriber",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "ListSegment"
                }
              ],
              "label": "belongs",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Campaign",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "ListSegment"
                }
              ],
              "label": "targets",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Personalization contains fields, values, and applyPersonalization method. EmailTemplate and Subscriber are linked to Personalization.",
    "PlantUML": "class Personalization {\n  +field : String\n  +value : String\n  +applyPersonalization()\n}\n\nEmailTemplate \"1\" -- \"0..*\" Personalization : includes\nSubscriber \"1\" -- \"0..*\" Personalization : stores\n",
    "Model": "I132",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Personalization",
          "children": [
            {
              "type": "attribute",
              "value": "field",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "value",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "applyPersonalization()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "EmailTemplate",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Personalization"
                }
              ],
              "label": "includes",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Subscriber",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Personalization"
                }
              ],
              "label": "stores",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Scheduler features scheduleID, scheduleTime attributes and scheduleEmail, cancelSchedule methods, associated with Campaign.",
    "PlantUML": "class Scheduler {\n  +scheduleID : String\n  +scheduleTime : Date\n  +scheduleEmail()\n  +cancelSchedule()\n}\n\nCampaign \"1\" -- \"0..*\" Scheduler : scheduled\n",
    "Model": "I132",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Scheduler",
          "children": [
            {
              "type": "attribute",
              "value": "scheduleID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "scheduleTime",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "method",
              "value": "scheduleEmail()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "cancelSchedule()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Campaign",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Scheduler"
                }
              ],
              "label": "scheduled",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Delivery includes sendEmail, handleFailure methods and deliveryID and status attributes. Campaign is linked to Delivery, Subscriber connects to Delivery.",
    "PlantUML": "class Delivery {\n  +deliveryID : String\n  +status : String\n  +sendEmail()\n  +handleFailure()\n}\n\nCampaign \"1\" -- \"0..*\" Delivery : triggers\nSubscriber \"1\" -- \"0..*\" Delivery : receives\n",
    "Model": "I132",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Delivery",
          "children": [
            {
              "type": "attribute",
              "value": "deliveryID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "sendEmail()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "handleFailure()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Campaign",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Delivery"
                }
              ],
              "label": "triggers",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Subscriber",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Delivery"
                }
              ],
              "label": "receives",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Document contains a create method.",
    "PlantUML": "class Document {\n  +create()\n}\n\nDocument <|-- TextEditor \n",
    "Model": "I133",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Document",
          "children": [
            {
              "type": "method",
              "value": "create()",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "TextEditor extends Document and includes editText attribute.",
    "PlantUML": "class TextEditor {\n  +editText: String\n}\n\nTextEditor <|-- Document\n",
    "Model": "I133",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "TextEditor",
          "children": [
            {
              "type": "attribute",
              "value": "editText",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Document"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Document",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Document includes save method and relies on FileSystem, which has saveDocument method.",
    "PlantUML": "class Document {\n  +save()\n}\n\nclass FileSystem {\n  +saveDocument(document: Document)\n}\n\nDocument --> FileSystem : saved\n",
    "Model": "I133",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Document",
          "children": [
            {
              "type": "method",
              "value": "save()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "FileSystem"
                }
              ],
              "label": "saved"
            }
          ]
        },
        {
          "type": "class",
          "value": "FileSystem",
          "children": [
            {
              "type": "method",
              "value": "saveDocument(document: Document)",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Document features open method, and FileSystem depends on Document.",
    "PlantUML": "class Document {\n    +open()\n}\n\nFileSystem --> Document : opened from\n",
    "Model": "I133",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Document",
          "children": [
            {
              "type": "method",
              "value": "open()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "FileSystem",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Document"
                }
              ],
              "label": "opened from"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "TextEditor includes formatText method.",
    "PlantUML": "class TextEditor {\n  +formatText(style: String)\n}\nTextEditor  <|-- Document \n",
    "Model": "I133",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "TextEditor",
          "children": [
            {
              "type": "method",
              "value": "formatText(style: String)",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Image has insert method. Document class contains insertImage method and depends on Image.",
    "PlantUML": "class Image {\n  +insert(imagePath: String)\n}\n\nclass Document {\n  +insertImage(image: Image)\n}\n\nDocument --> Image : contains\n",
    "Model": "I133",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Image",
          "children": [
            {
              "type": "method",
              "value": "insert(imagePath: String)",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Document",
          "children": [
            {
              "type": "method",
              "value": "insertImage(image: Image)",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Image"
                }
              ],
              "label": "contains"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Document includes spellCheck method and depends on SpellChecker, which has checkSpelling method.",
    "PlantUML": "class Document {\n  +spellCheck()\n}\n\nclass SpellChecker {\n  +checkSpelling(document: Document)\n}\n\nDocument --> SpellChecker : checked\n",
    "Model": "I133",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Document",
          "children": [
            {
              "type": "method",
              "value": "spellCheck()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "SpellChecker"
                }
              ],
              "label": "checked"
            }
          ]
        },
        {
          "type": "class",
          "value": "SpellChecker",
          "children": [
            {
              "type": "method",
              "value": "checkSpelling(document: Document)",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Document features trackChanges method and depends on ChangeTracker, defined by recordChange method.",
    "PlantUML": "class Document {\n  +trackChanges()\n}\n\nclass ChangeTracker {\n  +recordChange(document: Document)\n}\n\nDocument --> ChangeTracker : tracked\n",
    "Model": "I133",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Document",
          "children": [
            {
              "type": "method",
              "value": "trackChanges()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "ChangeTracker"
                }
              ],
              "label": "tracked"
            }
          ]
        },
        {
          "type": "class",
          "value": "ChangeTracker",
          "children": [
            {
              "type": "method",
              "value": "recordChange(document: Document)",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Table design integrates insertTable method. Document includes insertTable method and depends on Table.",
    "PlantUML": "class Table {\n  +insertTable(rows: int, columns: int)\n}\n\nclass Document {\n  +insertTable(table: Table)\n}\n\nDocument --> Table : contains\n",
    "Model": "I133",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Table",
          "children": [
            {
              "type": "method",
              "value": "insertTable(rows: int, columns: int)",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Document",
          "children": [
            {
              "type": "method",
              "value": "insertTable(table: Table)",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Table"
                }
              ],
              "label": "contains"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Document includes export method and depends on Exporter, which contains exportDocument method.",
    "PlantUML": "class Document {\n  +export(format: String)\n}\n\nclass Exporter {\n  +exportDocument(document: Document, format: String)\n}\n\nDocument --> Exporter : exported",
    "Model": "I133",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Document",
          "children": [
            {
              "type": "method",
              "value": "export(format: String)",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Exporter"
                }
              ],
              "label": "exported"
            }
          ]
        },
        {
          "type": "class",
          "value": "Exporter",
          "children": [
            {
              "type": "method",
              "value": "exportDocument(document: Document, format: String)",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "User features login, register methods and username, password, email attributes, linked to Account, which includes updateAccount method and userID and createdAt attributes.",
    "PlantUML": "class User {\n  - username: String\n  - password: String\n  - email: String\n  + login(): Boolean\n  + register(): Boolean\n}\n\nclass Account {\n  - userID: String\n  - createdAt: Date\n  + updateAccount(): Boolean\n}\n\nUser \"1\" -- \"1\" Account : manages",
    "Model": "I134",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "username",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "login()",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "method",
              "value": "register()",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Account"
                }
              ],
              "label": "manages",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Account",
          "children": [
            {
              "type": "attribute",
              "value": "userID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "createdAt",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "method",
              "value": "updateAccount()",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Presentation has addSlide method and title, description, createdAt attributes. It links to Slide, which contains slideNumber and content attributes and addContent method.",
    "PlantUML": "class Presentation {\n  - title: String\n  - description: String\n  - createdAt: Date\n  + addSlide(): Boolean\n}\n\nclass Slide {\n  - slideNumber: Int\n  - content: String\n  + addContent(): Boolean\n}\n\nPresentation \"1\" -- \"*\" Slide : contains",
    "Model": "I134",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Presentation",
          "children": [
            {
              "type": "attribute",
              "value": "title",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "createdAt",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "method",
              "value": "addSlide()",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Slide"
                }
              ],
              "label": "contains",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Slide",
          "children": [
            {
              "type": "attribute",
              "value": "slideNumber",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "content",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "addContent()",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Presentation supports editTitle method and has title and description attributes, linked to Slide.",
    "PlantUML": "class Presentation {\n  - title: String\n  - description: String\n  + editTitle(newTitle: String): Boolean\n}\n\n\n\nPresentation \"1\" -- \"*\" Slide : contains",
    "Model": "I134",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Presentation",
          "children": [
            {
              "type": "attribute",
              "value": "title",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "editTitle(newTitle: String)",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Slide"
                }
              ],
              "label": "contains",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Slide",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Presentation features title and save, load methods, associated with Storage, which includes location attribute and saveData, loadData methods.",
    "PlantUML": "class Presentation {\n  + title: String\n  + save(): Boolean\n  + load(): Boolean\n}\n\nclass Storage {\n  - location: String\n  + saveData(): Boolean\n  + loadData(): Boolean\n}\n\nPresentation \"1\" -- \"1\" Storage : stores",
    "Model": "I134",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Presentation",
          "children": [
            {
              "type": "attribute",
              "value": "title",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "save()",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "method",
              "value": "load()",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Storage"
                }
              ],
              "label": "stores",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Storage",
          "children": [
            {
              "type": "attribute",
              "value": "location",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "saveData()",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "method",
              "value": "loadData()",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Slide contains slideNumber, content attributes and addMedia method, linked to Media, which has mediaType, path attributes and display method.",
    "PlantUML": "class Slide {\n  - slideNumber: Int\n  - content: String\n  + addMedia(mediaType: String): Boolean\n}\n\nclass Media {\n  - mediaType: String\n  - path: String\n  + display(): Boolean\n}\n\nSlide \"1\" -- \"*\" Media : contains",
    "Model": "I134",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Slide",
          "children": [
            {
              "type": "attribute",
              "value": "slideNumber",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "content",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "addMedia(mediaType: String)",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Media"
                }
              ],
              "label": "contains",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Media",
          "children": [
            {
              "type": "attribute",
              "value": "mediaType",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "path",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "display()",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Slide features slideNumber, content attributes and addTransition method, connected to Transition, which contains effect, duration attributes and applyEffect method.",
    "PlantUML": "class Slide {\n  - slideNumber: Int\n  - content: String\n  + addTransition(effect: String): Boolean\n}\n\nclass Transition {\n  - effect: String\n  - duration: Int\n  + applyEffect(): Boolean\n}\n\nSlide \"1\" -- \"1\" Transition : uses",
    "Model": "I134",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Slide",
          "children": [
            {
              "type": "attribute",
              "value": "slideNumber",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "content",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "addTransition(effect: String)",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Transition"
                }
              ],
              "label": "uses",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Transition",
          "children": [
            {
              "type": "attribute",
              "value": "effect",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "duration",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "method",
              "value": "applyEffect()",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "User includes username and email attributes and links to Presentation, which features title and addCollaborator method.",
    "PlantUML": "class User {\n  - username: String\n  - email: String\n}\n\nclass Presentation {\n  - title: String\n  + addCollaborator(user: User): Boolean\n}\n\nUser \"*\" -- \"*\" Presentation : collaborates",
    "Model": "I134",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "username",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Presentation"
                }
              ],
              "label": "collaborates",
              "multiplicity1": "*",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Presentation",
          "children": [
            {
              "type": "attribute",
              "value": "title",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "addCollaborator(user: User)",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Presentation contains startPresentation method and title attribute, linked to Display, which encapsulates resolution and type attributes and connect method.",
    "PlantUML": "class Presentation {\n  - title: String\n  + startPresentation(): Boolean\n}\n\nclass Display {\n  - resolution: String\n  - type: String\n  + connect(): Boolean\n}\n\nPresentation \"1\" -- \"1\" Display : \"shown on\"",
    "Model": "I134",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Presentation",
          "children": [
            {
              "type": "attribute",
              "value": "title",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "startPresentation()",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Display"
                }
              ],
              "label": "\"shown on\"",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Display",
          "children": [
            {
              "type": "attribute",
              "value": "resolution",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "type",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "connect()",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Presentation includes title and export method, linked to Exporter, which has format attribute and convert method.",
    "PlantUML": "class Presentation {\n  - title: String\n  + export(format: String): Boolean\n}\n\nclass Exporter {\n  - format: String\n  + convert(): Boolean\n}\n\nPresentation \"1\" -- \"1\" Exporter : uses",
    "Model": "I134",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Presentation",
          "children": [
            {
              "type": "attribute",
              "value": "title",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "export(format: String)",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Exporter"
                }
              ],
              "label": "uses",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Exporter",
          "children": [
            {
              "type": "attribute",
              "value": "format",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "convert()",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Template contains applyTemplate method and name and style attributes. Presentation has chooseTemplate method and title attribute, associated with Template.",
    "PlantUML": "class Template {\n  - name: String\n  - style: String\n  + applyTemplate(): Boolean\n}\n\nclass Presentation {\n  - title: String\n  + chooseTemplate(template: Template): Boolean\n}\n\nPresentation \"1\" -- \"1\" Template : uses",
    "Model": "I134",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Template",
          "children": [
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "style",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "applyTemplate()",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        },
        {
          "type": "class",
          "value": "Presentation",
          "children": [
            {
              "type": "attribute",
              "value": "title",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "chooseTemplate(template: Template)",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Template"
                }
              ],
              "label": "uses",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "User includes register and login methods and userID, username, email, password attributes, depending on Session, which features sessionID, userID attributes and startSession, endSession methods.",
    "PlantUML": "class User {\n  - userID: int\n  - username: String\n  - email: String\n  - password: String\n  + register(): boolean\n  + login(): boolean\n}\nclass Session {\n  - sessionID: int\n  - userID: int\n  + startSession(): void\n  + endSession(): void\n}\nUser \"1\" --> \"*\" Session : owns",
    "Model": "I135",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userID",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "username",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "register()",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "method",
              "value": "login()",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Session"
                }
              ],
              "label": "owns",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Session",
          "children": [
            {
              "type": "attribute",
              "value": "sessionID",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "userID",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "method",
              "value": "startSession()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "endSession()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Note encapsulates noteID, title, content, creationDate attributes and createNote, editNote methods. User depends on Note.",
    "PlantUML": "class Note {\n  - noteID: int\n  - title: String\n  - content: String\n  - creationDate: Date\n  + createNote(): void\n  + editNote(): void\n}\nUser \"1\" --> \"0..*\" Note : creates",
    "Model": "I135",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Note",
          "children": [
            {
              "type": "attribute",
              "value": "noteID",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "content",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "creationDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "method",
              "value": "createNote()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "editNote()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Note"
                }
              ],
              "label": "creates",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Folder has folderID, folderName attributes and createFolder method, depending on Note.",
    "PlantUML": "class Folder {\n  - folderID: int\n  - folderName: String\n  + createFolder(): void\n}\nFolder \"1\" --> \"0..*\" Note : contains",
    "Model": "I135",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Folder",
          "children": [
            {
              "type": "attribute",
              "value": "folderID",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "folderName",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "createFolder()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Note"
                }
              ],
              "label": "contains",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Note",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Tag includes tagID, tagName attributes and addTag method. Note depends on Tag.",
    "PlantUML": "class Tag {\n  - tagID: int\n  - tagName: String\n  + addTag(): void\n}\nNote \"1\" --> \"0..*\" Tag : \"tagged with\"",
    "Model": "I135",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Tag",
          "children": [
            {
              "type": "attribute",
              "value": "tagID",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "tagName",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "addTag()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Note",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Tag"
                }
              ],
              "label": "\"tagged with\"",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Search features searchByTitle, searchByContent, searchByTag methods. Note depends on Search.",
    "PlantUML": "class Search {\n  + searchByTitle(title: String): List<Note>\n  + searchByContent(content: String): List<Note>\n  + searchByTag(tag: String): List<Note>\n}\nNote \"*\" --> \"*\" Search : \"searched by\"",
    "Model": "I135",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Search",
          "children": [
            {
              "type": "method",
              "value": "searchByTitle(title: String)",
              "visibility": "+",
              "data_type": "List<Note>"
            },
            {
              "type": "method",
              "value": "searchByContent(content: String)",
              "visibility": "+",
              "data_type": "List<Note>"
            },
            {
              "type": "method",
              "value": "searchByTag(tag: String)",
              "visibility": "+",
              "data_type": "List<Note>"
            }
          ]
        },
        {
          "type": "class",
          "value": "Note",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Search"
                }
              ],
              "label": "\"searched by\"",
              "multiplicity1": "*",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Share contains shareID, noteID, sharedWithUserID attributes and shareNote method. Note depends on Share and User depends on Share.",
    "PlantUML": "class Share {\n  - shareID: int\n  - noteID: int\n  - sharedWithUserID: int\n  + shareNote(): void\n}\nNote \"1\" --> \"*\" Share : \"shared with\"\nUser \"1\" --> \"*\" Share : shares",
    "Model": "I135",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Share",
          "children": [
            {
              "type": "attribute",
              "value": "shareID",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "noteID",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "sharedWithUserID",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "method",
              "value": "shareNote()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Note",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Share"
                }
              ],
              "label": "\"shared with\"",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Share"
                }
              ],
              "label": "shares",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Device has deviceID, deviceName attributes and syncNotes method, depending on Note. User depends on Device.",
    "PlantUML": "class Device {\n  - deviceID: int\n  - deviceName: String\n  + syncNotes(): void\n}\nUser \"1\" --> \"*\" Device : syncs\nDevice \"1\" --> \"*\" Note : syncs",
    "Model": "I135",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Device",
          "children": [
            {
              "type": "attribute",
              "value": "deviceID",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "deviceName",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "syncNotes()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Note"
                }
              ],
              "label": "syncs",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Device"
                }
              ],
              "label": "syncs",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Note",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "CloudStorage includes backupNotes method and storageID and storageName attributes. Note depends on CloudStorage.",
    "PlantUML": "class CloudStorage {\n  - storageID: int\n  - storageName: String\n  + backupNotes(): void\n}\nNote \"*\" --> \"1\" CloudStorage : \"backed up to\"",
    "Model": "I135",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "CloudStorage",
          "children": [
            {
              "type": "attribute",
              "value": "storageID",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "storageName",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "backupNotes()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Note",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "CloudStorage"
                }
              ],
              "label": "\"backed up to\"",
              "multiplicity1": "*",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Preferences integrates theme and notificationsEnabled attributes and updatePreferences method. User depends on Preferences.",
    "PlantUML": "class Preferences {\n  - theme: String\n  - notificationsEnabled: boolean\n  + updatePreferences(): void\n}\nUser \"1\" --> \"0..*\" Preferences : has",
    "Model": "I135",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Preferences",
          "children": [
            {
              "type": "attribute",
              "value": "theme",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "notificationsEnabled",
              "visibility": "-",
              "data_type": "boolean"
            },
            {
              "type": "method",
              "value": "updatePreferences()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Preferences"
                }
              ],
              "label": "has",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Trash features moveToTrash and restoreNote methods and trashID attribute. Note depends on Trash.",
    "PlantUML": "class Trash {\n  - trashID: int\n  + moveToTrash(): void\n  + restoreNote(): void\n}\nNote \"1\" --> \"0..1\" Trash : \"moved to\"",
    "Model": "I135",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Trash",
          "children": [
            {
              "type": "attribute",
              "value": "trashID",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "method",
              "value": "moveToTrash()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "restoreNote()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Note",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Trash"
                }
              ],
              "label": "\"moved to\"",
              "multiplicity1": "1",
              "multiplicity2": "0..1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "User is defined by userID, name, email, and password attributes.",
    "PlantUML": "class User {\n  +userID: String\n  +name: String\n  +email: String\n  +password: String\n}\n",
    "Model": "I136",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Appointment has appointmentID, startTime, endTime, description, and location attributes. User is associated with Appointment.",
    "PlantUML": "class Appointment {\n  +appointmentID: String\n  +startTime: DateTime\n  +endTime: DateTime\n  +description: String\n  +location: String\n}\nUser \"1\" -- \"0..*\" Appointment : has\n",
    "Model": "I136",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Appointment",
          "children": [
            {
              "type": "attribute",
              "value": "appointmentID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "startTime",
              "visibility": "+",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "endTime",
              "visibility": "+",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "location",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Appointment"
                }
              ],
              "label": "has",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Event includes eventID, title, description, startTime, endTime, and location attributes. User is linked to Event.",
    "PlantUML": "class Event {\n  +eventID: String\n  +title: String\n  +description: String\n  +startTime: DateTime\n  +endTime: DateTime\n  +location: String\n}\n\nUser \"1\" -- \"0..*\" Event : organizes\n",
    "Model": "I136",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Event",
          "children": [
            {
              "type": "attribute",
              "value": "eventID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "startTime",
              "visibility": "+",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "endTime",
              "visibility": "+",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "location",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Event"
                }
              ],
              "label": "organizes",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Reminder contains reminderID and timeBefore attribute, linked to Appointment.",
    "PlantUML": "class Reminder {\n  +reminderID: String\n  +timeBefore: Duration\n}\n\nAppointment \"1\" -- \"1..*\" Reminder : has\n",
    "Model": "I136",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Reminder",
          "children": [
            {
              "type": "attribute",
              "value": "reminderID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timeBefore",
              "visibility": "+",
              "data_type": "Duration"
            }
          ]
        },
        {
          "type": "class",
          "value": "Appointment",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Reminder"
                }
              ],
              "label": "has",
              "multiplicity1": "1",
              "multiplicity2": "1..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "RecurrencePattern has patternID, recurrenceType, and interval attributes. Appointment associates with RecurrencePattern.",
    "PlantUML": "class RecurrencePattern {\n  +patternID: String\n  +recurrenceType: String\n  +interval: int\n}\n\nAppointment \"1\" -- \"1\" RecurrencePattern : follows\n",
    "Model": "I136",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "RecurrencePattern",
          "children": [
            {
              "type": "attribute",
              "value": "patternID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "recurrenceType",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "interval",
              "visibility": "+",
              "data_type": "int"
            }
          ]
        },
        {
          "type": "class",
          "value": "Appointment",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "RecurrencePattern"
                }
              ],
              "label": "follows",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Role features roleID and roleName attributes. User links to Role.",
    "PlantUML": "class Role {\n  +roleID: String\n  +roleName: String\n}\n\nUser \"1\" -- \"1\" Role : has\n",
    "Model": "I136",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Role",
          "children": [
            {
              "type": "attribute",
              "value": "roleID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "roleName",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Role"
                }
              ],
              "label": "has",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "ConflictChecker includes checkConflict method. User associates with Appointment, which links to ConflictChecker.",
    "PlantUML": "class ConflictChecker {\n  +checkConflict(appointment: Appointment): Boolean\n}\n\nUser \"1\" -- \"0..*\" Appointment : schedules\nAppointment \"1\" -- \"1..*\" ConflictChecker : checks\n",
    "Model": "I136",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ConflictChecker",
          "children": [
            {
              "type": "method",
              "value": "checkConflict(appointment: Appointment)",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Appointment"
                }
              ],
              "label": "schedules",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Appointment",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "ConflictChecker"
                }
              ],
              "label": "checks",
              "multiplicity1": "1",
              "multiplicity2": "1..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "CalendarView contains viewID and viewType attributes. User links to CalendarView.",
    "PlantUML": "class CalendarView {\n  +viewID: String\n  +viewType: String\n}\n\nUser \"1\" -- \"0..*\" CalendarView : uses\n",
    "Model": "I136",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "CalendarView",
          "children": [
            {
              "type": "attribute",
              "value": "viewID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "viewType",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "CalendarView"
                }
              ],
              "label": "uses",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "AppointmentEditor has editAppointment method. User associates with AppointmentEditor, linked to AppointmentEditor by Appointment.",
    "PlantUML": "class AppointmentEditor {\n  +editAppointment(appointment: Appointment): Boolean\n}\n\nUser \"1\" -- \"1\" AppointmentEditor : uses\nAppointment \"1\" -- \"1\" AppointmentEditor : modifies\n",
    "Model": "I136",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AppointmentEditor",
          "children": [
            {
              "type": "method",
              "value": "editAppointment(appointment: Appointment)",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "AppointmentEditor"
                }
              ],
              "label": "uses",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Appointment",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "AppointmentEditor"
                }
              ],
              "label": "modifies",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "AppointmentShare integrates shareID and sharedWith attributes. Appointment and User associate with AppointmentShare.",
    "PlantUML": "class AppointmentShare {\n  +shareID: String\n  +sharedWith: User\n}\n\nAppointment \"1\" -- \"0..*\" AppointmentShare : shared\nUser \"1\" -- \"0..*\" AppointmentShare : receives\n",
    "Model": "I136",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AppointmentShare",
          "children": [
            {
              "type": "attribute",
              "value": "shareID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "sharedWith",
              "visibility": "+",
              "data_type": "User"
            }
          ]
        },
        {
          "type": "class",
          "value": "Appointment",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "AppointmentShare"
                }
              ],
              "label": "shared",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "AppointmentShare"
                }
              ],
              "label": "receives",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "PRCampaign has campaignId, campaignName, startDate, and endDate attributes, needing MediaContact, which includes contactId, name, phoneNumber, and email attributes.",
    "PlantUML": "class PRCampaign {\n  +campaignId: String\n  +campaignName: String\n  +startDate: Date\n  +endDate: Date\n}\n\nclass MediaContact {\n  +contactId: String\n  +name: String\n  +phoneNumber: String\n  +email: String\n}\n\nPRCampaign \"1\" --> \"*\" MediaContact : manages\n",
    "Model": "I137",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "PRCampaign",
          "children": [
            {
              "type": "attribute",
              "value": "campaignId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "campaignName",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "startDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "endDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "MediaContact"
                }
              ],
              "label": "manages",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "MediaContact",
          "children": [
            {
              "type": "attribute",
              "value": "contactId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "phoneNumber",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "CommunicationLog includes logId, date, and details attributes. MediaContact depends on CommunicationLog.",
    "PlantUML": "class CommunicationLog {\n  +logId: String\n  +date: Date\n  +details: String\n}\n\nMediaContact \"1\" --> \"*\" CommunicationLog : has\n",
    "Model": "I137",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "CommunicationLog",
          "children": [
            {
              "type": "attribute",
              "value": "logId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "date",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "details",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "MediaContact",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "CommunicationLog"
                }
              ],
              "label": "has",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Content contains contentId, type, and contentDetails attributes. PRCampaign depends on Content.",
    "PlantUML": "class Content {\n  +contentId: String\n  +type: String\n  +contentDetails: String\n}\n\nPRCampaign \"1\" --> \"*\" Content : contains\n",
    "Model": "I137",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Content",
          "children": [
            {
              "type": "attribute",
              "value": "contentId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "type",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "contentDetails",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "PRCampaign",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Content"
                }
              ],
              "label": "contains",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "CampaignPerformance has performanceId, impressions, reach, and clicks attributes. PRCampaign depends on CampaignPerformance.",
    "PlantUML": "class CampaignPerformance {\n  +performanceId: String\n  +impressions: Int\n  +reach: Int\n  +clicks: Int\n}\n\nPRCampaign \"1\" --> \"1\" CampaignPerformance: tracks\n",
    "Model": "I137",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "CampaignPerformance",
          "children": [
            {
              "type": "attribute",
              "value": "performanceId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "impressions",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "reach",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "clicks",
              "visibility": "+",
              "data_type": "int"
            }
          ]
        },
        {
          "type": "class",
          "value": "PRCampaign",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "CampaignPerformance"
                }
              ],
              "label": "tracks",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Report contains reportId, dateGenerated, and contentPerformance attributes. CampaignPerformance links to Report.",
    "PlantUML": "class Report {\n  +reportId: String\n  +dateGenerated: Date\n  +contentPerformance: String\n}\n\nCampaignPerformance \"1\" --> \"*\" Report: generates\n",
    "Model": "I137",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Report",
          "children": [
            {
              "type": "attribute",
              "value": "reportId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "dateGenerated",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "contentPerformance",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "CampaignPerformance",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Report"
                }
              ],
              "label": "generates",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "User design integrates userId, userName, and role attributes. User depends on Role, which contains roleId and roleName attributes.",
    "PlantUML": "class User {\n  +userId: String\n  +userName: String\n  +role: String\n}\n\nclass Role {\n  +roleId: String\n  +roleName: String\n}\n\nUser \"1\" --> \"1\" Role : has\n",
    "Model": "I137",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "userName",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "role",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Role"
                }
              ],
              "label": "has",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Role",
          "children": [
            {
              "type": "attribute",
              "value": "roleId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "roleName",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Approval has approvalId, status, and approvedBy attributes. PRCampaign needs Approval.",
    "PlantUML": "class Approval {\n  +approvalId: String\n  +status: String\n  +approvedBy: String\n}\n\nPRCampaign \"1\" --> \"*\" Approval : undergoes\n",
    "Model": "I137",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Approval",
          "children": [
            {
              "type": "attribute",
              "value": "approvalId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "approvedBy",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "PRCampaign",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Approval"
                }
              ],
              "label": "undergoes",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Event features eventId, eventName, and eventDate attributes. PRCampaign depends on Event.",
    "PlantUML": "class Event {\n  +eventId: String\n  +eventName: String\n  +eventDate: Date\n}\n\nPRCampaign \"1\" --> \"*\" Event : organizes\n",
    "Model": "I137",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Event",
          "children": [
            {
              "type": "attribute",
              "value": "eventId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "eventName",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "eventDate",
              "visibility": "+",
              "data_type": "Date"
            }
          ]
        },
        {
          "type": "class",
          "value": "PRCampaign",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Event"
                }
              ],
              "label": "organizes",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "SocialMediaPost includes postId, platform, and postContent attributes. PRCampaign depends on SocialMediaPost.",
    "PlantUML": "class SocialMediaPost {\n  +postId: String\n  +platform: String\n  +postContent: String\n}\n\nPRCampaign \"1\" --> \"*\" SocialMediaPost : \"links to\"\n",
    "Model": "I137",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "SocialMediaPost",
          "children": [
            {
              "type": "attribute",
              "value": "postId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "platform",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "postContent",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "PRCampaign",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "SocialMediaPost"
                }
              ],
              "label": "\"links to\"",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Budget contains budgetId, allocatedAmount, and spentAmount attributes. PRCampaign depends on Budget.",
    "PlantUML": "class Budget {\n  +budgetId: String\n  +allocatedAmount: Double\n  +spentAmount: Double\n}\n\nPRCampaign \"1\" --> \"1\" Budget: has\n",
    "Model": "I137",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Budget",
          "children": [
            {
              "type": "attribute",
              "value": "budgetId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "allocatedAmount",
              "visibility": "+",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "spentAmount",
              "visibility": "+",
              "data_type": "double"
            }
          ]
        },
        {
          "type": "class",
          "value": "PRCampaign",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Budget"
                }
              ],
              "label": "has",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "User structure includes userId, username, and password attributes, relying on AuthSystem, which has register and login methods.",
    "PlantUML": "class User {\n  + userId: String\n  + username: String\n  + password: String\n}\n\nclass AuthSystem {\n  + register(user: User): void\n  + login(username: String, password: String): User\n}\n\nUser --> AuthSystem : interacts",
    "Model": "I138",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "username",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "AuthSystem"
                }
              ],
              "label": "interacts"
            }
          ]
        },
        {
          "type": "class",
          "value": "AuthSystem",
          "children": [
            {
              "type": "method",
              "value": "register(user: User)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "login(username: String, password: String)",
              "visibility": "+",
              "data_type": "User"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Role structure features roleId and roleName attributes and is linked to UserRole. UserRole design integrates userId and roleId attributes. User associates with UserRole.",
    "PlantUML": "class Role {\n  + roleId: String\n  + roleName: String\n}\n\nclass UserRole {\n  + userId: String\n  + roleId: String\n}\n\nUser \"1\" -- \"1..*\" UserRole : assigned\nRole \"1\" -- \"1..*\" UserRole : links",
    "Model": "I138",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Role",
          "children": [
            {
              "type": "attribute",
              "value": "roleId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "roleName",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "UserRole"
                }
              ],
              "label": "links",
              "multiplicity1": "1",
              "multiplicity2": "1..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "UserRole",
          "children": [
            {
              "type": "attribute",
              "value": "userId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "roleId",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "UserRole"
                }
              ],
              "label": "assigned",
              "multiplicity1": "1",
              "multiplicity2": "1..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Teacher design includes teacherId and name attributes, linked to Course, which has courseId, courseName, and description attributes.",
    "PlantUML": "class Teacher {\n  + teacherId: String\n  + name: String\n}\n\nclass Course {\n  + courseId: String\n  + courseName: String\n  + description: String\n}\n\nTeacher \"1\" -- \"*\" Course : creates",
    "Model": "I138",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Teacher",
          "children": [
            {
              "type": "attribute",
              "value": "teacherId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Course"
                }
              ],
              "label": "creates",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Course",
          "children": [
            {
              "type": "attribute",
              "value": "courseId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "courseName",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Student structure has studentId and name attributes and links to Enrollment, which includes enrollmentId, studentId, and courseId attributes. Course links to Enrollment.",
    "PlantUML": "class Student {\n  + studentId: String\n  + name: String\n}\n\nclass Enrollment {\n  + enrollmentId: String\n  + studentId: String\n  + courseId: String\n}\n\nclass Course {\n}\n\nCourse \"1\" -- \"*\" Enrollment : \"enrolled by\"\nStudent \"1\" -- \"*\" Enrollment : participates",
    "Model": "I138",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Student",
          "children": [
            {
              "type": "attribute",
              "value": "studentId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Enrollment"
                }
              ],
              "label": "participates",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Enrollment",
          "children": [
            {
              "type": "attribute",
              "value": "enrollmentId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "studentId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "courseId",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Course",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Enrollment"
                }
              ],
              "label": "\"enrolled by\"",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Material contains materialId, type, and content attributes. Course associates with Material.",
    "PlantUML": "class Material {\n  + materialId: String\n  + type: String\n  + content: String\n}\n\nCourse \"1\" -- \"*\" Material : includes",
    "Model": "I138",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Material",
          "children": [
            {
              "type": "attribute",
              "value": "materialId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "type",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "content",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Course",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Material"
                }
              ],
              "label": "includes",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Quiz includes quizId and questions attributes, associated with Grade, which has gradeId, studentId, quizId, and marks attributes. Course associates with Quiz. Student links to Grade.",
    "PlantUML": "class Quiz {\n  + quizId: String\n  + questions: List<String>\n}\n\nclass Grade {\n  + gradeId: String\n  + studentId: String\n  + quizId: String\n  + marks: Double\n}\n\nCourse \"1\" -- \"*\" Quiz : offers\nStudent \"1\" -- \"*\" Grade : receives\nQuiz \"1\" -- \"*\" Grade : produces",
    "Model": "I138",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Quiz",
          "children": [
            {
              "type": "attribute",
              "value": "quizId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "questions",
              "visibility": "+",
              "data_type": "List<String>"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Grade"
                }
              ],
              "label": "produces",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Grade",
          "children": [
            {
              "type": "attribute",
              "value": "gradeId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "studentId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "quizId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "marks",
              "visibility": "+",
              "data_type": "double"
            }
          ]
        },
        {
          "type": "class",
          "value": "Course",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Quiz"
                }
              ],
              "label": "offers",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Student",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Grade"
                }
              ],
              "label": "receives",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Forum has forumId, courseId, and posts attributes. Course links to Forum. User associates with Forum.",
    "PlantUML": "class Forum {\n  + forumId: String\n  + courseId: String\n  + posts: List<String>\n}\n\nCourse \"1\" -- \"1\" Forum : hosts\nUser \"1\" -- \"*\" Forum : participates",
    "Model": "I138",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Forum",
          "children": [
            {
              "type": "attribute",
              "value": "forumId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "courseId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "posts",
              "visibility": "+",
              "data_type": "List<String>"
            }
          ]
        },
        {
          "type": "class",
          "value": "Course",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Forum"
                }
              ],
              "label": "hosts",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Forum"
                }
              ],
              "label": "participates",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Progress contains progressId, studentId, courseId, and completionPercentage attributes. Student links to Progress, which Course connects to.",
    "PlantUML": "class Progress {\n  + progressId: String\n  + studentId: String\n  + courseId: String\n  + completionPercentage: Double\n}\n\nStudent \"1\" -- \"*\" Progress : tracks\nCourse \"1\" -- \"*\" Progress : reports",
    "Model": "I138",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Progress",
          "children": [
            {
              "type": "attribute",
              "value": "progressId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "studentId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "courseId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "completionPercentage",
              "visibility": "+",
              "data_type": "double"
            }
          ]
        },
        {
          "type": "class",
          "value": "Student",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Progress"
                }
              ],
              "label": "tracks",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Course",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Progress"
                }
              ],
              "label": "reports",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Notification features notificationId, message, and userId attributes. User associates with Notification.",
    "PlantUML": "class Notification {\n  + notificationId: String\n  + message: String\n  + userId: String\n}\n\nclass User {}\n\nUser \"1\" -- \"*\" Notification : receives",
    "Model": "I138",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Notification",
          "children": [
            {
              "type": "attribute",
              "value": "notificationId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "message",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "userId",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Notification"
                }
              ],
              "label": "receives",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Admin is defined by adminId and privileges attributes, associated with Course and linked to User. Admin also associates with Role.",
    "PlantUML": "class Admin {\n  + adminId: String\n  + privileges: List<String>\n}\n\nAdmin \"1\" -- \"0..*\" Course : manages\nAdmin \"1\" -- \"0..*\" User : oversees\nAdmin \"1\" -- \"0..*\" Role : configures",
    "Model": "I138",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Admin",
          "children": [
            {
              "type": "attribute",
              "value": "adminId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "privileges",
              "visibility": "+",
              "data_type": "List<String>"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Course"
                }
              ],
              "label": "manages",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "oversees",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Role"
                }
              ],
              "label": "configures",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Course",
          "children": []
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        },
        {
          "type": "class",
          "value": "Role",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "User includes username, password, and email attributes.",
    "PlantUML": "class User {\n  username : String\n  password : String\n  email : String\n}\n",
    "Model": "I139",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "username",
              "visibility": "",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Game contains gameTitle, genre, and developer attributes. User links to Game.",
    "PlantUML": "class Game {\n  gameTitle : String\n  genre : String\n  developer : String\n}\n\nclass User { }\n\nUser \"1\" -- \"*\" Game :  access\n",
    "Model": "I139",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Game",
          "children": [
            {
              "type": "attribute",
              "value": "gameTitle",
              "visibility": "",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "genre",
              "visibility": "",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "developer",
              "visibility": "",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Game"
                }
              ],
              "label": "access",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Progress has level, score, and lastPlayed attributes, linked to Game and associated with User.",
    "PlantUML": "class Progress {\n  level : int\n  score : int\n  lastPlayed : Date\n}\n\nUser \"1\" -- \"*\" Progress : tracks\nProgress \"1\" -- \"1\" Game : belongs\n",
    "Model": "I139",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Progress",
          "children": [
            {
              "type": "attribute",
              "value": "level",
              "visibility": "",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "score",
              "visibility": "",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "lastPlayed",
              "visibility": "",
              "data_type": "Date"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Game"
                }
              ],
              "label": "belongs",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Progress"
                }
              ],
              "label": "tracks",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Game",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Team contains teamName and teamRank attributes.",
    "PlantUML": "class Team {\n  teamName : String\n  teamRank : int\n}\n\nUser *--* Team : belongs\nTeam \"1\" --* Game : plays\n",
    "Model": "I139",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Team",
          "children": [
            {
              "type": "attribute",
              "value": "teamName",
              "visibility": "",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "teamRank",
              "visibility": "",
              "data_type": "int"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Purchase includes itemName, price, and purchaseDate attributes, associated with Game and User.",
    "PlantUML": "class Purchase {\n  itemName : String\n  price : double\n  purchaseDate : Date\n}\n\nUser \"1\" -- \"*\" Purchase : makes\nPurchase \"*\" -- \"1\" Game : for\n",
    "Model": "I139",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Purchase",
          "children": [
            {
              "type": "attribute",
              "value": "itemName",
              "visibility": "",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "price",
              "visibility": "",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "purchaseDate",
              "visibility": "",
              "data_type": "Date"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Game"
                }
              ],
              "label": "for",
              "multiplicity1": "*",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Purchase"
                }
              ],
              "label": "makes",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Game",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Leaderboard contains leaderboardType and rank attributes, associated with Game and linked to User.",
    "PlantUML": "class Leaderboard {\n  leaderboardType : String\n  rank : int\n}\n\nUser \"1\" -- \"*\" Leaderboard : \"appears in\"\nLeaderboard \"1\" -- \"*\" Game : \"associated with\"\n",
    "Model": "I139",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Leaderboard",
          "children": [
            {
              "type": "attribute",
              "value": "leaderboardType",
              "visibility": "",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "rank",
              "visibility": "",
              "data_type": "int"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Game"
                }
              ],
              "label": "\"associated with\"",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Leaderboard"
                }
              ],
              "label": "\"appears in\"",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Game",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Review has reviewText, rating, and reviewDate attributes, associated with Game and linked to User.",
    "PlantUML": "class Review {\n  reviewText : String\n  rating : int\n  reviewDate : Date\n}\n\nUser \"1\" -- \"*\" Review : writes\nReview \"*\" -- \"1\" Game : for\n",
    "Model": "I139",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Review",
          "children": [
            {
              "type": "attribute",
              "value": "reviewText",
              "visibility": "",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "rating",
              "visibility": "",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "reviewDate",
              "visibility": "",
              "data_type": "Date"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Game"
                }
              ],
              "label": "for",
              "multiplicity1": "*",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Review"
                }
              ],
              "label": "writes",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Game",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Achievement features achievementName, description, and achievedDate attributes. User is associated with Achievement.",
    "PlantUML": "class Achievement {\n  achievementName : String\n  description : String\n  achievedDate : Date\n}\n\nclass User {}\n\nclass Game {}\n\nUser \"1\" -- \"*\" Achievement : earns\nAchievement \"*\" -- \"1\" Game ",
    "Model": "I139",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Achievement",
          "children": [
            {
              "type": "attribute",
              "value": "achievementName",
              "visibility": "",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "achievedDate",
              "visibility": "",
              "data_type": "Date"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Achievement"
                }
              ],
              "label": "earns",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Game",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "FriendsList contains friends. User is linked to FriendsList.",
    "PlantUML": "class FriendsList {\n  friends : List<User>\n}\n\nclass User\n\nUser \"1\" -- \"1\" FriendsList : has\n",
    "Model": "I139",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "FriendsList",
          "children": [
            {
              "type": "attribute",
              "value": "friends",
              "visibility": "",
              "data_type": "List<User>"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "FriendsList"
                }
              ],
              "label": "has",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Recommendation has recommendationReason attribute, linked to Game and associated with User.",
    "PlantUML": "class Recommendation {\n    recommendationReason : String\n}\n\nUser \"1\" -- \"*\" Recommendation : receives\nRecommendation \"*\" -- \"1\" Game : for\n",
    "Model": "I139",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Recommendation",
          "children": [
            {
              "type": "attribute",
              "value": "recommendationReason",
              "visibility": "",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Game"
                }
              ],
              "label": "for",
              "multiplicity1": "*",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Recommendation"
                }
              ],
              "label": "receives",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Game",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "User class contains id and name and depends on LocationTracker, which has currentLocation and trackLocation features.",
    "PlantUML": "class User {\n  +id: String\n  +name: String\n}\n\nclass LocationTracker {\n  +currentLocation: String\n  +trackLocation(): void\n}\n\nUser --> LocationTracker : requests\n",
    "Model": "I140",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "LocationTracker"
                }
              ],
              "label": "requests"
            }
          ]
        },
        {
          "type": "class",
          "value": "LocationTracker",
          "children": [
            {
              "type": "attribute",
              "value": "currentLocation",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "trackLocation()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Map structure includes mapData attribute and renderMap method. LocationTracker depends on Map.",
    "PlantUML": "class Map {\n  +mapData: String\n  +renderMap(): void\n}\n\nLocationTracker --> Map : provides\n",
    "Model": "I140",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Map",
          "children": [
            {
              "type": "attribute",
              "value": "mapData",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "renderMap()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "LocationTracker",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Map"
                }
              ],
              "label": "provides"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "RouteCalculator design integrates calculateShortestRoute method. Map depends on RouteCalculator.",
    "PlantUML": "class RouteCalculator {\n  +calculateShortestRoute(start: String, end: String): String\n}\nMap --> RouteCalculator : requests\n",
    "Model": "I140",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "RouteCalculator",
          "children": [
            {
              "type": "method",
              "value": "calculateShortestRoute(start: String, end: String)",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Map",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "RouteCalculator"
                }
              ],
              "label": "requests"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Navigation design includes turnByTurnInstructions and generateInstructions methods. RouteCalculator depends on Navigation.",
    "PlantUML": "class Navigation {\n  +turnByTurnInstructions: String\n  +generateInstructions(route: String): void\n}\n\nRouteCalculator --> Navigation : provides\n",
    "Model": "I140",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Navigation",
          "children": [
            {
              "type": "attribute",
              "value": "turnByTurnInstructions",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "generateInstructions(route: String)",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "RouteCalculator",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Navigation"
                }
              ],
              "label": "provides"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "TransportationMode structure features modeType and getMode method. User depends on TransportationMode. RouteCalculator depends on TransportationMode.",
    "PlantUML": "class TransportationMode {\n  +modeType: String\n  +getMode(): String\n}\n\nUser --> TransportationMode : selects\nRouteCalculator --> TransportationMode : uses\n",
    "Model": "I140",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "TransportationMode",
          "children": [
            {
              "type": "attribute",
              "value": "modeType",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "getMode()",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "TransportationMode"
                }
              ],
              "label": "selects"
            }
          ]
        },
        {
          "type": "class",
          "value": "RouteCalculator",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "TransportationMode"
                }
              ],
              "label": "uses"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The POI class includes a searchPOI method. The Map relies on POI, and the User depends on POI.",
    "PlantUML": "class POI {\n  +searchPOI(query: String): List<String>\n}\n\nMap --> POI : queries\nUser --> POI : searches\n",
    "Model": "I140",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "POI",
          "children": [
            {
              "type": "method",
              "value": "searchPOI(query: String)",
              "visibility": "+",
              "data_type": "List<String>"
            }
          ]
        },
        {
          "type": "class",
          "value": "Map",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "POI"
                }
              ],
              "label": "queries"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "POI"
                }
              ],
              "label": "searches"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "SavedLocations is accessed via retrieveLocations. The User requires SavedLocations.",
    "PlantUML": "class SavedLocations {\n  +saveLocation: location: String : void\n  +retrieveLocations: List<String>\n}\nUser --> SavedLocations : manages\n",
    "Model": "I140",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "SavedLocations",
          "children": [
            {
              "type": "attribute",
              "value": "retrieveLocations",
              "visibility": "+",
              "data_type": "List<String>"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "SavedLocations"
                }
              ],
              "label": "manages"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "TrafficUpdate features getTrafficInfo. LocationTracker relies on TrafficUpdate, as does Navigation.",
    "PlantUML": "class TrafficUpdate {\n  +getTrafficInfo(location: String): String\n}\n\nLocationTracker --> TrafficUpdate : provides\nNavigation --> TrafficUpdate : displays\n",
    "Model": "I140",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "TrafficUpdate",
          "children": [
            {
              "type": "method",
              "value": "getTrafficInfo(location: String)",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "LocationTracker",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "TrafficUpdate"
                }
              ],
              "label": "provides"
            }
          ]
        },
        {
          "type": "class",
          "value": "Navigation",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "TrafficUpdate"
                }
              ],
              "label": "displays"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "VoiceAssistant contains processVoiceInput and provideVoiceOutput methods. Both User and Navigation depend on VoiceAssistant.",
    "PlantUML": "class VoiceAssistant {\n  +processVoiceInput(command: String): void\n  +provideVoiceOutput(instructions: String): void\n}\n\nUser --> VoiceAssistant : uses\nNavigation --> VoiceAssistant : sends \n",
    "Model": "I140",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "VoiceAssistant",
          "children": [
            {
              "type": "method",
              "value": "processVoiceInput(command: String)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "provideVoiceOutput(instructions: String)",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "VoiceAssistant"
                }
              ],
              "label": "uses"
            }
          ]
        },
        {
          "type": "class",
          "value": "Navigation",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "VoiceAssistant"
                }
              ],
              "label": "sends"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "ETA offers a calculateETA method. RouteCalculator and User both depend on ETA.",
    "PlantUML": "class ETA {\n  +calculateETA(start: String, end: String, mode: String): String\n}\n\nRouteCalculator --> ETA : calculates\nUser --> ETA : requests\n",
    "Model": "I140",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ETA",
          "children": [
            {
              "type": "method",
              "value": "calculateETA(start: String, end: String, mode: String)",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "RouteCalculator",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "ETA"
                }
              ],
              "label": "calculates"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "ETA"
                }
              ],
              "label": "requests"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "WeatherData includes attributes like source, timestamp, temperature, humidity, and windSpeed, and depends on DataSource. DataSource has attributes name and type.",
    "PlantUML": "class WeatherData {\n  +source: String\n  +timestamp: Date\n  +temperature: Float\n  +humidity: Float\n  +windSpeed: Float\n}\n\nclass DataSource {\n  +name: String\n  +type: String\n}\n\nWeatherData --> DataSource : \"collected from\"",
    "Model": "I141",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "WeatherData",
          "children": [
            {
              "type": "attribute",
              "value": "source",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "temperature",
              "visibility": "+",
              "data_type": "float"
            },
            {
              "type": "attribute",
              "value": "humidity",
              "visibility": "+",
              "data_type": "float"
            },
            {
              "type": "attribute",
              "value": "windSpeed",
              "visibility": "+",
              "data_type": "float"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "DataSource"
                }
              ],
              "label": "\"collected from\""
            }
          ]
        },
        {
          "type": "class",
          "value": "DataSource",
          "children": [
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "type",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "AnomalyProcessor provides detectAnomalies functionality. WeatherData depends on AnomalyProcessor.",
    "PlantUML": "class AnomalyProcessor {\n  +detectAnomalies(weatherData: WeatherData): List<String>\n}\n\nWeatherData --> AnomalyProcessor : \"processed by\"",
    "Model": "I141",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AnomalyProcessor",
          "children": [
            {
              "type": "method",
              "value": "detectAnomalies(weatherData: WeatherData)",
              "visibility": "+",
              "data_type": "List<String>"
            }
          ]
        },
        {
          "type": "class",
          "value": "WeatherData",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "AnomalyProcessor"
                }
              ],
              "label": "\"processed by\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Forecast includes date, temperature, and precipitation attributes. ForecastGenerator has a generateForecast method and relies on Forecast and WeatherData.",
    "PlantUML": "class Forecast {\n  +date: Date\n  +temperature: Float\n  +precipitation: Float\n}\nclass ForecastGenerator {\n  +generateForecast(data: WeatherData): List<Forecast>\n}\nForecastGenerator --> Forecast : creates\nForecastGenerator --> WeatherData : uses",
    "Model": "I141",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Forecast",
          "children": [
            {
              "type": "attribute",
              "value": "date",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "temperature",
              "visibility": "+",
              "data_type": "float"
            },
            {
              "type": "attribute",
              "value": "precipitation",
              "visibility": "+",
              "data_type": "float"
            }
          ]
        },
        {
          "type": "class",
          "value": "ForecastGenerator",
          "children": [
            {
              "type": "method",
              "value": "generateForecast(data: WeatherData)",
              "visibility": "+",
              "data_type": "List<Forecast>"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Forecast"
                }
              ],
              "label": "creates"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "WeatherData"
                }
              ],
              "label": "uses"
            }
          ]
        },
        {
          "type": "class",
          "value": "WeatherData",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Alert includes attributes alertType, message, and timestamp. It depends on User and requires Forecast. User has userId and contactInfo attributes.",
    "PlantUML": "class Alert {\n  +alertType: String\n  +message: String\n  +timestamp: Date\n}\nclass User {\n  +userId: String\n  +contactInfo: String\n}\nAlert --> User : sent\nAlert --> Forecast : triggers",
    "Model": "I141",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Alert",
          "children": [
            {
              "type": "attribute",
              "value": "alertType",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "message",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "sent"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Forecast"
                }
              ],
              "label": "triggers"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "contactInfo",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Forecast",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "NotificationPreference holds userId and preferenceType. It depends on Alert, and User depends on NotificationPreference.",
    "PlantUML": "class NotificationPreference {\n  +userId: String\n  +preferenceType: String\n}\n\nUser --> NotificationPreference : has\nNotificationPreference --> Alert : controls",
    "Model": "I141",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "NotificationPreference",
          "children": [
            {
              "type": "attribute",
              "value": "userId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "preferenceType",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Alert"
                }
              ],
              "label": "controls"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "NotificationPreference"
                }
              ],
              "label": "has"
            }
          ]
        },
        {
          "type": "class",
          "value": "Alert",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "WeatherDisplay provides displayCurrentData and is dependent on WeatherData.",
    "PlantUML": "class WeatherDisplay {\n  +displayCurrentData(data: WeatherData): void\n}\nclass WeatherData {\n}\nWeatherData --> WeatherDisplay : \"displayed by\"",
    "Model": "I141",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "WeatherDisplay",
          "children": [
            {
              "type": "method",
              "value": "displayCurrentData(data: WeatherData)",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "WeatherData",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "WeatherDisplay"
                }
              ],
              "label": "\"displayed by\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "WeatherArchive features a storeData method, with WeatherData depending on it.",
    "PlantUML": "class WeatherArchive {\n  +storeData(data: WeatherData): void\n}\nWeatherData --> WeatherArchive : \"stored in\"",
    "Model": "I141",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "WeatherArchive",
          "children": [
            {
              "type": "method",
              "value": "storeData(data: WeatherData)",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "WeatherData",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "WeatherArchive"
                }
              ],
              "label": "\"stored in\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Location has latitude and longitude attributes. Both WeatherData and Forecast require Location.",
    "PlantUML": "class Location {\n  +latitude: Float\n  +longitude: Float\n}\nWeatherData --> Location : \"related to\"\nForecast --> Location : \"specific to\"",
    "Model": "I141",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Location",
          "children": [
            {
              "type": "attribute",
              "value": "latitude",
              "visibility": "+",
              "data_type": "float"
            },
            {
              "type": "attribute",
              "value": "longitude",
              "visibility": "+",
              "data_type": "float"
            }
          ]
        },
        {
          "type": "class",
          "value": "WeatherData",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Location"
                }
              ],
              "label": "\"related to\""
            }
          ]
        },
        {
          "type": "class",
          "value": "Forecast",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Location"
                }
              ],
              "label": "\"specific to\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Language includes languageCode and languageName. MultilingualSupport depends on Language and offers a translate method.",
    "PlantUML": "class Language {\n  +languageCode: String\n  +languageName: String\n}\nclass MultilingualSupport {\n  +translate(content: String, lang: Language): String\n}\nMultilingualSupport --> Language : supports",
    "Model": "I141",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Language",
          "children": [
            {
              "type": "attribute",
              "value": "languageCode",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "languageName",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "MultilingualSupport",
          "children": [
            {
              "type": "method",
              "value": "translate(content: String, lang: Language)",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Language"
                }
              ],
              "label": "supports"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "WeatherAPI offers getData and getForecast methods. WeatherData and Forecast depend on WeatherAPI.",
    "PlantUML": "class WeatherAPI {\n  +getData(): WeatherData\n  +getForecast(): List<Forecast>\n}\nWeatherData --> WeatherAPI : \"exposed through\"\nForecast --> WeatherAPI : \"exposed through\"",
    "Model": "I141",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "WeatherAPI",
          "children": [
            {
              "type": "method",
              "value": "getData()",
              "visibility": "+",
              "data_type": "WeatherData"
            },
            {
              "type": "method",
              "value": "getForecast()",
              "visibility": "+",
              "data_type": "List<Forecast>"
            }
          ]
        },
        {
          "type": "class",
          "value": "WeatherData",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "WeatherAPI"
                }
              ],
              "label": "\"exposed through\""
            }
          ]
        },
        {
          "type": "class",
          "value": "Forecast",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "WeatherAPI"
                }
              ],
              "label": "\"exposed through\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Pilot contains pilotId and selectAircraft methods, and depends on Aircraft, which has aircraftId and type attributes.",
    "PlantUML": "class Pilot {\n  +pilotId: String\n  +selectAircraft(aircraft: Aircraft): void\n}\n\nclass Aircraft {\n  +aircraftId: String\n  +type: String\n}\n\nPilot --> Aircraft : selects",
    "Model": "I142",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Pilot",
          "children": [
            {
              "type": "attribute",
              "value": "pilotId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "selectAircraft(aircraft: Aircraft)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Aircraft"
                }
              ],
              "label": "selects"
            }
          ]
        },
        {
          "type": "class",
          "value": "Aircraft",
          "children": [
            {
              "type": "attribute",
              "value": "aircraftId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "type",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "FlightParameters include speed, altitude, and fuelCapacity attributes and are part of Aircraft.",
    "PlantUML": "class FlightParameters {\n  +speed: Double\n  +altitude: Double\n  +fuelCapacity: Double\n}\nAircraft *-- FlightParameters : defines",
    "Model": "I142",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "FlightParameters",
          "children": [
            {
              "type": "attribute",
              "value": "speed",
              "visibility": "+",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "altitude",
              "visibility": "+",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "fuelCapacity",
              "visibility": "+",
              "data_type": "double"
            }
          ]
        },
        {
          "type": "class",
          "value": "Aircraft",
          "children": [
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "FlightParameters"
                }
              ],
              "label": "defines"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Weather provides getWeatherReport method and attributes like temperature, windSpeed, and visibility. Aircraft relies on Weather.",
    "PlantUML": "class Weather {\n  +temperature: Double\n  +windSpeed: Double\n  +visibility: Double\n  +getWeatherReport(): String\n}\nAircraft --> Weather : \"affected by\"",
    "Model": "I142",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Weather",
          "children": [
            {
              "type": "attribute",
              "value": "temperature",
              "visibility": "+",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "windSpeed",
              "visibility": "+",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "visibility",
              "visibility": "+",
              "data_type": "double"
            },
            {
              "type": "method",
              "value": "getWeatherReport()",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Aircraft",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Weather"
                }
              ],
              "label": "\"affected by\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "CockpitDashboard features displayFlightData and is required by Aircraft.",
    "PlantUML": "class CockpitDashboard {\n  +displayFlightData(flightData: String): void\n}\nAircraft --> CockpitDashboard : \"monitored by\"",
    "Model": "I142",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "CockpitDashboard",
          "children": [
            {
              "type": "method",
              "value": "displayFlightData(flightData: String)",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Aircraft",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "CockpitDashboard"
                }
              ],
              "label": "\"monitored by\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "FlightScenario includes departure and destination attributes and a setScenario method. Both Pilot and Aircraft depend on FlightScenario.",
    "PlantUML": "class FlightScenario {\n  +departure: String\n  +destination: String\n  +setScenario(departure: String, destination: String): void\n}\n\nPilot --> FlightScenario : configures\nAircraft --> FlightScenario : \"assigned to\"",
    "Model": "I142",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "FlightScenario",
          "children": [
            {
              "type": "attribute",
              "value": "departure",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "destination",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "setScenario(departure: String, destination: String)",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Pilot",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "FlightScenario"
                }
              ],
              "label": "configures"
            }
          ]
        },
        {
          "type": "class",
          "value": "Aircraft",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "FlightScenario"
                }
              ],
              "label": "\"assigned to\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "SimulationLog includes logData method and logId attribute. Aircraft needs SimulationLog, and Pilot depends on it.",
    "PlantUML": "class SimulationLog {\n  +logId: String\n  +logData(data: String): void\n}\n\nAircraft --> SimulationLog : records\nPilot --> SimulationLog : accesses",
    "Model": "I142",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "SimulationLog",
          "children": [
            {
              "type": "attribute",
              "value": "logId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "logData(data: String)",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Aircraft",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "SimulationLog"
                }
              ],
              "label": "records"
            }
          ]
        },
        {
          "type": "class",
          "value": "Pilot",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "SimulationLog"
                }
              ],
              "label": "accesses"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "EmergencyScenario offers triggerEmergency and has a scenarioType attribute. Both Aircraft and Pilot require EmergencyScenario.",
    "PlantUML": "class EmergencyScenario {\n  +scenarioType: String\n  +triggerEmergency(): void\n}\n\nAircraft --> EmergencyScenario : simulates\nPilot --> EmergencyScenario : manages",
    "Model": "I142",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "EmergencyScenario",
          "children": [
            {
              "type": "attribute",
              "value": "scenarioType",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "triggerEmergency()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Aircraft",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "EmergencyScenario"
                }
              ],
              "label": "simulates"
            }
          ]
        },
        {
          "type": "class",
          "value": "Pilot",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "EmergencyScenario"
                }
              ],
              "label": "manages"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "NavigationSystem has a getCurrentPosition method. Aircraft depends on NavigationSystem.",
    "PlantUML": "class NavigationSystem {\n  +getCurrentPosition(): String\n}\nAircraft --> NavigationSystem : integrates",
    "Model": "I142",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "NavigationSystem",
          "children": [
            {
              "type": "method",
              "value": "getCurrentPosition()",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Aircraft",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "NavigationSystem"
                }
              ],
              "label": "integrates"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "SimulationTeam includes addMember method and teamId attribute. Pilot needs SimulationTeam.",
    "PlantUML": "class SimulationTeam {\n  +teamId: String\n  +addMember(pilot: Pilot): void\n}\n\nclass Pilot{}\n\nPilot --> SimulationTeam : \"part of\"",
    "Model": "I142",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "SimulationTeam",
          "children": [
            {
              "type": "attribute",
              "value": "teamId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "addMember(pilot: Pilot)",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Pilot",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "SimulationTeam"
                }
              ],
              "label": "\"part of\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "PerformanceEvaluator offers evaluatePilot method. Pilot depends on it, and SimulationLog relies on PerformanceEvaluator.",
    "PlantUML": "class PerformanceEvaluator {\n  +evaluatePilot(pilot: Pilot): String\n}\n\nPilot --> PerformanceEvaluator : \"evaluated by\"\nSimulationLog --> PerformanceEvaluator : \"used by\"",
    "Model": "I142",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "PerformanceEvaluator",
          "children": [
            {
              "type": "method",
              "value": "evaluatePilot(pilot: Pilot)",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Pilot",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "PerformanceEvaluator"
                }
              ],
              "label": "\"evaluated by\""
            }
          ]
        },
        {
          "type": "class",
          "value": "SimulationLog",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "PerformanceEvaluator"
                }
              ],
              "label": "\"used by\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "User has username, password attributes, and a login method. User requires VoiceRecognition and FacialRecognition. VoiceRecognition provides authenticateByVoice, and FacialRecognition offers authenticateByFace.",
    "PlantUML": "class User {\n  +username: String\n  +password: String\n  +login(): boolean\n}\n\nclass VoiceRecognition {\n  +authenticateByVoice(): boolean\n}\n\nclass FacialRecognition {\n  +authenticateByFace(): boolean\n}\n\nUser --> VoiceRecognition\nUser --> FacialRecognition\n",
    "Model": "I143",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "username",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "login()",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "VoiceRecognition"
                }
              ]
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "FacialRecognition"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "VoiceRecognition",
          "children": [
            {
              "type": "method",
              "value": "authenticateByVoice()",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        },
        {
          "type": "class",
          "value": "FacialRecognition",
          "children": [
            {
              "type": "method",
              "value": "authenticateByFace()",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "TextToSpeech includes text and convertToSpeech method. ScreenContent contains text and depends on TextToSpeech.",
    "PlantUML": "class TextToSpeech {\n  +text: String\n  +convertToSpeech(text: String): void\n}\n\nclass ScreenContent {\n  +text: String\n}\n\nScreenContent --> TextToSpeech\n",
    "Model": "I143",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "TextToSpeech",
          "children": [
            {
              "type": "attribute",
              "value": "text",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "convertToSpeech(text: String)",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "ScreenContent",
          "children": [
            {
              "type": "attribute",
              "value": "text",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "TextToSpeech"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "SpeechToText provides convertSpeechToText. UserInput includes text and depends on SpeechToText.",
    "PlantUML": "class SpeechToText {\n    + convertSpeechToText(): String\n}\n\nclass UserInput {\n    + text: String\n}\n\nUserInput --> SpeechToText\n",
    "Model": "I143",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "SpeechToText",
          "children": [
            {
              "type": "method",
              "value": "convertSpeechToText()",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "UserInput",
          "children": [
            {
              "type": "attribute",
              "value": "text",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "SpeechToText"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "UI is defined by theme attribute and setTheme method, and depends on User. User contains preferredTheme attribute.",
    "PlantUML": "class UI {\n  +theme: String\n  +setTheme(theme: String): void\n}\n\nclass User {\n  +preferredTheme: String\n}\n\nUI --> User\n",
    "Model": "I143",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "UI",
          "children": [
            {
              "type": "attribute",
              "value": "theme",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "setTheme(theme: String)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "preferredTheme",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "KeyboardNavigation offers navigate and focusElement. User has preferredNavigationMethod and requires KeyboardNavigation.",
    "PlantUML": "class KeyboardNavigation {\n  + focusElement : String\n  + navigate() : void\n}\n\nclass User {\n  + preferredNavigationMethod : String\n}\n\nUser --> KeyboardNavigation\n",
    "Model": "I143",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "KeyboardNavigation",
          "children": [
            {
              "type": "attribute",
              "value": "focusElement",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "navigate()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "preferredNavigationMethod",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "KeyboardNavigation"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "ScreenMagnifier includes magnify method and zoomLevel attribute. ScreenContent contains content and depends on ScreenMagnifier.",
    "PlantUML": "class ScreenMagnifier {\n  + zoomLevel : int\n  + magnify() : void\n}\n\nclass ScreenContent {\n  + content : String\n}\n\nScreenContent --> ScreenMagnifier\n",
    "Model": "I143",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ScreenMagnifier",
          "children": [
            {
              "type": "attribute",
              "value": "zoomLevel",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "method",
              "value": "magnify()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "ScreenContent",
          "children": [
            {
              "type": "attribute",
              "value": "content",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "ScreenMagnifier"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "InputDevice includes deviceType attribute, depends on EyeTracker, and requires SipAndPuff. EyeTracker tracks eye movement, while SipAndPuff is triggered by suction.",
    "PlantUML": "class InputDevice {\n    +deviceType: String\n}\n\nclass EyeTracker {\n    +trackEyeMovement(): void\n}\n\nclass SipAndPuff {\n    +triggerBySuction(): void\n}\n\nInputDevice --> EyeTracker\nInputDevice --> SipAndPuff\n",
    "Model": "I143",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "InputDevice",
          "children": [
            {
              "type": "attribute",
              "value": "deviceType",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "EyeTracker"
                }
              ]
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "SipAndPuff"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "EyeTracker",
          "children": [
            {
              "type": "method",
              "value": "trackEyeMovement()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "SipAndPuff",
          "children": [
            {
              "type": "method",
              "value": "triggerBySuction()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "VoiceCommandSystem has executeCommand method and command attribute. User includes voiceCommand and depends on VoiceCommandSystem.",
    "PlantUML": "class VoiceCommandSystem {\n  +command: String\n  +executeCommand(command: String): void\n}\n\nclass User {\n  +voiceCommand: String\n}\n\nUser --> VoiceCommandSystem\n",
    "Model": "I143",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "VoiceCommandSystem",
          "children": [
            {
              "type": "attribute",
              "value": "command",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "executeCommand(command: String)",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "voiceCommand",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "VoiceCommandSystem"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "ErrorFeedback includes giveFeedback method and message attribute. SystemError has errorCode attribute and requires ErrorFeedback.",
    "PlantUML": "class ErrorFeedback {\n  +message: String\n  +giveFeedback(message: String): void\n}\n\nclass SystemError {\n  +errorCode: String\n}\n\nSystemError --> ErrorFeedback\n",
    "Model": "I143",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ErrorFeedback",
          "children": [
            {
              "type": "attribute",
              "value": "message",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "giveFeedback(message: String)",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "SystemError",
          "children": [
            {
              "type": "attribute",
              "value": "errorCode",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "ErrorFeedback"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "AccessibilityPreferences include preferenceType and setPreference. User has preferredSpeechRate and preferredTextSize attributes and depends on AccessibilityPreferences.",
    "PlantUML": "class AccessibilityPreferences {\n  +preferenceType: String\n  +setPreference(preferenceType: String): void\n}\n\nclass User {\n  +preferredSpeechRate: String\n  +preferredTextSize: String\n}\n\nUser --> AccessibilityPreferences\n",
    "Model": "I143",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AccessibilityPreferences",
          "children": [
            {
              "type": "attribute",
              "value": "preferenceType",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "setPreference(preferenceType: String)",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "preferredSpeechRate",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "preferredTextSize",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "AccessibilityPreferences"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "User includes login method, username, and password attributes. Parent has role attribute and assignRole method.",
    "PlantUML": "class User {\n  - username: String\n  - password: String\n  + login(): Boolean\n}\n\nclass Parent {\n  - role: String\n  + assignRole(user: User): void\n}\n\nParent <|-- User ",
    "Model": "I144",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "username",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "login()",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        },
        {
          "type": "class",
          "value": "Parent",
          "children": [
            {
              "type": "attribute",
              "value": "role",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "assignRole(user: User)",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "TimeLimit features setLimit and checkLimit methods, and limitHours attribute. TimeLimit is associated with Child, which has usageTime attribute.",
    "PlantUML": "class TimeLimit {\n  - limitHours: int\n  + setLimit(hours: int): void\n  + checkLimit(): Boolean\n}\n\nclass Child {\n  - usageTime: int\n}\n\nTimeLimit \"1\" -- \"1\" Child : sets",
    "Model": "I144",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "TimeLimit",
          "children": [
            {
              "type": "attribute",
              "value": "limitHours",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "method",
              "value": "setLimit(hours: int)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "checkLimit()",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Child"
                }
              ],
              "label": "sets",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Child",
          "children": [
            {
              "type": "attribute",
              "value": "usageTime",
              "visibility": "-",
              "data_type": "int"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Application includes blockApp and unblockApp methods, appName, and isBlocked attribute. It is linked to Child, which integrates appsUsed.",
    "PlantUML": "class Application {\n  - appName: String\n  - isBlocked: Boolean\n  + blockApp(): void\n  + unblockApp(): void\n}\n\nclass Child {\n  - appsUsed: List<Application>\n}\n\nApplication \"1\" -- \"1..*\" Child : uses",
    "Model": "I144",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Application",
          "children": [
            {
              "type": "attribute",
              "value": "appName",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "isBlocked",
              "visibility": "-",
              "data_type": "boolean"
            },
            {
              "type": "method",
              "value": "blockApp()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "unblockApp()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Child"
                }
              ],
              "label": "uses",
              "multiplicity1": "1",
              "multiplicity2": "1..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Child",
          "children": [
            {
              "type": "attribute",
              "value": "appsUsed",
              "visibility": "-",
              "data_type": "List<Application>"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Website is defined by url and visitedAt attributes and associated with Child, who has websitesVisited attribute.",
    "PlantUML": "class Website {\n  - url: String\n  - visitedAt: DateTime\n}\n\nclass Child {\n  - websitesVisited: List<Website>\n}\n\nWebsite \"1\" -- \"1..*\" Child : visitedBy",
    "Model": "I144",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Website",
          "children": [
            {
              "type": "attribute",
              "value": "url",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "visitedAt",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Child"
                }
              ],
              "label": "visitedBy",
              "multiplicity1": "1",
              "multiplicity2": "1..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Child",
          "children": [
            {
              "type": "attribute",
              "value": "websitesVisited",
              "visibility": "-",
              "data_type": "List<Website>"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "ContentFilter includes filterCategory and applyFilter method, is associated with Website. Website has category attribute.",
    "PlantUML": "class ContentFilter {\n  - filterCategory: String\n  + applyFilter(category: String): void\n}\n\nclass Website {\n  - category: String\n}\n\nContentFilter \"1\" -- \"1..*\" Website : filters",
    "Model": "I144",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ContentFilter",
          "children": [
            {
              "type": "attribute",
              "value": "filterCategory",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "applyFilter(category: String)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Website"
                }
              ],
              "label": "filters",
              "multiplicity1": "1",
              "multiplicity2": "1..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Website",
          "children": [
            {
              "type": "attribute",
              "value": "category",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Alert includes message and timestamp attributes and sendAlert method, linked to Parent, who has alertsReceived attribute.",
    "PlantUML": "class Alert {\n  - message: String\n  - timestamp: DateTime\n  + sendAlert(): void\n}\n\nclass Parent {\n  - alertsReceived: List<Alert>\n}\n\nAlert \"1\" -- \"1..*\" Parent : receives",
    "Model": "I144",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Alert",
          "children": [
            {
              "type": "attribute",
              "value": "message",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "method",
              "value": "sendAlert()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Parent"
                }
              ],
              "label": "receives",
              "multiplicity1": "1",
              "multiplicity2": "1..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Parent",
          "children": [
            {
              "type": "attribute",
              "value": "alertsReceived",
              "visibility": "-",
              "data_type": "List<Alert>"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Report features reportDate and usageSummary attributes, is associated with Parent, who contains reportsGenerated attribute.",
    "PlantUML": "class Report {\n  - reportDate: DateTime\n  - usageSummary: String\n}\n\nclass Parent {\n  - reportsGenerated: List<Report>\n}\n\nReport \"1\" -- \"1..*\" Parent : generates",
    "Model": "I144",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Report",
          "children": [
            {
              "type": "attribute",
              "value": "reportDate",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "usageSummary",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Parent"
                }
              ],
              "label": "generates",
              "multiplicity1": "1",
              "multiplicity2": "1..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Parent",
          "children": [
            {
              "type": "attribute",
              "value": "reportsGenerated",
              "visibility": "-",
              "data_type": "List<Report>"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "RemoteControl includes controlType attribute and adjustSettings method, linked to Parent, who has settingsControlled attribute.",
    "PlantUML": "class RemoteControl {\n  - controlType: String\n  + adjustSettings(setting: String, value: String): void\n}\n\nclass Parent {\n  - settingsControlled: List<RemoteControl>\n}\n\nRemoteControl \"1\" -- \"1\" Parent : \"accessed by\"",
    "Model": "I144",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "RemoteControl",
          "children": [
            {
              "type": "attribute",
              "value": "controlType",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "adjustSettings(setting: String, value: String)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Parent"
                }
              ],
              "label": "\"accessed by\"",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Parent",
          "children": [
            {
              "type": "attribute",
              "value": "settingsControlled",
              "visibility": "-",
              "data_type": "List<RemoteControl>"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "OverrideFeature includes enableOverride and disableOverride methods, and isOverrideEnabled attribute. It is linked to Parent, who has overrideUsed attribute.",
    "PlantUML": "class OverrideFeature {\n  - isOverrideEnabled: Boolean\n  + enableOverride(): void\n  + disableOverride(): void\n}\n\nclass Parent {\n  - overrideUsed: Boolean\n}\n\nOverrideFeature \"1\" -- \"1\" Parent : triggers",
    "Model": "I144",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "OverrideFeature",
          "children": [
            {
              "type": "attribute",
              "value": "isOverrideEnabled",
              "visibility": "-",
              "data_type": "boolean"
            },
            {
              "type": "method",
              "value": "enableOverride()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "disableOverride()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Parent"
                }
              ],
              "label": "triggers",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Parent",
          "children": [
            {
              "type": "attribute",
              "value": "overrideUsed",
              "visibility": "-",
              "data_type": "boolean"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Profile includes childName, age, and deviceType attributes, associated with Parent, who manages profilesManaged attribute.",
    "PlantUML": "class Profile {\n  - childName: String\n  - age: int\n  - deviceType: String\n}\n\nclass Parent {\n  - profilesManaged: List<Profile>\n}\n\nProfile \"1\" -- \"1\" Parent : manages",
    "Model": "I144",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Profile",
          "children": [
            {
              "type": "attribute",
              "value": "childName",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "age",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "deviceType",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Parent"
                }
              ],
              "label": "manages",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Parent",
          "children": [
            {
              "type": "attribute",
              "value": "profilesManaged",
              "visibility": "-",
              "data_type": "List<Profile>"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "User has username, password, and email attributes, and an isAuthenticated method. User depends on VRSession, which has sessionID and isActive attributes.",
    "PlantUML": "class User {\n  +username : String\n  +password : String\n  +email : String\n  +isAuthenticated() : boolean\n}\n\nclass VRSession {\n  +sessionID : String\n  +isActive : boolean\n}\n\nUser \"1\" --> \"0..1\" VRSession : participates\n",
    "Model": "I145",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "username",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "isAuthenticated()",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "VRSession"
                }
              ],
              "label": "participates",
              "multiplicity1": "1",
              "multiplicity2": "0..1"
            }
          ]
        },
        {
          "type": "class",
          "value": "VRSession",
          "children": [
            {
              "type": "attribute",
              "value": "sessionID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "isActive",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "VirtualEnvironment includes environmentName, environmentType, and isInteractive attributes, and needs VRContent, which contains contentType and contentFile attributes.",
    "PlantUML": "class VirtualEnvironment {\n    +environmentName: String\n    +environmentType: String\n    +isInteractive: boolean\n}\n\nclass VRContent {\n    +contentType: String\n    +contentFile: String\n}\n\nVirtualEnvironment \"1\" --> \"0..*\" VRContent : contains\n",
    "Model": "I145",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "VirtualEnvironment",
          "children": [
            {
              "type": "attribute",
              "value": "environmentName",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "environmentType",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "isInteractive",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "VRContent"
                }
              ],
              "label": "contains",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "VRContent",
          "children": [
            {
              "type": "attribute",
              "value": "contentType",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "contentFile",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "UserInteraction includes interactionType and isSuccessful attributes. VirtualObject has objectName, objectType, and isMovable attributes, depends on UserInteraction. User depends on UserInteraction.",
    "PlantUML": "class UserInteraction {\n  +interactionType : String\n  +isSuccessful : boolean\n}\n\nclass VirtualObject {\n  +objectName : String\n  +objectType : String\n  +isMovable : boolean\n}\n\nUser \"1\" --> \"0..*\" UserInteraction : performs\nVirtualObject \"1\" --> \"0..*\" UserInteraction : involved\n",
    "Model": "I145",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "UserInteraction",
          "children": [
            {
              "type": "attribute",
              "value": "interactionType",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "isSuccessful",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        },
        {
          "type": "class",
          "value": "VirtualObject",
          "children": [
            {
              "type": "attribute",
              "value": "objectName",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "objectType",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "isMovable",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "UserInteraction"
                }
              ],
              "label": "involved",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "UserInteraction"
                }
              ],
              "label": "performs",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Renderer features renderFrame method and getRenderingStatus attribute, depends on Virtual. VirtualEnvironment contains environmentName and isRenderingActive attributes.",
    "PlantUML": "class Renderer {\n    +renderFrame\n    +getRenderingStatus: String\n}\n\nclass VirtualEnvironment {\n    +environmentName: String\n    +isRenderingActive: boolean\n}\n\nRenderer \"1\" --> \"1..*\" Virtual\n",
    "Model": "I145",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Renderer",
          "children": [
            {
              "type": "attribute",
              "value": "renderFrame",
              "visibility": "+"
            },
            {
              "type": "attribute",
              "value": "getRenderingStatus",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Virtual"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "1..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "VirtualEnvironment",
          "children": [
            {
              "type": "attribute",
              "value": "environmentName",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "isRenderingActive",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        },
        {
          "type": "class",
          "value": "Virtual",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "User has username and avatar, and depends on VirtualEnvironment. VirtualEnvironment includes environmentName and maxUsers attributes.",
    "PlantUML": "class User {\n  +username : String\n  +avatar : String\n}\n\nclass VirtualEnvironment {\n  +environmentName : String\n  +maxUsers : int\n}\n\nUser \"0..*\" --> \"1\" VirtualEnvironment : participates\n",
    "Model": "I145",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "username",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "avatar",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "VirtualEnvironment"
                }
              ],
              "label": "participates",
              "multiplicity1": "0..*",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "VirtualEnvironment",
          "children": [
            {
              "type": "attribute",
              "value": "environmentName",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "maxUsers",
              "visibility": "+",
              "data_type": "int"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "VoiceChat contains voiceData and isActive attributes. User has username and depends on VoiceChat.",
    "PlantUML": "class VoiceChat {\n  +voiceData : String\n  +isActive : boolean\n}\n\nclass User {\n  +username : String\n}\n\nUser \"1\" --> \"0..*\" VoiceChat : participates\n\n\"0..*\" --> \"1\" VirtualEnvironment : occurs\n",
    "Model": "I145",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "VoiceChat",
          "children": [
            {
              "type": "attribute",
              "value": "voiceData",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "isActive",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "username",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "VoiceChat"
                }
              ],
              "label": "participates",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "VirtualObject includes objectName and hasAnimation attributes, depends on Animation, which contains animationType and animationDuration attributes.",
    "PlantUML": "class VirtualObject {\n  +objectName : String\n  +hasAnimation : boolean\n}\n\nclass Animation {\n  +animationType : String\n  +animationDuration : String\n}\n\nVirtualObject \"1\" --> \"0..*\" Animation : triggers\n",
    "Model": "I145",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "VirtualObject",
          "children": [
            {
              "type": "attribute",
              "value": "objectName",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "hasAnimation",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Animation"
                }
              ],
              "label": "triggers",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Animation",
          "children": [
            {
              "type": "attribute",
              "value": "animationType",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "animationDuration",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "HeadTracking contains xCoordinate, yCoordinate, and zCoordinate attributes. User has username and depends on HeadTracking.",
    "PlantUML": "class HeadTracking {\n  +xCoordinate : double\n  +yCoordinate : double\n  +zCoordinate : double\n}\n\nclass User {\n  +username : String\n}\n\nUser \"1\" --> \"1\" HeadTracking : has\n",
    "Model": "I145",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "HeadTracking",
          "children": [
            {
              "type": "attribute",
              "value": "xCoordinate",
              "visibility": "+",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "yCoordinate",
              "visibility": "+",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "zCoordinate",
              "visibility": "+",
              "data_type": "double"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "username",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "HeadTracking"
                }
              ],
              "label": "has",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "VRController includes controllerID and isActivated attributes, depends on VirtualObject. User has username attribute and depends on VRController.",
    "PlantUML": "class VRController {\n    +controllerID : String\n    +isActivated : boolean\n}\n\nclass User {\n    +username : String\n}\n\nUser \"1\" --> \"1\" VRController : uses\nVRController \"*\" --> \"1\" VirtualObject : interacts",
    "Model": "I145",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "VRController",
          "children": [
            {
              "type": "attribute",
              "value": "controllerID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "isActivated",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "VirtualObject"
                }
              ],
              "label": "interacts",
              "multiplicity1": "*",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "username",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "VRController"
                }
              ],
              "label": "uses",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "VirtualObject",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "VirtualEnvironment has environmentName and isActive attributes, depends on Transition, which includes transitionType and isCompleted attributes.",
    "PlantUML": "class VirtualEnvironment {\n    +environmentName: String\n    +isActive: boolean\n}\n\nclass Transition {\n    +transitionType: String\n    +isCompleted: boolean\n}\n\nVirtualEnvironment \"1\" --> \"0..*\" Transition : undergoes\n",
    "Model": "I145",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "VirtualEnvironment",
          "children": [
            {
              "type": "attribute",
              "value": "environmentName",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "isActive",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Transition"
                }
              ],
              "label": "undergoes",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Transition",
          "children": [
            {
              "type": "attribute",
              "value": "transitionType",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "isCompleted",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Robot features initializeComponents and getStatus methods. Robot needs Sensor and depends on Actuator. Sensor has initialize method, and Actuator includes initialize method.",
    "PlantUML": "class Robot {\n  +initializeComponents(): void\n  +getStatus(): String\n}\nclass Sensor {\n  +initialize(): void\n}\nclass Actuator {\n  +initialize(): void\n}\nRobot --> Sensor : has\nRobot --> Actuator : has",
    "Model": "I146",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Robot",
          "children": [
            {
              "type": "method",
              "value": "initializeComponents()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "getStatus()",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Sensor"
                }
              ],
              "label": "has"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Actuator"
                }
              ],
              "label": "has"
            }
          ]
        },
        {
          "type": "class",
          "value": "Sensor",
          "children": [
            {
              "type": "method",
              "value": "initialize()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Actuator",
          "children": [
            {
              "type": "method",
              "value": "initialize()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "MovementController offers moveForward, moveBackward, and rotate methods. Robot includes MovementController and depends on it.",
    "PlantUML": "class MovementController {\n  +moveForward(): void\n  +moveBackward(): void\n  +rotate(): void\n}\nclass Robot {\n  +movementController: MovementController\n}\nRobot --> MovementController : controls",
    "Model": "I146",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "MovementController",
          "children": [
            {
              "type": "method",
              "value": "moveForward()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "moveBackward()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "rotate()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Robot",
          "children": [
            {
              "type": "attribute",
              "value": "movementController",
              "visibility": "+",
              "data_type": "MovementController"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "MovementController"
                }
              ],
              "label": "controls"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "PathPlanner has a calculatePath method. Robot includes pathPlanner and depends on it.",
    "PlantUML": "class PathPlanner {\n  +calculatePath(start: Point, destination: Point): Path\n}\nclass Robot {\n  +pathPlanner: PathPlanner\n}\nRobot --> PathPlanner : uses",
    "Model": "I146",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "PathPlanner",
          "children": [
            {
              "type": "method",
              "value": "calculatePath(start: Point, destination: Point)",
              "visibility": "+",
              "data_type": "Path"
            }
          ]
        },
        {
          "type": "class",
          "value": "Robot",
          "children": [
            {
              "type": "attribute",
              "value": "pathPlanner",
              "visibility": "+",
              "data_type": "PathPlanner"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "PathPlanner"
                }
              ],
              "label": "uses"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "ObstacleDetector includes detectObstacles method. Robot contains obstacleDetector attribute and depends on it.",
    "PlantUML": "class ObstacleDetector {\n  +detectObstacles(): List<Obstacle>\n}\nclass Robot {\n  +obstacleDetector: ObstacleDetector\n}\nRobot --> ObstacleDetector : uses",
    "Model": "I146",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ObstacleDetector",
          "children": [
            {
              "type": "method",
              "value": "detectObstacles()",
              "visibility": "+",
              "data_type": "List<Obstacle>"
            }
          ]
        },
        {
          "type": "class",
          "value": "Robot",
          "children": [
            {
              "type": "attribute",
              "value": "obstacleDetector",
              "visibility": "+",
              "data_type": "ObstacleDetector"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "ObstacleDetector"
                }
              ],
              "label": "uses"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "TaskExecutor offers executeTask method. Robot has taskExecutor attribute and requires it.",
    "PlantUML": "class TaskExecutor {\n  +executeTask(task: Task): void\n}\nclass Robot {\n  +taskExecutor: TaskExecutor\n}\nRobot --> TaskExecutor : uses",
    "Model": "I146",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "TaskExecutor",
          "children": [
            {
              "type": "method",
              "value": "executeTask(task: Task)",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Robot",
          "children": [
            {
              "type": "attribute",
              "value": "taskExecutor",
              "visibility": "+",
              "data_type": "TaskExecutor"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "TaskExecutor"
                }
              ],
              "label": "uses"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "SensorDataProcessor provides processData method. Sensor includes sensorDataProcessor attribute and depends on SensorDataProcessor.",
    "PlantUML": "class SensorDataProcessor {\n  +processData(sensorData: SensorData): void\n}\nclass Sensor {\n  +sensorDataProcessor: SensorDataProcessor\n}\nSensor --> SensorDataProcessor : processes",
    "Model": "I146",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "SensorDataProcessor",
          "children": [
            {
              "type": "method",
              "value": "processData(sensorData: SensorData)",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Sensor",
          "children": [
            {
              "type": "attribute",
              "value": "sensorDataProcessor",
              "visibility": "+",
              "data_type": "SensorDataProcessor"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "SensorDataProcessor"
                }
              ],
              "label": "processes"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "CommunicationInterface includes sendData and receiveData methods. Robot contains communicationInterface attribute and depends on it.",
    "PlantUML": "class CommunicationInterface {\n  +sendData(data: String): void\n  +receiveData(): String\n}\nclass Robot {\n  +communicationInterface: CommunicationInterface\n}\nRobot --> CommunicationInterface : uses",
    "Model": "I146",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "CommunicationInterface",
          "children": [
            {
              "type": "method",
              "value": "sendData(data: String)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "receiveData()",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Robot",
          "children": [
            {
              "type": "attribute",
              "value": "communicationInterface",
              "visibility": "+",
              "data_type": "CommunicationInterface"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "CommunicationInterface"
                }
              ],
              "label": "uses"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "EnergyManager features monitorBatteryLevel and managePowerUsage methods. Robot has energyManager attribute and depends on EnergyManager.",
    "PlantUML": "class EnergyManager {\n  +monitorBatteryLevel(): int\n  +managePowerUsage(): void\n}\nclass Robot {\n  +energyManager: EnergyManager\n}\nRobot --> EnergyManager : uses",
    "Model": "I146",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "EnergyManager",
          "children": [
            {
              "type": "method",
              "value": "monitorBatteryLevel()",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "method",
              "value": "managePowerUsage()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Robot",
          "children": [
            {
              "type": "attribute",
              "value": "energyManager",
              "visibility": "+",
              "data_type": "EnergyManager"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "EnergyManager"
                }
              ],
              "label": "uses"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "AutonomousSystem encapsulates makeDecision method. Robot contains autonomousSystem attribute and depends on AutonomousSystem.",
    "PlantUML": "class AutonomousSystem {\n  +makeDecision(sensorData: SensorData): void\n}\nclass Robot {\n  +autonomousSystem: AutonomousSystem\n}\nRobot --> AutonomousSystem : uses",
    "Model": "I146",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AutonomousSystem",
          "children": [
            {
              "type": "method",
              "value": "makeDecision(sensorData: SensorData)",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Robot",
          "children": [
            {
              "type": "attribute",
              "value": "autonomousSystem",
              "visibility": "+",
              "data_type": "AutonomousSystem"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "AutonomousSystem"
                }
              ],
              "label": "uses"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "ErrorHandler includes detectError and handleError methods. Robot has errorHandler attribute and requires ErrorHandler.",
    "PlantUML": "class ErrorHandler {\n  +detectError(): Boolean\n  +handleError(): void\n}\nclass Robot {\n  +errorHandler: ErrorHandler\n}\nRobot --> ErrorHandler : uses",
    "Model": "I146",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ErrorHandler",
          "children": [
            {
              "type": "method",
              "value": "detectError()",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "method",
              "value": "handleError()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Robot",
          "children": [
            {
              "type": "attribute",
              "value": "errorHandler",
              "visibility": "+",
              "data_type": "ErrorHandler"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "ErrorHandler"
                }
              ],
              "label": "uses"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "GiveawayPost includes postId, postText, postDate attributes, and getPostDetails method.",
    "PlantUML": "class GiveawayPost {\n  - postId: String\n  - postText: String\n  - postDate: DateTime\n  + getPostDetails(): String\n}\n",
    "Model": "I147",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "GiveawayPost",
          "children": [
            {
              "type": "attribute",
              "value": "postId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "postText",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "postDate",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "method",
              "value": "getPostDetails()",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "User contains userId, userName, userProfile attributes, and getUserDetails method.",
    "PlantUML": "class User {\n  - userId: String\n  - userName: String\n  - userProfile: String\n  + getUserDetails(): String\n}",
    "Model": "I147",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "userName",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "userProfile",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "getUserDetails()",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Comment features getCommentDetails method, commentId, commentText, and commentDate attributes.",
    "PlantUML": "class Comment {\n  - commentId: String\n  - commentText: String\n  - commentDate: DateTime\n  + getCommentDetails(): String\n}",
    "Model": "I147",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Comment",
          "children": [
            {
              "type": "attribute",
              "value": "commentId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "commentText",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "commentDate",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "method",
              "value": "getCommentDetails()",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Like has getLikeDetails method, likeId, and likeDate attribute.",
    "PlantUML": "class Like {\n  - likeId: String\n  - likeDate: DateTime\n  + getLikeDetails(): String\n}",
    "Model": "I147",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Like",
          "children": [
            {
              "type": "attribute",
              "value": "likeId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "likeDate",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "method",
              "value": "getLikeDetails()",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "GiveawayPost is connected to Comment and Like.",
    "PlantUML": "GiveawayPost \"1\" -- \"*\" Comment : has\nGiveawayPost \"1\" -- \"*\" Like : has",
    "Model": "I147",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "GiveawayPost",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Comment"
                }
              ],
              "label": "has",
              "multiplicity1": "1",
              "multiplicity2": "*"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Like"
                }
              ],
              "label": "has",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Comment",
          "children": []
        },
        {
          "type": "class",
          "value": "Like",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "User is connected to Comment and associated with Like.",
    "PlantUML": "User \"1\" -- \"*\" Comment: comments\nUser \"1\" -- \"*\" Like: likes\n",
    "Model": "I147",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Comment"
                }
              ],
              "label": "comments",
              "multiplicity1": "1",
              "multiplicity2": "*"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Like"
                }
              ],
              "label": "likes",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Comment",
          "children": []
        },
        {
          "type": "class",
          "value": "Like",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "GiveawayManager includes pickRandomWinnerFromComments and pickRandomWinnerFromLikes methods.",
    "PlantUML": "class GiveawayManager {\n  + pickRandomWinnerFromComments(giveawayPost: GiveawayPost): User\n  + pickRandomWinnerFromLikes(giveawayPost: GiveawayPost): User\n}",
    "Model": "I147",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "GiveawayManager",
          "children": [
            {
              "type": "method",
              "value": "pickRandomWinnerFromComments(giveawayPost: GiveawayPost)",
              "visibility": "+",
              "data_type": "User"
            },
            {
              "type": "method",
              "value": "pickRandomWinnerFromLikes(giveawayPost: GiveawayPost)",
              "visibility": "+",
              "data_type": "User"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Notification contains notificationId, message, notificationDate attributes, and sendNotification method.",
    "PlantUML": "class Notification {\n  - notificationId: String\n  - message: String\n  - notificationDate: DateTime\n  + sendNotification(): void\n}",
    "Model": "I147",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Notification",
          "children": [
            {
              "type": "attribute",
              "value": "notificationId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "message",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "notificationDate",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "method",
              "value": "sendNotification()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "GiveawayManager also offers validateWinner method.",
    "PlantUML": "class GiveawayManager {\n  + validateWinner(user: User, giveawayPost: GiveawayPost): Boolean\n}",
    "Model": "I147",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "GiveawayManager",
          "children": [
            {
              "type": "method",
              "value": "validateWinner(user: User, giveawayPost: GiveawayPost)",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "GiveawayResult contains resultId, winner, giveawayPost attributes, and getWinnerDetails method.",
    "PlantUML": "class GiveawayResult {\n  - resultId: String\n  - winner: User\n  - giveawayPost: GiveawayPost\n  + getWinnerDetails(): String\n}",
    "Model": "I147",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "GiveawayResult",
          "children": [
            {
              "type": "attribute",
              "value": "resultId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "winner",
              "visibility": "-",
              "data_type": "User"
            },
            {
              "type": "attribute",
              "value": "giveawayPost",
              "visibility": "-",
              "data_type": "GiveawayPost"
            },
            {
              "type": "method",
              "value": "getWinnerDetails()",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Among the features of BackupSchedule are a method startBackup, updateSchedule and an attribute scheduleId, an attribute backupTime, frequency, lastBackupDate attribute.",
    "PlantUML": "class BackupSchedule {\n    - scheduleId : String\n    - backupTime : Time\n    - frequency : String\n    - lastBackupDate : Date\n    + startBackup() : void\n    + updateSchedule(newTime: Time, newFrequency: String) : void\n}\n",
    "Model": "J1",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "BackupSchedule",
          "children": [
            {
              "type": "attribute",
              "value": "scheduleId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "backupTime",
              "visibility": "-",
              "data_type": "Time"
            },
            {
              "type": "attribute",
              "value": "frequency",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "lastBackupDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "method",
              "value": "startBackup()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "updateSchedule(newTime: Time, newFrequency: String)",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "BackupJob includes method execute, a method cancel and jobId attribute, an attribute status, startTime attribute, an attribute endTime, dataSize attribute.",
    "PlantUML": "class BackupJob {\n    - jobId : String\n    - status : String\n    - startTime : DateTime\n    - endTime : DateTime\n    - dataSize : long\n    + execute() : void\n    + cancel() : void\n}\n",
    "Model": "J1",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "BackupJob",
          "children": [
            {
              "type": "attribute",
              "value": "jobId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "startTime",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "endTime",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "dataSize",
              "visibility": "-",
              "data_type": "long"
            },
            {
              "type": "method",
              "value": "execute()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "cancel()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The structure of BackupStorage comprises a method allocateSpace, releaseSpace and storageId attribute, storageType attribute, capacity, an attribute usedSpace.",
    "PlantUML": "class BackupStorage {\n    - storageId : String\n    - storageType : String\n    - capacity : long\n    - usedSpace : long\n    + allocateSpace(size: long) : boolean\n    + releaseSpace(size: long) : void\n}\n",
    "Model": "J1",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "BackupStorage",
          "children": [
            {
              "type": "attribute",
              "value": "storageId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "storageType",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "capacity",
              "visibility": "-",
              "data_type": "long"
            },
            {
              "type": "attribute",
              "value": "usedSpace",
              "visibility": "-",
              "data_type": "long"
            },
            {
              "type": "method",
              "value": "allocateSpace(size: long)",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "method",
              "value": "releaseSpace(size: long)",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The design of DisasterRecoveryPlan integrates planId, an attribute planName, an attribute description, lastTestDate and method activatePlan, a method testPlan.",
    "PlantUML": "class DisasterRecoveryPlan {\n    - planId : String\n    - planName : String\n    - description : String\n    - lastTestDate : Date\n    + activatePlan() : void\n    + testPlan() : boolean\n}\n",
    "Model": "J1",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "DisasterRecoveryPlan",
          "children": [
            {
              "type": "attribute",
              "value": "planId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "planName",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "lastTestDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "method",
              "value": "activatePlan()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "testPlan()",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Class RecoveryPoint contains an attribute pointId, timestamp, description and a method validate, a method restore.",
    "PlantUML": "class RecoveryPoint {\n    - pointId : String\n    - timestamp : DateTime\n    - description : String\n    + validate() : boolean\n    + restore() : void\n}\n",
    "Model": "J1",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "RecoveryPoint",
          "children": [
            {
              "type": "attribute",
              "value": "pointId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "validate()",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "method",
              "value": "restore()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "BackupManager is defined by method createBackupSchedule, a method startBackupJob, manageStorage. BackupManager is associated with BackupSchedule. BackupManager is associated with BackupJob. BackupManager is associated with BackupStorage.",
    "PlantUML": "class BackupManager {\n    + createBackupSchedule(schedule: BackupSchedule) : void\n    + startBackupJob(job: BackupJob) : void\n    + manageStorage(storage: BackupStorage) : void\n}\nBackupManager \"1\" -- \"*\" BackupSchedule\nBackupManager \"1\" -- \"*\" BackupJob\nBackupManager \"1\" -- \"*\" BackupStorage\n",
    "Model": "J1",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "BackupManager",
          "children": [
            {
              "type": "method",
              "value": "createBackupSchedule(schedule: BackupSchedule)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "startBackupJob(job: BackupJob)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "manageStorage(storage: BackupStorage)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "BackupSchedule"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "*"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "BackupJob"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "*"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "BackupStorage"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "BackupSchedule",
          "children": []
        },
        {
          "type": "class",
          "value": "BackupJob",
          "children": []
        },
        {
          "type": "class",
          "value": "BackupStorage",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The design of DisasterRecoveryCoordinator integrates initiateRecovery, a method schedulePlanTest. DisasterRecoveryCoordinator is linked to DisasterRecoveryPlan. DisasterRecoveryCoordinator is associated with RecoveryPoint.",
    "PlantUML": "class DisasterRecoveryCoordinator {\n    + initiateRecovery(plan: DisasterRecoveryPlan) : void\n    + schedulePlanTest(plan: DisasterRecoveryPlan) : void\n}\nDisasterRecoveryCoordinator \"1\" -- \"*\" DisasterRecoveryPlan\nDisasterRecoveryCoordinator \"1\" -- \"*\" RecoveryPoint\n",
    "Model": "J1",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "DisasterRecoveryCoordinator",
          "children": [
            {
              "type": "method",
              "value": "initiateRecovery(plan: DisasterRecoveryPlan)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "schedulePlanTest(plan: DisasterRecoveryPlan)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "DisasterRecoveryPlan"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "*"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "RecoveryPoint"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "DisasterRecoveryPlan",
          "children": []
        },
        {
          "type": "class",
          "value": "RecoveryPoint",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Class Alert contains alertId attribute, alertType, an attribute message, an attribute timestamp and method send, method acknowledge.",
    "PlantUML": "class Alert {\n    - alertId : String\n    - alertType : String\n    - message : String\n    - timestamp : DateTime\n    + send() : void\n    + acknowledge() : void\n}\n",
    "Model": "J1",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Alert",
          "children": [
            {
              "type": "attribute",
              "value": "alertId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "alertType",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "message",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "method",
              "value": "send()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "acknowledge()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "BackupJob is linked to Alert. DisasterRecoveryPlan is associated with Alert.",
    "PlantUML": "BackupJob \"0..*\" -- \"0..*\" Alert\nDisasterRecoveryPlan \"0..*\" -- \"0..*\" Alert\n",
    "Model": "J1",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "BackupJob",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Alert"
                }
              ],
              "multiplicity1": "0..*",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Alert",
          "children": []
        },
        {
          "type": "class",
          "value": "DisasterRecoveryPlan",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Alert"
                }
              ],
              "multiplicity1": "0..*",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Class Bank contains addAccount, a method removeAccount and an attribute name, address attribute. Bank depends on Account. The design of Account integrates deposit, withdraw, getBalance and accountNumber attribute, balance attribute.",
    "PlantUML": "class Bank {\n    - name: String\n    - address: String\n    + addAccount(account: Account): void\n    + removeAccount(accountNumber: String): void\n}\n\nclass Account {\n    - accountNumber: String\n    - balance: double\n    + deposit(amount: double): void\n    + withdraw(amount: double): boolean\n    + getBalance(): double\n}\n\nBank \"1\" --> \"*\" Account : manages \n",
    "Model": "J2",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Bank",
          "children": [
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "address",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "addAccount(account: Account)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "removeAccount(accountNumber: String)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Account"
                }
              ],
              "label": "manages",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Account",
          "children": [
            {
              "type": "attribute",
              "value": "accountNumber",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "balance",
              "visibility": "-",
              "data_type": "double"
            },
            {
              "type": "method",
              "value": "deposit(amount: double)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "withdraw(amount: double)",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "method",
              "value": "getBalance()",
              "visibility": "+",
              "data_type": "double"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Customer encapsulates getDetails and customerId attribute, name attribute, email, an attribute phoneNumber. Customer needs Account.",
    "PlantUML": "class Customer {\n    - customerId: String\n    - name: String\n    - email: String\n    - phoneNumber: String\n    + getDetails(): String\n}\n\nCustomer \"1\" --> \"*\" Account : owns >\n",
    "Model": "J2",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Customer",
          "children": [
            {
              "type": "attribute",
              "value": "customerId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "phoneNumber",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "getDetails()",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Account"
                }
              ],
              "label": "owns >",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Account",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "SavingsAccount is defined by addInterest and interestRate. In CheckingAccount, you can find a method checkOverdraft and overdraftLimit. Account is a subclass of SavingsAccount. Account is a subclass of CheckingAccount.",
    "PlantUML": "class SavingsAccount {\n    - interestRate: double\n    + addInterest(): void\n}\n\nclass CheckingAccount {\n    - overdraftLimit: double\n    + checkOverdraft(): boolean\n}\n\nAccount <|-- SavingsAccount\nAccount <|-- CheckingAccount\n",
    "Model": "J2",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "SavingsAccount",
          "children": [
            {
              "type": "attribute",
              "value": "interestRate",
              "visibility": "-",
              "data_type": "double"
            },
            {
              "type": "method",
              "value": "addInterest()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "CheckingAccount",
          "children": [
            {
              "type": "attribute",
              "value": "overdraftLimit",
              "visibility": "-",
              "data_type": "double"
            },
            {
              "type": "method",
              "value": "checkOverdraft()",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        },
        {
          "type": "class",
          "value": "Account",
          "children": [
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "SavingsAccount"
                }
              ]
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "CheckingAccount"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The Transaction has execute and transactionId, date, amount attribute, type. Account needs Transaction.",
    "PlantUML": "class Transaction {\n    - transactionId: String\n    - date: Date\n    - amount: double\n    - type: String\n    + execute(): boolean\n}\n\nAccount \"1\" --> \"*\" Transaction : records \n",
    "Model": "J2",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Transaction",
          "children": [
            {
              "type": "attribute",
              "value": "transactionId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "date",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "amount",
              "visibility": "-",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "type",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "execute()",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        },
        {
          "type": "class",
          "value": "Account",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Transaction"
                }
              ],
              "label": "records",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "BankEmployee includes an attribute employeeId, name, an attribute role and a method performOperation. Bank needs BankEmployee.",
    "PlantUML": "class BankEmployee {\n    - employeeId: String\n    - name: String\n    - role: String\n    + performOperation(): void\n}\n\nBank \"1\" --> \"*\" BankEmployee : employs \n",
    "Model": "J2",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "BankEmployee",
          "children": [
            {
              "type": "attribute",
              "value": "employeeId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "role",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "performOperation()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Bank",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "BankEmployee"
                }
              ],
              "label": "employs",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Class Loan contains an attribute loanId, amount, interestRate attribute, status and method approve, reject. Customer needs Loan.",
    "PlantUML": "class Loan {\n    - loanId: String\n    - amount: double\n    - interestRate: double\n    - status: String\n    + approve(): void\n    + reject(): void\n}\n\nCustomer \"1\" --> \"*\" Loan : applies >\n",
    "Model": "J2",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Loan",
          "children": [
            {
              "type": "attribute",
              "value": "loanId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "amount",
              "visibility": "-",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "interestRate",
              "visibility": "-",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "approve()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "reject()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Customer",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Loan"
                }
              ],
              "label": "applies >",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Address is defined by street attribute, city attribute, an attribute postalCode, country. Customer is composed of Address.",
    "PlantUML": "class Address {\n    - street: String\n    - city: String\n    - postalCode: String\n    - country: String\n}\n\nCustomer \"1\" *-- \"*\" Address : has \n",
    "Model": "J2",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Address",
          "children": [
            {
              "type": "attribute",
              "value": "street",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "city",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "postalCode",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "country",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Customer",
          "children": [
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Address"
                }
              ],
              "label": "has",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The design of OnlineBankingService integrates login, method performTransaction. Customer needs OnlineBankingService.",
    "PlantUML": "class OnlineBankingService {\n    + login(customerId: String, password: String): boolean\n    + performTransaction(transaction: Transaction): boolean\n}\n\nCustomer \"1\" --> \"1\" OnlineBankingService : uses \n",
    "Model": "J2",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "OnlineBankingService",
          "children": [
            {
              "type": "method",
              "value": "login(customerId: String, password: String)",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "method",
              "value": "performTransaction(transaction: Transaction)",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        },
        {
          "type": "class",
          "value": "Customer",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "OnlineBankingService"
                }
              ],
              "label": "uses",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Customer encapsulates placeOrder and customerID attribute, name, an attribute phoneNumber, email attribute. Customer is linked to Order.",
    "PlantUML": "class Customer {\n    - customerID: int\n    - name: String\n    - phoneNumber: String\n    - email: String\n    + placeOrder(order: Order): void\n}\n\nclass Order {\n}\n\nCustomer \"1\" -- \"*\" Order : places\n\n",
    "Model": "J3",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Customer",
          "children": [
            {
              "type": "attribute",
              "value": "customerID",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "phoneNumber",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "placeOrder(order: Order)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Order"
                }
              ],
              "label": "places",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Order",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Order is defined by orderID attribute, an attribute orderDate, an attribute status.",
    "PlantUML": "class Order {\n    - orderID: int\n    - orderDate: Date\n    - status: String\n}",
    "Model": "J3",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Order",
          "children": [
            {
              "type": "attribute",
              "value": "orderID",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "orderDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The structure of Menu comprises method getMenuItems. The structure of MenuItem comprises itemCode, name, description attribute, price, category attribute.",
    "PlantUML": "class Menu {\n    + getMenuItems(): List<MenuItem>\n}\n\nclass MenuItem {\n    - itemCode: int\n    - name: String\n    - description: String\n    - price: float\n    - category: String\n}\n\n\n",
    "Model": "J3",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Menu",
          "children": [
            {
              "type": "method",
              "value": "getMenuItems()",
              "visibility": "+",
              "data_type": "List<MenuItem>"
            }
          ]
        },
        {
          "type": "class",
          "value": "MenuItem",
          "children": [
            {
              "type": "attribute",
              "value": "itemCode",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "price",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "attribute",
              "value": "category",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Menu is linked to MenuItem.",
    "PlantUML": "Menu \"1\" -- \"*\" MenuItem : contains",
    "Model": "J3",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Menu",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "MenuItem"
                }
              ],
              "label": "contains",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "MenuItem",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Order is associated with OrderItem.",
    "PlantUML": "Order \"1\" -- \"*\" OrderItem : contains ",
    "Model": "J3",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Order",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "OrderItem"
                }
              ],
              "label": "contains",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "OrderItem",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The design of Order integrates orderID, orderDate, status. The design of OrderItem integrates quantity, subtotalPrice attribute. OrderItem is linked to MenuItem. MenuItem encapsulates itemCode, an attribute name, description attribute, price, category.",
    "PlantUML": "class Order {\n    - orderID: int\n    - orderDate: Date\n    - status: String\n}\n\nclass OrderItem {\n    - quantity: int\n    - subtotalPrice: float\n}\n\nclass MenuItem {\n    - itemCode: int\n    - name: String\n    - description: String\n    - price: float\n    - category: String\n}\n\nOrderItem \"*\" -- \"1\" MenuItem : refers to ",
    "Model": "J3",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Order",
          "children": [
            {
              "type": "attribute",
              "value": "orderID",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "orderDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "OrderItem",
          "children": [
            {
              "type": "attribute",
              "value": "quantity",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "subtotalPrice",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "MenuItem"
                }
              ],
              "label": "refers to",
              "multiplicity1": "*",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "MenuItem",
          "children": [
            {
              "type": "attribute",
              "value": "itemCode",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "price",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "attribute",
              "value": "category",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Payment includes paymentID attribute, paymentDate attribute, amount, method attribute. The design of Order integrates an attribute orderID, orderDate, status attribute.",
    "PlantUML": "class Payment {\n    - paymentID: int\n    - paymentDate: Date\n    - amount: float\n    - method: String\n}\n\nclass Order {\n    - orderID: int\n    - orderDate: Date\n    - status: String\n}",
    "Model": "J3",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Payment",
          "children": [
            {
              "type": "attribute",
              "value": "paymentID",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "paymentDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "amount",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "attribute",
              "value": "method",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Order",
          "children": [
            {
              "type": "attribute",
              "value": "orderID",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "orderDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Order is linked to Payment.",
    "PlantUML": "Order \"1\" -- \"1\" Payment : paid by ",
    "Model": "J3",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Order",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Payment"
                }
              ],
              "label": "paid by",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Payment",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Staff encapsulates an attribute staffID, name attribute, an attribute role, contactInfo attribute and method handleOrder. Staff is associated with Order. In Order, you can find orderID, orderDate, an attribute status.",
    "PlantUML": "class Staff {\n    - staffID: int\n    - name: String\n    - role: String\n    - contactInfo: String\n    + handleOrder(order: Order): void\n}\n\nclass Order {\n    - orderID: int\n    - orderDate: Date\n    - status: String\n}\n\nStaff \"1\" -- \"*\" Order : handles\n",
    "Model": "J3",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Staff",
          "children": [
            {
              "type": "attribute",
              "value": "staffID",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "role",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "contactInfo",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "handleOrder(order: Order)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Order"
                }
              ],
              "label": "handles",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Order",
          "children": [
            {
              "type": "attribute",
              "value": "orderID",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "orderDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Among the features of Reservation are an attribute reservationID, reservationDateTime attribute, numberOfGuests attribute, status. Reservation is associated with Customer. Reservation is linked to Table. Among the features of Table are an attribute tableID, an attribute tableNumber, seats attribute.",
    "PlantUML": "class Reservation {\n    - reservationID: int\n    - reservationDateTime: DateTime\n    - numberOfGuests: int\n    - status: String\n}\n\nclass Customer{ \n}\nclass Table {\n    - tableID: int\n    - tableNumber: int\n    - seats: int\n}\n\nReservation \"1\" -- \"1\" Customer : made by \nReservation \"1\" -- \"1\" Table : reserves \n",
    "Model": "J3",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Reservation",
          "children": [
            {
              "type": "attribute",
              "value": "reservationID",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "reservationDateTime",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "numberOfGuests",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Customer"
                }
              ],
              "label": "made by",
              "multiplicity1": "1",
              "multiplicity2": "1"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Table"
                }
              ],
              "label": "reserves",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Customer",
          "children": []
        },
        {
          "type": "class",
          "value": "Table",
          "children": [
            {
              "type": "attribute",
              "value": "tableID",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "tableNumber",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "seats",
              "visibility": "-",
              "data_type": "int"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "In CDN, you can find a method distributeContent. CDN needs EdgeServer. The EdgeServer has method storeContent.",
    "PlantUML": "class CDN {\n  +distributeContent(content: Content)\n}\n\nclass EdgeServer {\n  +storeContent(content: Content)\n}\n\nCDN --> EdgeServer : \"distributes\"\n",
    "Model": "J4",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "CDN",
          "children": [
            {
              "type": "method",
              "value": "distributeContent(content: Content)",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "EdgeServer"
                }
              ],
              "label": "\"distributes\""
            }
          ]
        },
        {
          "type": "class",
          "value": "EdgeServer",
          "children": [
            {
              "type": "method",
              "value": "storeContent(content: Content)",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Class RequestRouter contains routeRequest. RequestRouter uses EdgeServer.",
    "PlantUML": "class RequestRouter {\n  +routeRequest(userLocation: Location): EdgeServer\n}\n\nRequestRouter ..> EdgeServer : \"routes\"\n",
    "Model": "J4",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "RequestRouter",
          "children": [
            {
              "type": "method",
              "value": "routeRequest(userLocation: Location)",
              "visibility": "+",
              "data_type": "EdgeServer"
            },
            {
              "type": "relation",
              "value": "..>",
              "children": [
                {
                  "type": "class",
                  "value": "EdgeServer"
                }
              ],
              "label": "\"routes\""
            }
          ]
        },
        {
          "type": "class",
          "value": "EdgeServer",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "nEdgeServer uses Cache.",
    "PlantUML": "\"class Cache {\\n    +store(content: Content)\\n    +retrieve(contentId: String): Content\\n}\\n\\nEdgeServer ..> Cache : \\\"uses\\\"\\n\",\n ",
    "Model": "J4",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Cache",
          "children": []
        },
        {
          "type": "class",
          "value": "nEdgeServer",
          "children": [
            {
              "type": "relation",
              "value": "..>",
              "children": [
                {
                  "type": "class",
                  "value": "Cache"
                }
              ],
              "label": "\\\"uses\\\"\\n\","
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "In Analytics, you can find generateReport. EdgeServer depends on Analytics.",
    "PlantUML": "class Analytics {\n  + generateReport(): Report\n}\n\nEdgeServer --> Analytics : \"sends\"\n",
    "Model": "J4",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Analytics",
          "children": [
            {
              "type": "method",
              "value": "generateReport()",
              "visibility": "+",
              "data_type": "Report"
            }
          ]
        },
        {
          "type": "class",
          "value": "EdgeServer",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Analytics"
                }
              ],
              "label": "\"sends\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Class Purger contains a method purge. EdgeServer uses Purger.",
    "PlantUML": "class Purger {\n  +purge(contentId: String)\n}\n\nEdgeServer ..> Purger : \"requests\"\n",
    "Model": "J4",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Purger",
          "children": [
            {
              "type": "method",
              "value": "purge(contentId: String)",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "EdgeServer",
          "children": [
            {
              "type": "relation",
              "value": "..>",
              "children": [
                {
                  "type": "class",
                  "value": "Purger"
                }
              ],
              "label": "\"requests\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The API has method fetchDynamicContent. EdgeServer needs API.",
    "PlantUML": "class API {\n  +fetchDynamicContent(userId: String): Content\n}\n\nEdgeServer --> API : \"fetches\"\n",
    "Model": "J4",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "API",
          "children": [
            {
              "type": "method",
              "value": "fetchDynamicContent(userId: String)",
              "visibility": "+",
              "data_type": "Content"
            }
          ]
        },
        {
          "type": "class",
          "value": "EdgeServer",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "API"
                }
              ],
              "label": "\"fetches\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The design of Security integrates a method detectDDoS, encryptData. CDN needs Security.",
    "PlantUML": "class Security {\n  + detectDDoS(): Boolean\n  + encryptData(data: Data): Data\n}\n\nCDN --> Security : \"integrates\"\n",
    "Model": "J4",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Security",
          "children": [
            {
              "type": "method",
              "value": "detectDDoS()",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "method",
              "value": "encryptData(data: Data)",
              "visibility": "+",
              "data_type": "Data"
            }
          ]
        },
        {
          "type": "class",
          "value": "CDN",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Security"
                }
              ],
              "label": "\"integrates\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The structure of OriginServer comprises provideContent. EdgeServer depends on OriginServer.",
    "PlantUML": "class OriginServer {\n  + provideContent(contentId: String): Content\n}\n\nEdgeServer --> OriginServer : fetches\n",
    "Model": "J4",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "OriginServer",
          "children": [
            {
              "type": "method",
              "value": "provideContent(contentId: String)",
              "visibility": "+",
              "data_type": "Content"
            }
          ]
        },
        {
          "type": "class",
          "value": "EdgeServer",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "OriginServer"
                }
              ],
              "label": "fetches"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Class LoadBalancer contains balanceLoad. CDN needs LoadBalancer.",
    "PlantUML": "class LoadBalancer {\n    +balanceLoad(edgeServers: List<EdgeServer>)\n}\n\nCDN --> LoadBalancer : uses\n",
    "Model": "J4",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "LoadBalancer",
          "children": [
            {
              "type": "method",
              "value": "balanceLoad(edgeServers: List<EdgeServer>)",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "CDN",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "LoadBalancer"
                }
              ],
              "label": "uses"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The design of RuleEngine integrates applyRules. CDN depends on RuleEngine.",
    "PlantUML": "class RuleEngine {\n  +applyRules(content: Content, user: User)\n}\n\nCDN --> RuleEngine : configures\n",
    "Model": "J4",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "RuleEngine",
          "children": [
            {
              "type": "method",
              "value": "applyRules(content: Content, user: User)",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "CDN",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "RuleEngine"
                }
              ],
              "label": "configures"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The Content has type attribute, size attribute. EdgeServer depends on Content.",
    "PlantUML": "class Content {\n  +type: String\n  +size: int\n}\n\nEdgeServer --> Content : \"Stores\"\n",
    "Model": "J4",
    "RequirementIndex": "10",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Content",
          "children": [
            {
              "type": "attribute",
              "value": "type",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "size",
              "visibility": "+",
              "data_type": "int"
            }
          ]
        },
        {
          "type": "class",
          "value": "EdgeServer",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Content"
                }
              ],
              "label": "\"Stores\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "In Compressor, you can find compress. CDN depends on Compressor.",
    "PlantUML": "class Compressor {\n  +compress(content: Content): Content\n}\n\nCDN --> Compressor : \"compresses\"\n",
    "Model": "J4",
    "RequirementIndex": "11",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Compressor",
          "children": [
            {
              "type": "method",
              "value": "compress(content: Content)",
              "visibility": "+",
              "data_type": "Content"
            }
          ]
        },
        {
          "type": "class",
          "value": "CDN",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Compressor"
                }
              ],
              "label": "\"compresses\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Among the features of FailoverManager are a method detectFailure, method rerouteTraffic. CDN depends on FailoverManager.",
    "PlantUML": "class FailoverManager {\n  + detectFailure(edgeServer: EdgeServer)\n  + rerouteTraffic(failedServer: EdgeServer)\n}\n\nCDN --> FailoverManager : \"ensures failover\"\n",
    "Model": "J4",
    "RequirementIndex": "12",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "FailoverManager",
          "children": [
            {
              "type": "method",
              "value": "detectFailure(edgeServer: EdgeServer)",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "rerouteTraffic(failedServer: EdgeServer)",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "CDN",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "FailoverManager"
                }
              ],
              "label": "\"ensures failover\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The structure of Repository comprises name attribute, url attribute and method createRepository, cloneRepository, method deleteRepository. The structure of User comprises accessRepository and username. User needs Repository.",
    "PlantUML": "\nclass Repository {\n  - name: String\n  - url: String\n  + createRepository()\n  + cloneRepository()\n  + deleteRepository()\n}\n\nclass User {\n  - username: String\n  + accessRepository()\n}\n\nUser --> Repository : \"manages\"",
    "Model": "J5",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Repository",
          "children": [
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "url",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "createRepository()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "cloneRepository()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "deleteRepository()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "username",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "accessRepository()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Repository"
                }
              ],
              "label": "\"manages\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Branch encapsulates a method createBranch, a method switchBranch, deleteBranch and an attribute name. Repository needs Branch.",
    "PlantUML": "class Branch {\n  - name: String\n  + createBranch()\n  + switchBranch()\n  + deleteBranch()\n}\n\nRepository --> Branch : contains",
    "Model": "J5",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Branch",
          "children": [
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "createBranch()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "switchBranch()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "deleteBranch()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Repository",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Branch"
                }
              ],
              "label": "contains"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Among the features of Commit are an attribute hash, message and method stageChanges, method commitChanges. Branch needs Commit. User depends on Commit.",
    "PlantUML": "class Commit {\n  - hash: String\n  - message: String\n  + stageChanges()\n  + commitChanges()\n}\n\nBranch --> Commit : \"tracks\"\nUser --> Commit : \"makes\"",
    "Model": "J5",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Commit",
          "children": [
            {
              "type": "attribute",
              "value": "hash",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "message",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "stageChanges()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "commitChanges()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Branch",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Commit"
                }
              ],
              "label": "\"tracks\""
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Commit"
                }
              ],
              "label": "\"makes\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Class Merge contains mergeBranches, resolveConflicts. Branch depends on Merge.",
    "PlantUML": "class Merge {\n  +mergeBranches()\n  +resolveConflicts()\n}\n\nBranch --> Merge : \"merges\"",
    "Model": "J5",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Merge",
          "children": [
            {
              "type": "method",
              "value": "mergeBranches()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "resolveConflicts()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Branch",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Merge"
                }
              ],
              "label": "\"merges\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "In History, you can find a method viewLogs. Commit needs History. Repository depends on History.",
    "PlantUML": "class History {\n  +viewLogs()\n}\n\nCommit --> History : \"maintains\"\nRepository --> History : \"contains\"\n",
    "Model": "J5",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "History",
          "children": [
            {
              "type": "method",
              "value": "viewLogs()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Commit",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "History"
                }
              ],
              "label": "\"maintains\""
            }
          ]
        },
        {
          "type": "class",
          "value": "Repository",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "History"
                }
              ],
              "label": "\"contains\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Collaboration includes method pushChanges, pullChanges. User depends on Collaboration. Repository needs Collaboration.",
    "PlantUML": "class Collaboration {\n    +pushChanges()\n    +pullChanges()\n}\n\nUser --> Collaboration : \"participates\"\nRepository --> Collaboration : \"facilitates\"",
    "Model": "J5",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Collaboration",
          "children": [
            {
              "type": "method",
              "value": "pushChanges()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "pullChanges()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Collaboration"
                }
              ],
              "label": "\"participates\""
            }
          ]
        },
        {
          "type": "class",
          "value": "Repository",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Collaboration"
                }
              ],
              "label": "\"facilitates\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "In AccessControl, you can find an attribute permissions and a method assignRole, checkPermission. User needs AccessControl. Repository needs AccessControl.",
    "PlantUML": "class AccessControl {\n  - permissions: String\n  + assignRole()\n  + checkPermission()\n}\n\nUser --> AccessControl : \"uses\"\nRepository --> AccessControl : \"enforces\"",
    "Model": "J5",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AccessControl",
          "children": [
            {
              "type": "attribute",
              "value": "permissions",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "assignRole()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "checkPermission()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "AccessControl"
                }
              ],
              "label": "\"uses\""
            }
          ]
        },
        {
          "type": "class",
          "value": "Repository",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "AccessControl"
                }
              ],
              "label": "\"enforces\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The design of Tag integrates name and a method createTag, method deleteTag. Commit depends on Tag.",
    "PlantUML": "class Tag {\n  - name: String\n  + createTag()\n  + deleteTag()\n}\n\nCommit --> Tag : \"associates\"",
    "Model": "J5",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Tag",
          "children": [
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "createTag()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "deleteTag()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Commit",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Tag"
                }
              ],
              "label": "\"associates\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Conflict includes method detectConflict, resolveConflict. Merge depends on Conflict. File needs Conflict.",
    "PlantUML": "class Conflict {\n  +detectConflict()\n  +resolveConflict()\n}\n\nMerge --> Conflict : \"handles\"\nFile --> Conflict : \"detects\"\n",
    "Model": "J5",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Conflict",
          "children": [
            {
              "type": "method",
              "value": "detectConflict()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "resolveConflict()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Merge",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Conflict"
                }
              ],
              "label": "\"handles\""
            }
          ]
        },
        {
          "type": "class",
          "value": "File",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Conflict"
                }
              ],
              "label": "\"detects\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Backup is defined by createBackup, method restoreBackup.",
    "PlantUML": "class Backup {\n  +createBackup()\n  +restoreBackup()\n}\n\n",
    "Model": "J5",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Backup",
          "children": [
            {
              "type": "method",
              "value": "createBackup()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "restoreBackup()",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Repository needs Backup.",
    "PlantUML": "Repository --> Backup : \"supports\"",
    "Model": "J5",
    "RequirementIndex": "10",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Repository",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Backup"
                }
              ],
              "label": "\"supports\""
            }
          ]
        },
        {
          "type": "class",
          "value": "Backup",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Teacher is defined by createClass and an attribute teacherId, name attribute. Teacher depends on Class. Class encapsulates classId, name, an attribute code, teacherId.",
    "PlantUML": "class Teacher {\n  -teacherId: String\n  -name: String\n  +createClass(name: String): Class\n}\n\nclass Class {\n  -classId: String\n  -name: String\n  -code: String\n  -teacherId: String\n}\nTeacher --> Class : creates",
    "Model": "J6",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Teacher",
          "children": [
            {
              "type": "attribute",
              "value": "teacherId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "createClass(name: String)",
              "visibility": "+",
              "data_type": "Class"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Class"
                }
              ],
              "label": "creates"
            }
          ]
        },
        {
          "type": "class",
          "value": "Class",
          "children": [
            {
              "type": "attribute",
              "value": "classId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "code",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "teacherId",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "QRCode is defined by an attribute qrId, an attribute classId, an attribute sessionDate, content and method generate. Class depends on QRCode.",
    "PlantUML": "class QRCode {\n  -qrId: String\n  -classId: String\n  -sessionDate: Date\n  -content: String\n  +generate(): void\n}\n\nClass --> QRCode : generates",
    "Model": "J6",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "QRCode",
          "children": [
            {
              "type": "attribute",
              "value": "qrId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "classId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "sessionDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "content",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "generate()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Class",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "QRCode"
                }
              ],
              "label": "generates"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "In Student, you can find scanQRCode and an attribute studentId, name. Student needs Attendance. Class Attendance contains an attribute attendanceId, an attribute studentId, an attribute classId, sessionDate, an attribute status.",
    "PlantUML": "class Student {\n  -studentId: String\n  -name: String\n  +scanQRCode(code: String): void\n}\n\nclass Attendance {\n  -attendanceId: String\n  -studentId: String\n  -classId: String\n  -sessionDate: Date\n  -status: String\n}\n\nStudent --> Attendance : scans",
    "Model": "J6",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Student",
          "children": [
            {
              "type": "attribute",
              "value": "studentId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "scanQRCode(code: String)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Attendance"
                }
              ],
              "label": "scans"
            }
          ]
        },
        {
          "type": "class",
          "value": "Attendance",
          "children": [
            {
              "type": "attribute",
              "value": "attendanceId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "studentId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "classId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "sessionDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The design of QRValidator integrates a method validate. QRCode depends on QRValidator.",
    "PlantUML": "class QRValidator {\n  +validate(code: String): Boolean\n}\n\nQRCode --> QRValidator : validates",
    "Model": "J6",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "QRValidator",
          "children": [
            {
              "type": "method",
              "value": "validate(code: String)",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        },
        {
          "type": "class",
          "value": "QRCode",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "QRValidator"
                }
              ],
              "label": "validates"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The Database has saveAttendance, a method getAttendanceByStudent. Attendance depends on Database.",
    "PlantUML": "class Database {\n  +saveAttendance(attendance: Attendance): void\n  +getAttendanceByStudent(studentId: String): List<Attendance>\n}\n\nAttendance --> Database : storedIn",
    "Model": "J6",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Database",
          "children": [
            {
              "type": "method",
              "value": "saveAttendance(attendance: Attendance)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "getAttendanceByStudent(studentId: String)",
              "visibility": "+",
              "data_type": "List<Attendance>"
            }
          ]
        },
        {
          "type": "class",
          "value": "Attendance",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Database"
                }
              ],
              "label": "storedIn"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Teacher depends on Attendance.",
    "PlantUML": "Teacher --> Attendance : views",
    "Model": "J6",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Teacher",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Attendance"
                }
              ],
              "label": "views"
            }
          ]
        },
        {
          "type": "class",
          "value": "Attendance",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Student needs Attendance.",
    "PlantUML": "Student --> Attendance : views ",
    "Model": "J6",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Student",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Attendance"
                }
              ],
              "label": "views"
            }
          ]
        },
        {
          "type": "class",
          "value": "Attendance",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "AttendanceManager includes a method markAttendance. AttendanceManager depends on Attendance.",
    "PlantUML": "class AttendanceManager {\n  +markAttendance(studentId: String, classId: String, sessionDate: Date): String\n}\n\nAttendanceManager --> Attendance : prevents",
    "Model": "J6",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AttendanceManager",
          "children": [
            {
              "type": "method",
              "value": "markAttendance(studentId: String, classId: String, sessionDate: Date)",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Attendance"
                }
              ],
              "label": "prevents"
            }
          ]
        },
        {
          "type": "class",
          "value": "Attendance",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Among the features of User are register, login and an attribute userId, name, an attribute email, password.",
    "PlantUML": "class User {\n  - userId: String\n  - name: String\n  - email: String\n  - password: String\n  + register(): void\n  + login(): boolean\n}\n",
    "Model": "J7",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "register()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "login()",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Among the features of Event are eventId attribute, title attribute, an attribute date, venue, an attribute description and method createEvent, method updateEvent, deleteEvent.",
    "PlantUML": "class Event {\n  - eventId: String\n  - title: String\n  - date: Date\n  - venue: String\n  - description: String\n  + createEvent(): void\n  + updateEvent(): void\n  + deleteEvent(): void\n}\n",
    "Model": "J7",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Event",
          "children": [
            {
              "type": "attribute",
              "value": "eventId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "date",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "venue",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "createEvent()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "updateEvent()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "deleteEvent()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The design of Booking integrates bookingId, userId attribute, eventId, an attribute ticketCount, bookingDate attribute and method makeBooking. User is linked to Booking.",
    "PlantUML": "class Booking {\n  - bookingId: String\n  - userId: String\n  - eventId: String\n  - ticketCount: int\n  - bookingDate: Date\n  + makeBooking(): boolean\n}\nUser \"1\" -- \"0..*\" Booking : makes ",
    "Model": "J7",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Booking",
          "children": [
            {
              "type": "attribute",
              "value": "bookingId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "userId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "eventId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "ticketCount",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "bookingDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "method",
              "value": "makeBooking()",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Booking"
                }
              ],
              "label": "makes",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "In Payment, you can find paymentId attribute, bookingId, amount attribute, status and a method processPayment. Booking is linked to Payment.",
    "PlantUML": "class Payment {\n  - paymentId: String\n  - bookingId: String\n  - amount: double\n  - status: String\n  + processPayment(): boolean\n}\nBooking \"1\" -- \"1\" Payment : paid",
    "Model": "J7",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Payment",
          "children": [
            {
              "type": "attribute",
              "value": "paymentId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "bookingId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "amount",
              "visibility": "-",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "processPayment()",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        },
        {
          "type": "class",
          "value": "Booking",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Payment"
                }
              ],
              "label": "paid",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "ETicket is defined by a method generateTicket, method sendToEmail and ticketId attribute, an attribute bookingId, an attribute qrCode. Booking is linked to Eticket.",
    "PlantUML": "class ETicket {\n  - ticketId: String\n  - bookingId: String\n  - qrCode: String\n  + generateTicket(): void\n  + sendToEmail(): void\n}\nBooking \"1\" -- \"1\" Eticket",
    "Model": "J7",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ETicket",
          "children": [
            {
              "type": "attribute",
              "value": "ticketId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "bookingId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "qrCode",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "generateTicket()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "sendToEmail()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Booking",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Eticket"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Eticket",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "EventSearch is defined by searchByKeyword, filterByDate, filterByLocation.",
    "PlantUML": "class EventSearch {\n  + searchByKeyword(keyword: String): List<Event>\n  + filterByDate(date: Date): List<Event>\n  + filterByLocation(location: String): List<Event>\n}\n",
    "Model": "J7",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "EventSearch",
          "children": [
            {
              "type": "method",
              "value": "searchByKeyword(keyword: String)",
              "visibility": "+",
              "data_type": "List<Event>"
            },
            {
              "type": "method",
              "value": "filterByDate(date: Date)",
              "visibility": "+",
              "data_type": "List<Event>"
            },
            {
              "type": "method",
              "value": "filterByLocation(location: String)",
              "visibility": "+",
              "data_type": "List<Event>"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "In Admin, you can find a method manageUsers, a method moderateEvents, viewReports and adminId attribute, an attribute name. Admin is associated with User. Admin is linked to Event.",
    "PlantUML": "class Admin {\n  - adminId: String\n  - name: String\n  + manageUsers(): void\n  + moderateEvents(): void\n  + viewReports(): void\n}\nAdmin \"1\" -- \"*\" User : manages\nAdmin \"1\" -- \"*\" Event : moderates",
    "Model": "J7",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Admin",
          "children": [
            {
              "type": "attribute",
              "value": "adminId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "manageUsers()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "moderateEvents()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "viewReports()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "manages",
              "multiplicity1": "1",
              "multiplicity2": "*"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Event"
                }
              ],
              "label": "moderates",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        },
        {
          "type": "class",
          "value": "Event",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Notification encapsulates a method sendEmail, method sendSMS and an attribute notificationId, userId attribute, an attribute message. User is linked to Notification.",
    "PlantUML": "class Notification {\n  - notificationId: String\n  - userId: String\n  - message: String\n  + sendEmail(): void\n  + sendSMS(): void\n}\nUser \"1\" -- \"0..*\" Notification",
    "Model": "J7",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Notification",
          "children": [
            {
              "type": "attribute",
              "value": "notificationId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "userId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "message",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "sendEmail()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "sendSMS()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Notification"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The structure of Seat comprises a method reserveSeat, releaseSeat and an attribute seatId, eventId, isAvailable attribute.",
    "PlantUML": "class Seat {\n  - seatId: String\n  - eventId: String\n  - isAvailable: boolean\n  + reserveSeat(): boolean\n  + releaseSeat(): void\n}\n",
    "Model": "J7",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Seat",
          "children": [
            {
              "type": "attribute",
              "value": "seatId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "eventId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "isAvailable",
              "visibility": "-",
              "data_type": "boolean"
            },
            {
              "type": "method",
              "value": "reserveSeat()",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "method",
              "value": "releaseSeat()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Cancellation encapsulates an attribute cancellationId, bookingId attribute, refundAmount and method cancelBooking, processRefund.",
    "PlantUML": "class Cancellation {\n  - cancellationId: String\n  - bookingId: String\n  - refundAmount: double\n  + cancelBooking(): boolean\n  + processRefund(): boolean\n}\n",
    "Model": "J7",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Cancellation",
          "children": [
            {
              "type": "attribute",
              "value": "cancellationId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "bookingId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "refundAmount",
              "visibility": "-",
              "data_type": "double"
            },
            {
              "type": "method",
              "value": "cancelBooking()",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "method",
              "value": "processRefund()",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The design of Organizer integrates method createEvent, a method updateEvent, a method deleteEvent. Organizer is linked to Event. Organizer is related to User.",
    "PlantUML": "class Organizer {\n  + createEvent(): void\n  + updateEvent(): void\n  + deleteEvent(): void\n}\n\nOrganizer \"1\" -- \"0..*\" Event : organizes\nOrganizer --|> User",
    "Model": "J7",
    "RequirementIndex": "10",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Organizer",
          "children": [
            {
              "type": "method",
              "value": "createEvent()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "updateEvent()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "deleteEvent()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Event"
                }
              ],
              "label": "organizes",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            },
            {
              "type": "relation",
              "value": "--|>",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Event",
          "children": []
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Booking is associated with Event.",
    "PlantUML": "Booking \"1\" -- \"1\" Event",
    "Model": "J7",
    "RequirementIndex": "11",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Booking",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Event"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Event",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The structure of User comprises id attribute, username attribute, an attribute password, email attribute, an attribute role and method login, method logout.",
    "PlantUML": "class User {\n  -id: String\n  -username: String\n  -password: String\n  -email: String\n  -role: UserRole\n  +login(): boolean\n  +logout(): void\n}",
    "Model": "J8",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "username",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "role",
              "visibility": "-",
              "data_type": "UserRole"
            },
            {
              "type": "method",
              "value": "login()",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "method",
              "value": "logout()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Student includes enrolledCourses attribute. Among the features of Teacher are an attribute teachingCourses. User is a subclass of Student. User is a subclass of Teacher.",
    "PlantUML": "class Student {\n  -enrolledCourses: List<Course>\n}\n\nclass Teacher {\n  -teachingCourses: List<Course>\n}\n\nUser <|-- Student\nUser <|-- Teacher\n",
    "Model": "J8",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Student",
          "children": [
            {
              "type": "attribute",
              "value": "enrolledCourses",
              "visibility": "-",
              "data_type": "List<Course>"
            }
          ]
        },
        {
          "type": "class",
          "value": "Teacher",
          "children": [
            {
              "type": "attribute",
              "value": "teachingCourses",
              "visibility": "-",
              "data_type": "List<Course>"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Student"
                }
              ]
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Teacher"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Among the features of Course are addStudent and courseId attribute, title attribute, an attribute description, teacher, students attribute. Teacher is linked to Course. Student is linked to Course.",
    "PlantUML": "class Course {\n  -courseId: String\n  -title: String\n  -description: String\n  -teacher: Teacher\n  -students: List<Student>\n  +addStudent(s: Student): void\n}\n\nTeacher \"1\" -- \"0..*\" Course : creates \nStudent \"0..*\" -- \"0..*\" Course : enrolls \n",
    "Model": "J8",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Course",
          "children": [
            {
              "type": "attribute",
              "value": "courseId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "teacher",
              "visibility": "-",
              "data_type": "Teacher"
            },
            {
              "type": "attribute",
              "value": "students",
              "visibility": "-",
              "data_type": "List<Student>"
            },
            {
              "type": "method",
              "value": "addStudent(s: Student)",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Teacher",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Course"
                }
              ],
              "label": "creates",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Student",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Course"
                }
              ],
              "label": "enrolls",
              "multiplicity1": "0..*",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "In VirtualSession, you can find join and sessionId, startTime attribute, an attribute durationMinutes, course attribute. Course is linked to VirtualSession.",
    "PlantUML": "class VirtualSession {\n  -sessionId: String\n  -startTime: DateTime\n  -durationMinutes: int\n  -course: Course\n  +join(): void\n}\n\nCourse \"1\" -- \"0..*\" VirtualSession : contains ",
    "Model": "J8",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "VirtualSession",
          "children": [
            {
              "type": "attribute",
              "value": "sessionId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "startTime",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "durationMinutes",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "course",
              "visibility": "-",
              "data_type": "Course"
            },
            {
              "type": "method",
              "value": "join()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Course",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "VirtualSession"
                }
              ],
              "label": "contains",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The structure of Assignment comprises an attribute assignmentId, an attribute title, an attribute description, deadline, an attribute course. Assignment is linked to Submission. The Submission has an attribute submissionId, an attribute student, an attribute fileLink, submittedAt. Student is associated with Submission. Course is linked to Assignment.",
    "PlantUML": "class Assignment {\n  -assignmentId: String\n  -title: String\n  -description: String\n  -deadline: DateTime\n  -course: Course\n}\n\nclass Submission {\n  -submissionId: String\n  -student: Student\n  -fileLink: String\n  -submittedAt: DateTime\n}\n\nAssignment \"1\" -- \"0..*\" Submission : receives \nStudent \"1\" -- \"0..*\" Submission : submits \nCourse \"1\" -- \"0..*\" Assignment : assigns \n",
    "Model": "J8",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Assignment",
          "children": [
            {
              "type": "attribute",
              "value": "assignmentId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "deadline",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "course",
              "visibility": "-",
              "data_type": "Course"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Submission"
                }
              ],
              "label": "receives",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Submission",
          "children": [
            {
              "type": "attribute",
              "value": "submissionId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "student",
              "visibility": "-",
              "data_type": "Student"
            },
            {
              "type": "attribute",
              "value": "fileLink",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "submittedAt",
              "visibility": "-",
              "data_type": "DateTime"
            }
          ]
        },
        {
          "type": "class",
          "value": "Student",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Submission"
                }
              ],
              "label": "submits",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Course",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Assignment"
                }
              ],
              "label": "assigns",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Message includes an attribute messageId, sender, an attribute content, timestamp. The ChatRoom has an attribute roomId, participants, messages attribute. ChatRoom is linked to Message. User is linked to ChatRoom.",
    "PlantUML": "class Message {\n  -messageId: String\n  -sender: User\n  -content: String\n  -timestamp: DateTime\n}\n\nclass ChatRoom {\n  -roomId: String\n  -participants: List<User>\n  -messages: List<Message>\n}\n\nChatRoom \"1\" -- \"0..*\" Message : contains \nUser \"0..*\" -- \"0..*\" ChatRoom : participates \n",
    "Model": "J8",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Message",
          "children": [
            {
              "type": "attribute",
              "value": "messageId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "sender",
              "visibility": "-",
              "data_type": "User"
            },
            {
              "type": "attribute",
              "value": "content",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "-",
              "data_type": "DateTime"
            }
          ]
        },
        {
          "type": "class",
          "value": "ChatRoom",
          "children": [
            {
              "type": "attribute",
              "value": "roomId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "participants",
              "visibility": "-",
              "data_type": "List<User>"
            },
            {
              "type": "attribute",
              "value": "messages",
              "visibility": "-",
              "data_type": "List<Message>"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Message"
                }
              ],
              "label": "contains",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "ChatRoom"
                }
              ],
              "label": "participates",
              "multiplicity1": "0..*",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Class Material contains materialId, title, an attribute type, an attribute linkOrFile. Course is linked to Material.",
    "PlantUML": "class Material {\n  -materialId: String\n  -title: String\n  -type: MaterialType\n  -linkOrFile: String\n}\n\nCourse \"1\" -- \"0..*\" Material : provides \n",
    "Model": "J8",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Material",
          "children": [
            {
              "type": "attribute",
              "value": "materialId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "type",
              "visibility": "-",
              "data_type": "MaterialType"
            },
            {
              "type": "attribute",
              "value": "linkOrFile",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Course",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Material"
                }
              ],
              "label": "provides",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The design of Grade integrates gradeId attribute, score, feedback attribute, submission. Submission is linked to Grade.",
    "PlantUML": "class Grade {\n  -gradeId: String\n  -score: float\n  -feedback: String\n  -submission: Submission\n}\n\nSubmission \"1\" -- \"0..1\" Grade : evaluatedBy ",
    "Model": "J8",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Grade",
          "children": [
            {
              "type": "attribute",
              "value": "gradeId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "score",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "attribute",
              "value": "feedback",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "submission",
              "visibility": "-",
              "data_type": "Submission"
            }
          ]
        },
        {
          "type": "class",
          "value": "Submission",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Grade"
                }
              ],
              "label": "evaluatedBy",
              "multiplicity1": "1",
              "multiplicity2": "0..1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Notification encapsulates an attribute notificationId, content, an attribute timestamp, user attribute, isRead attribute. User is associated with Notification.",
    "PlantUML": "class Notification {\n  -notificationId: String\n  -content: String\n  -timestamp: DateTime\n  -user: User\n  -isRead: boolean\n}\n\nUser \"1\" -- \"0..*\" Notification : receives",
    "Model": "J8",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Notification",
          "children": [
            {
              "type": "attribute",
              "value": "notificationId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "content",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "user",
              "visibility": "-",
              "data_type": "User"
            },
            {
              "type": "attribute",
              "value": "isRead",
              "visibility": "-",
              "data_type": "boolean"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Notification"
                }
              ],
              "label": "receives",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The Attendance has an attribute attendanceId, student, session attribute, an attribute status. Student is associated with Attendance. VirtualSession is linked to Attendance.",
    "PlantUML": "class Attendance {\n  -attendanceId: String\n  -student: Student\n  -session: VirtualSession\n  -status: AttendanceStatus\n}\n\nStudent \"1\" -- \"0..*\" Attendance : has >\nVirtualSession \"1\" -- \"0..*\" Attendance : records >\n",
    "Model": "J8",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Attendance",
          "children": [
            {
              "type": "attribute",
              "value": "attendanceId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "student",
              "visibility": "-",
              "data_type": "Student"
            },
            {
              "type": "attribute",
              "value": "session",
              "visibility": "-",
              "data_type": "VirtualSession"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "AttendanceStatus"
            }
          ]
        },
        {
          "type": "class",
          "value": "Student",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Attendance"
                }
              ],
              "label": "has >",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "VirtualSession",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Attendance"
                }
              ],
              "label": "records >",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "In User, you can find an attribute userID, an attribute name, email attribute, password attribute and a method login, method updateProfile. User is a subclass of Patient. User is a subclass of Doctor. User is a subclass of Admin.",
    "PlantUML": "class User {\n  -userID: String\n  -name: String\n  -email: String\n  -password: String\n  +login(): void\n  +updateProfile(): void\n}\n\nUser <|-- Patient\nUser <|-- Doctor\nUser <|-- Admin\n\n",
    "Model": "J9",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "login()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "updateProfile()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Patient"
                }
              ]
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Doctor"
                }
              ]
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Admin"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Patient",
          "children": []
        },
        {
          "type": "class",
          "value": "Doctor",
          "children": []
        },
        {
          "type": "class",
          "value": "Admin",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "DoctorProfile is defined by specialization attribute, availability, experienceYears attribute and method updateAvailability. Doctor is aggregated in DoctorProfile.",
    "PlantUML": "class DoctorProfile {\n  -specialization: String\n  -availability: String\n  -experienceYears: int\n  +updateAvailability(): void\n}\n\nDoctor o-- DoctorProfile\n",
    "Model": "J9",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "DoctorProfile",
          "children": [
            {
              "type": "attribute",
              "value": "specialization",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "availability",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "experienceYears",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "method",
              "value": "updateAvailability()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Doctor",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "DoctorProfile"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The design of Appointment integrates an attribute appointmentID, an attribute dateTime, status attribute and a method book, method cancel. Patient needs Appointment. Doctor needs Appointment.",
    "PlantUML": "class Appointment {\n  -appointmentID: String\n  -dateTime: DateTime\n  -status: String\n  +book(): void\n  +cancel(): void\n}\n\nPatient --> Appointment\nDoctor --> Appointment\n",
    "Model": "J9",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Appointment",
          "children": [
            {
              "type": "attribute",
              "value": "appointmentID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "dateTime",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "book()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "cancel()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Patient",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Appointment"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Doctor",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Appointment"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Prescription includes method generatePDF and an attribute prescriptionID, dateIssued, notes. Prescription depends on Medicine. The design of Medicine integrates name, dosage, duration attribute. Appointment needs Prescription.",
    "PlantUML": "class Prescription {\n  -prescriptionID: String\n  -dateIssued: Date\n  -notes: String\n  +generatePDF(): void\n}\n\nclass Medicine {\n  -name: String\n  -dosage: String\n  -duration: String\n}\n\nPrescription \"1\" --> \"1..*\" Medicine\nAppointment \"1\" --> Prescription\n",
    "Model": "J9",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Prescription",
          "children": [
            {
              "type": "attribute",
              "value": "prescriptionID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "dateIssued",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "notes",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "generatePDF()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Medicine"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "1..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Medicine",
          "children": [
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "dosage",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "duration",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Appointment",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Prescription"
                }
              ],
              "multiplicity1": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Class MedicalHistory contains getHistory and historyID attribute. MedicalHistory needs Appointment. MedicalHistory needs Prescription. Patient depends on MedicalHistory.",
    "PlantUML": "class MedicalHistory {\n  -historyID: String\n  +getHistory(): void\n}\n\nPatient --> MedicalHistory\nMedicalHistory \"1\" --> \"0..*\" Appointment\nMedicalHistory \"1\" --> \"0..*\" Prescription\n",
    "Model": "J9",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "MedicalHistory",
          "children": [
            {
              "type": "attribute",
              "value": "historyID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "getHistory()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Appointment"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Prescription"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Patient",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "MedicalHistory"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Appointment",
          "children": []
        },
        {
          "type": "class",
          "value": "Prescription",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The design of Notification integrates method send and notificationID attribute, type attribute, message attribute. User needs Notification. Appointment needs Notification. Prescription needs Notification.",
    "PlantUML": "class Notification {\n  -notificationID: String\n  -type: String\n  -message: String\n  +send(): void\n}\n\nUser --> \"0..*\" Notification\nAppointment --> Notification : \"Reminder\"\nPrescription --> Notification : \"Refill Alert\"\n",
    "Model": "J9",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Notification",
          "children": [
            {
              "type": "attribute",
              "value": "notificationID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "type",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "message",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "send()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Notification"
                }
              ],
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Appointment",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Notification"
                }
              ],
              "label": "\"Reminder\""
            }
          ]
        },
        {
          "type": "class",
          "value": "Prescription",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Notification"
                }
              ],
              "label": "\"Refill Alert\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "In AdminPanel, you can find manageUsers, method viewReports, approveDoctor. Admin needs AdminPanel.",
    "PlantUML": "class AdminPanel {\n  +manageUsers(): void\n  +viewReports(): void\n  +approveDoctor(): void\n}\n\nAdmin --> AdminPanel\n",
    "Model": "J9",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AdminPanel",
          "children": [
            {
              "type": "method",
              "value": "manageUsers()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "viewReports()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "approveDoctor()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Admin",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "AdminPanel"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "In Invoice, you can find a method generateInvoice and invoiceID, an attribute amount, dateIssued attribute. Appointment depends on Invoice. Prescription needs Invoice. Patient depends on Invoice.",
    "PlantUML": "class Invoice {\n  -invoiceID: String\n  -amount: Float\n  -dateIssued: Date\n  +generateInvoice(): void\n}\n\nAppointment --> Invoice\nPrescription --> Invoice\nPatient --> Invoice\n",
    "Model": "J9",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Invoice",
          "children": [
            {
              "type": "attribute",
              "value": "invoiceID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "amount",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "attribute",
              "value": "dateIssued",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "method",
              "value": "generateInvoice()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Appointment",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Invoice"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Prescription",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Invoice"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Patient",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Invoice"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "SearchEngine is defined by a method searchByName, method searchBySpecialization, a method filterByAvailability. Patient depends on SearchEngine.",
    "PlantUML": "class SearchEngine {\n  +searchByName(name: String): List<Doctor>\n  +searchBySpecialization(spec: String): List<Doctor>\n  +filterByAvailability(): List<Doctor>\n}\n\nPatient --> SearchEngine\n",
    "Model": "J9",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "SearchEngine",
          "children": [
            {
              "type": "method",
              "value": "searchByName(name: String)",
              "visibility": "+",
              "data_type": "List<Doctor>"
            },
            {
              "type": "method",
              "value": "searchBySpecialization(spec: String)",
              "visibility": "+",
              "data_type": "List<Doctor>"
            },
            {
              "type": "method",
              "value": "filterByAvailability()",
              "visibility": "+",
              "data_type": "List<Doctor>"
            }
          ]
        },
        {
          "type": "class",
          "value": "Patient",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "SearchEngine"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "In AuditLog, you can find an attribute logID, an attribute timestamp, action attribute, an attribute performedBy and record. User needs AuditLog. Appointment needs AuditLog. Prescription needs AuditLog.",
    "PlantUML": "class AuditLog {\n  -logID: String\n  -timestamp: DateTime\n  -action: String\n  -performedBy: String\n  +record(): void\n}\n\nUser  \"1\"--> \"0..*\" AuditLog\nAppointment --> AuditLog\nPrescription --> AuditLog\n",
    "Model": "J9",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AuditLog",
          "children": [
            {
              "type": "attribute",
              "value": "logID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "action",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "performedBy",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "record()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "AuditLog"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Appointment",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "AuditLog"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Prescription",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "AuditLog"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Among the features of User are an attribute userID, username, email, an attribute password and a method login, method logout, updateProfile.",
    "PlantUML": "class User {\n  +userID: String\n  +username: String\n  +email: String\n  +password: String\n  +login(): boolean\n  +logout(): void\n  +updateProfile(): void\n}",
    "Model": "J10",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "username",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "login()",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "method",
              "value": "logout()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "updateProfile()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "In Content, you can find method upload, a method edit, a method delete and contentID, title, an attribute description, uploadDate attribute. User is linked to Content.",
    "PlantUML": "class Content {\n  +contentID: String\n  +title: String\n  +description: String\n  +uploadDate: Date\n  +upload(): void\n  +edit(): void\n  +delete(): void\n}\n\nUser \"1\" -- \"*\" Content : uploads",
    "Model": "J10",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Content",
          "children": [
            {
              "type": "attribute",
              "value": "contentID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "uploadDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "method",
              "value": "upload()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "edit()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "delete()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Content"
                }
              ],
              "label": "uploads",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "In VRPlayer, you can find method play, pause, a method stop. Content is linked to VRPlayer.",
    "PlantUML": "class VRPlayer {\n  +play(contentID: String): void\n  +pause(): void\n  +stop(): void\n}\n\nContent \"1\" -- \"1\" VRPlayer : \"used by\"",
    "Model": "J10",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "VRPlayer",
          "children": [
            {
              "type": "method",
              "value": "play(contentID: String)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "pause()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "stop()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Content",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "VRPlayer"
                }
              ],
              "label": "\"used by\"",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Feedback includes feedbackID attribute, rating, comment attribute, date. User is linked to Feedback. Content is associated with Feedback.",
    "PlantUML": "class Feedback {\n  +feedbackID: String\n  +rating: int\n  +comment: String\n  +date: Date\n}\n\nUser \"1\" -- \"*\" Feedback : gives \nContent \"1\" -- \"*\" Feedback : receives ",
    "Model": "J10",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Feedback",
          "children": [
            {
              "type": "attribute",
              "value": "feedbackID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "rating",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "comment",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "date",
              "visibility": "+",
              "data_type": "Date"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Feedback"
                }
              ],
              "label": "gives",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Content",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Feedback"
                }
              ],
              "label": "receives",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "RecommendationEngine encapsulates method generateRecommendations. User is linked to RecommendationEngine.",
    "PlantUML": "class RecommendationEngine {\n  +generateRecommendations(userID: String): List<Content>\n}\n\nUser \"1\" -- \"1\" RecommendationEngine : \"personalized for\"",
    "Model": "J10",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "RecommendationEngine",
          "children": [
            {
              "type": "method",
              "value": "generateRecommendations(userID: String)",
              "visibility": "+",
              "data_type": "List<Content>"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "RecommendationEngine"
                }
              ],
              "label": "\"personalized for\"",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Category is defined by categoryID, name attribute. Tag includes an attribute tagID, name attribute. Content is linked to Category. Content is associated with Tag.",
    "PlantUML": "class Category {\n  +categoryID: String\n  +name: String\n}\n\nclass Tag {\n  +tagID: String\n  +name: String\n}\n\nContent \"*\" -- \"*\" Category : \"belongs to\"\nContent \"*\" -- \"*\" Tag : \"tagged with\"",
    "Model": "J10",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Category",
          "children": [
            {
              "type": "attribute",
              "value": "categoryID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Tag",
          "children": [
            {
              "type": "attribute",
              "value": "tagID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Content",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Category"
                }
              ],
              "label": "\"belongs to\"",
              "multiplicity1": "*",
              "multiplicity2": "*"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Tag"
                }
              ],
              "label": "\"tagged with\"",
              "multiplicity1": "*",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Subscription includes an attribute subscriptionID, planType attribute, startDate attribute, endDate. Subscription is associated with Payment. Payment includes an attribute paymentID, amount, an attribute date. User is linked to Subscription.",
    "PlantUML": "class Subscription {\n  +subscriptionID: String\n  +planType: String\n  +startDate: Date\n  +endDate: Date\n}\n\nUser \"1\" -- \"0..1\" Subscription : has\n\nclass Payment {\n  +paymentID: String\n  +amount: double\n  +date: Date\n}\n\nSubscription \"1\" -- \"*\" Payment : generates",
    "Model": "J10",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Subscription",
          "children": [
            {
              "type": "attribute",
              "value": "subscriptionID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "planType",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "startDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "endDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Payment"
                }
              ],
              "label": "generates",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Payment",
          "children": [
            {
              "type": "attribute",
              "value": "paymentID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "amount",
              "visibility": "+",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "date",
              "visibility": "+",
              "data_type": "Date"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Subscription"
                }
              ],
              "label": "has",
              "multiplicity1": "1",
              "multiplicity2": "0..1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "In Admin, you can find adminID attribute and method manageUsers, method moderateContent, viewAnalytics. Admin is linked to User. Admin is linked to Content.",
    "PlantUML": "class Admin {\n  +adminID: String\n  +manageUsers(): void\n  +moderateContent(): void\n  +viewAnalytics(): void\n}\n\nAdmin \"1\" -- \"*\" User : manages \nAdmin \"1\" -- \"*\" Content : moderates",
    "Model": "J10",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Admin",
          "children": [
            {
              "type": "attribute",
              "value": "adminID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "manageUsers()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "moderateContent()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "viewAnalytics()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "manages",
              "multiplicity1": "1",
              "multiplicity2": "*"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Content"
                }
              ],
              "label": "moderates",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        },
        {
          "type": "class",
          "value": "Content",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The Device has deviceID attribute, an attribute type, an attribute isVRCapable. User is linked to Device.",
    "PlantUML": "class Device {\n  +deviceID: String\n  +type: String\n  +isVRCapable: boolean\n}\n\nUser \"1\" -- \"*\" Device : uses",
    "Model": "J10",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Device",
          "children": [
            {
              "type": "attribute",
              "value": "deviceID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "type",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "isVRCapable",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Device"
                }
              ],
              "label": "uses",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "In Session, you can find an attribute sessionID, startTime, an attribute endTime, contentID. User is linked to Session. Content is linked to Session.",
    "PlantUML": "class Session {\n  +sessionID: String\n  +startTime: Date\n  +endTime: Date\n  +contentID: String\n}\n\nUser \"1\" -- \"*\" Session : watches\nContent \"1\" -- \"*\" Session : viewed in",
    "Model": "J10",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Session",
          "children": [
            {
              "type": "attribute",
              "value": "sessionID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "startTime",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "endTime",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "contentID",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Session"
                }
              ],
              "label": "watches",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Content",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Session"
                }
              ],
              "label": "viewed in",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "User encapsulates userId attribute, an attribute email, an attribute password and register, method login.",
    "PlantUML": "class User {\n  -userId: String\n  -email: String\n  -password: String\n  +register(): void\n  +login(): boolean\n}\n",
    "Model": "J11",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "register()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "login()",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The Auction has an attribute auctionId, itemName attribute, currentBid, endTime and a method getDetails. User needs Auction.",
    "PlantUML": "class Auction {\n  -auctionId: String\n  -itemName: String\n  -currentBid: double\n  -endTime: DateTime\n  +getDetails(): String\n}\n\nUser --> Auction : searches/views\n",
    "Model": "J11",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Auction",
          "children": [
            {
              "type": "attribute",
              "value": "auctionId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "itemName",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "currentBid",
              "visibility": "-",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "endTime",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "method",
              "value": "getDetails()",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Auction"
                }
              ],
              "label": "searches/views"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Class Snipe contains configureSnipe and snipeId, maxBid, an attribute snipeTime. Snipe needs Auction. User depends on Snipe.",
    "PlantUML": "class Snipe {\n  -snipeId: String\n  -maxBid: double\n  -snipeTime: DateTime\n  +configureSnipe(): void\n}\n\nUser --> Snipe : configures\nSnipe --> Auction : targets\n",
    "Model": "J11",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Snipe",
          "children": [
            {
              "type": "attribute",
              "value": "snipeId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "maxBid",
              "visibility": "-",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "snipeTime",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "method",
              "value": "configureSnipe()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Auction"
                }
              ],
              "label": "targets"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Snipe"
                }
              ],
              "label": "configures"
            }
          ]
        },
        {
          "type": "class",
          "value": "Auction",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "BiddingEngine is defined by method executeSnipe. BiddingEngine depends on Snipe.",
    "PlantUML": "class BiddingEngine {\n  +executeSnipe(snipe: Snipe): boolean\n}\n\nBiddingEngine --> Snipe : uses\n",
    "Model": "J11",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "BiddingEngine",
          "children": [
            {
              "type": "method",
              "value": "executeSnipe(snipe: Snipe)",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Snipe"
                }
              ],
              "label": "uses"
            }
          ]
        },
        {
          "type": "class",
          "value": "Snipe",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The AuctionMonitor has a method trackAuction, a method notifyBiddingEngine. AuctionMonitor depends on Auction. AuctionMonitor needs BiddingEngine.",
    "PlantUML": "class AuctionMonitor {\n  +trackAuction(auction: Auction): void\n  +notifyBiddingEngine(): void\n}\n\nAuctionMonitor --> Auction : monitors\nAuctionMonitor --> BiddingEngine : notifies\n",
    "Model": "J11",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AuctionMonitor",
          "children": [
            {
              "type": "method",
              "value": "trackAuction(auction: Auction)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "notifyBiddingEngine()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Auction"
                }
              ],
              "label": "monitors"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "BiddingEngine"
                }
              ],
              "label": "notifies"
            }
          ]
        },
        {
          "type": "class",
          "value": "Auction",
          "children": []
        },
        {
          "type": "class",
          "value": "BiddingEngine",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "In Bid, you can find bidId attribute, amount attribute, an attribute timestamp. Bid needs Auction. User depends on Bid.",
    "PlantUML": "class Bid {\n  -bidId: String\n  -amount: double\n  -timestamp: DateTime\n}\n\nUser --> Bid : places\nBid --> Auction : for\n",
    "Model": "J11",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Bid",
          "children": [
            {
              "type": "attribute",
              "value": "bidId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "amount",
              "visibility": "-",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Auction"
                }
              ],
              "label": "for"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Bid"
                }
              ],
              "label": "places"
            }
          ]
        },
        {
          "type": "class",
          "value": "Auction",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "NotificationService is defined by sendEmail. NotificationService depends on User.",
    "PlantUML": "class NotificationService {\n  +sendEmail(user: User, message: String): void\n}\n\nNotificationService --> User : notifies\n",
    "Model": "J11",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "NotificationService",
          "children": [
            {
              "type": "method",
              "value": "sendEmail(user: User, message: String)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "notifies"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Among the features of TimeSyncService are syncTime. BiddingEngine depends on TimeSyncService.",
    "PlantUML": "class TimeSyncService {\n  +syncTime(): DateTime\n}\nBiddingEngine --> TimeSyncService : requests accurate time\n",
    "Model": "J11",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "TimeSyncService",
          "children": [
            {
              "type": "method",
              "value": "syncTime()",
              "visibility": "+",
              "data_type": "DateTime"
            }
          ]
        },
        {
          "type": "class",
          "value": "BiddingEngine",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "TimeSyncService"
                }
              ],
              "label": "requests accurate time"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "AuctionAPI is defined by a method fetchAuctions, placeBid. AuctionAPI does what is defined by AuctionMonitor. AuctionAPI does what is defined by BiddingEngine.",
    "PlantUML": "class AuctionAPI {\n  +fetchAuctions(): List<Auction>\n  +placeBid(auctionId: String, amount: double): boolean\n}\n\nAuctionAPI <|.. AuctionMonitor\nAuctionAPI <|.. BiddingEngine\n",
    "Model": "J11",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AuctionAPI",
          "children": [
            {
              "type": "method",
              "value": "fetchAuctions()",
              "visibility": "+",
              "data_type": "List<Auction>"
            },
            {
              "type": "method",
              "value": "placeBid(auctionId: String, amount: double)",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "<|..",
              "children": [
                {
                  "type": "class",
                  "value": "AuctionMonitor"
                }
              ]
            },
            {
              "type": "relation",
              "value": "<|..",
              "children": [
                {
                  "type": "class",
                  "value": "BiddingEngine"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "AuctionMonitor",
          "children": []
        },
        {
          "type": "class",
          "value": "BiddingEngine",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The design of Admin integrates viewUsers, method overrideSnipe and adminId attribute. Admin needs User. Admin needs Snipe.",
    "PlantUML": "class Admin {\n  -adminId: String\n  +viewUsers(): List<User>\n  +overrideSnipe(snipe: Snipe): void\n}\n\nAdmin --> User : manages\nAdmin --> Snipe : overrides\n",
    "Model": "J11",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Admin",
          "children": [
            {
              "type": "attribute",
              "value": "adminId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "viewUsers()",
              "visibility": "+",
              "data_type": "List<User>"
            },
            {
              "type": "method",
              "value": "overrideSnipe(snipe: Snipe)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "manages"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Snipe"
                }
              ],
              "label": "overrides"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        },
        {
          "type": "class",
          "value": "Snipe",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The User has uploadDocument. User needs Document. User needs Signature.",
    "PlantUML": "class User {\n  +uploadDocument(doc: Document, signature: Signature): void\n}\nclass Document {\n}\nclass Signature {\n}\n\nUser --> Document\nUser --> Signature\n",
    "Model": "J12",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "method",
              "value": "uploadDocument(doc: Document, signature: Signature)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Document"
                }
              ]
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Signature"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Document",
          "children": []
        },
        {
          "type": "class",
          "value": "Signature",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "In Validator, you can find a method validateSignature. Validator needs Document. Validator needs Signature. Validator needs PublicKey.",
    "PlantUML": "class Validator {\n  +validateSignature(doc: Document, sig: Signature, key: PublicKey): boolean\n}\nclass PublicKey {\n}\n\nValidator --> Document\nValidator --> Signature\nValidator --> PublicKey\n",
    "Model": "J12",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Validator",
          "children": [
            {
              "type": "method",
              "value": "validateSignature(doc: Document, sig: Signature, key: PublicKey)",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Document"
                }
              ]
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Signature"
                }
              ]
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "PublicKey"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "PublicKey",
          "children": []
        },
        {
          "type": "class",
          "value": "Document",
          "children": []
        },
        {
          "type": "class",
          "value": "Signature",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "UserRepository includes getUserCredentials, method getPublicKey. UserRepository needs PublicKey. UserRepository needs Credentials. User depends on UserRepository.",
    "PlantUML": "class UserRepository {\n  +getUserCredentials(username: String): Credentials\n  +getPublicKey(userId: String): PublicKey\n}\nclass Credentials{\n}\n\nUser --> UserRepository\nUserRepository --> PublicKey\nUserRepository --> Credentials\n",
    "Model": "J12",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "UserRepository",
          "children": [
            {
              "type": "method",
              "value": "getUserCredentials(username: String)",
              "visibility": "+",
              "data_type": "Credentials"
            },
            {
              "type": "method",
              "value": "getPublicKey(userId: String)",
              "visibility": "+",
              "data_type": "PublicKey"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "PublicKey"
                }
              ]
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Credentials"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Credentials",
          "children": []
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "UserRepository"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "PublicKey",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Among the features of VerificationResult are an attribute status, an attribute signer, timestamp attribute and displayResult. Validator depends on VerificationResult.",
    "PlantUML": "class VerificationResult {\n  -status: boolean\n  -signer: String\n  -timestamp: DateTime\n  +displayResult(): void\n}\nValidator --> VerificationResult\n",
    "Model": "J12",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "VerificationResult",
          "children": [
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "boolean"
            },
            {
              "type": "attribute",
              "value": "signer",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "method",
              "value": "displayResult()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Validator",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "VerificationResult"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The AuditLogger has logVerification. AuditLogger depends on VerificationResult. Validator needs AuditLogger.",
    "PlantUML": "class AuditLogger {\n  +logVerification(userId: String, result: VerificationResult): void\n}\n\nValidator --> AuditLogger\nAuditLogger --> VerificationResult\n",
    "Model": "J12",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AuditLogger",
          "children": [
            {
              "type": "method",
              "value": "logVerification(userId: String, result: VerificationResult)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "VerificationResult"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Validator",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "AuditLogger"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "VerificationResult",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The design of Certificate integrates format attribute and loadCertificate. Certificate is a subclass of X509Certificate. Validator needs Certificate.",
    "PlantUML": "class Certificate {\n  -format: String\n  +loadCertificate(path: String): void\n}\nCertificate <|-- X509Certificate\n\nValidator --> Certificate\n",
    "Model": "J12",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Certificate",
          "children": [
            {
              "type": "attribute",
              "value": "format",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "loadCertificate(path: String)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "X509Certificate"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "X509Certificate",
          "children": []
        },
        {
          "type": "class",
          "value": "Validator",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Certificate"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Class NotificationService contains method notifyUser. NotificationService needs User. Validator needs NotificationService.",
    "PlantUML": "class NotificationService {\n  +notifyUser(user: User, message: String): void\n}\n\nValidator --> NotificationService\nNotificationService --> User\n",
    "Model": "J12",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "NotificationService",
          "children": [
            {
              "type": "method",
              "value": "notifyUser(user: User, message: String)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Validator",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "NotificationService"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The design of AuthService integrates method authenticate. User depends on AuthService.",
    "PlantUML": "class AuthService {\n  +authenticate(username: String, password: String): boolean\n}\nUser --> AuthService\n",
    "Model": "J12",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AuthService",
          "children": [
            {
              "type": "method",
              "value": "authenticate(username: String, password: String)",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "AuthService"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "DocumentParser encapsulates method extractSignature. DocumentParser depends on Document. DocumentParser depends on Signature.",
    "PlantUML": "class DocumentParser {\n  +extractSignature(doc: Document): Signature\n}\n\nDocumentParser --> Document\nDocumentParser --> Signature\n",
    "Model": "J12",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "DocumentParser",
          "children": [
            {
              "type": "method",
              "value": "extractSignature(doc: Document)",
              "visibility": "+",
              "data_type": "Signature"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Document"
                }
              ]
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Signature"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Document",
          "children": []
        },
        {
          "type": "class",
          "value": "Signature",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The design of ReportGenerator integrates method generatePDF. ReportGenerator needs VerificationResult.",
    "PlantUML": "class ReportGenerator {\n  +generatePDF(result: VerificationResult): File\n}\nReportGenerator --> VerificationResult\n",
    "Model": "J12",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ReportGenerator",
          "children": [
            {
              "type": "method",
              "value": "generatePDF(result: VerificationResult)",
              "visibility": "+",
              "data_type": "File"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "VerificationResult"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "VerificationResult",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Campaign includes id attribute, name attribute, an attribute createdDate, status and a method create, a method edit, delete.",
    "PlantUML": "class Campaign {\n  -id: String\n  -name: String\n  -createdDate: Date\n  -status: String\n  +create()\n  +edit()\n  +delete()\n}\n",
    "Model": "J13",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Campaign",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "createdDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "create()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "edit()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "delete()",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Email encapsulates schedule, a method edit and an attribute id, subject, an attribute body, sendTime. Campaign is composed of Email.",
    "PlantUML": "class Email {\n  -id: String\n  -subject: String\n  -body: String\n  -sendTime: DateTime\n  +schedule()\n  +edit()\n}\n\nCampaign \"1\" *-- \"0..*\" Email : contains \n",
    "Model": "J13",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Email",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "subject",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "body",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "sendTime",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "method",
              "value": "schedule()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "edit()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Campaign",
          "children": [
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Email"
                }
              ],
              "label": "contains",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The design of ContactList integrates id, name and method addContact, method removeContact. Email depends on ContactList.",
    "PlantUML": "class ContactList {\n  -id: String\n  -name: String\n  +addContact()\n  +removeContact()\n}\n\nEmail \"1\" --> \"1\" ContactList : targets \n",
    "Model": "J13",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ContactList",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "addContact()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "removeContact()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Email",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "ContactList"
                }
              ],
              "label": "targets",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The Contact has id, email, an attribute firstName, an attribute lastName and updateInfo. ContactList has as a part Contact.",
    "PlantUML": "class Contact {\n  -id: String\n  -email: String\n  -firstName: String\n  -lastName: String\n  +updateInfo()\n}\n\nContactList \"1\" *-- \"0..*\" Contact : includes \n",
    "Model": "J13",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Contact",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "firstName",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "lastName",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "updateInfo()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "ContactList",
          "children": [
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Contact"
                }
              ],
              "label": "includes",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "DeliveryStatus encapsulates status attribute, timestamp attribute. Contact needs DeliveryStatus. Email depends on DeliveryStatus.",
    "PlantUML": "class DeliveryStatus {\n  -status: String\n  -timestamp: DateTime\n}\n\nContact \"1\" --> \"0..*\" DeliveryStatus : has \nEmail \"1\" --> \"0..*\" DeliveryStatus : results in \n",
    "Model": "J13",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "DeliveryStatus",
          "children": [
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "-",
              "data_type": "DateTime"
            }
          ]
        },
        {
          "type": "class",
          "value": "Contact",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "DeliveryStatus"
                }
              ],
              "label": "has",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Email",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "DeliveryStatus"
                }
              ],
              "label": "results in",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Segment includes id, criteria and method applyFilter. Segment needs Contact.",
    "PlantUML": "class Segment {\n  -id: String\n  -criteria: String\n  +applyFilter()\n}\n\nSegment \"1\" --> \"0..*\" Contact : filters \n",
    "Model": "J13",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Segment",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "criteria",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "applyFilter()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Contact"
                }
              ],
              "label": "filters",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Contact",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Campaign depends on Email. Campaign needs Segment.",
    "PlantUML": "Campaign --> Email : schedules \nCampaign --> Segment : targets ",
    "Model": "J13",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Campaign",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Email"
                }
              ],
              "label": "schedules"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Segment"
                }
              ],
              "label": "targets"
            }
          ]
        },
        {
          "type": "class",
          "value": "Email",
          "children": []
        },
        {
          "type": "class",
          "value": "Segment",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "User encapsulates id, username, role and login, a method logout. User needs Campaign.",
    "PlantUML": "class User {\n  -id: String\n  -username: String\n  -role: String\n  +login()\n  +logout()\n}\n\nUser \"0..*\" --> \"0..*\" Campaign : manages\n",
    "Model": "J13",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "username",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "role",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "login()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "logout()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Campaign"
                }
              ],
              "label": "manages",
              "multiplicity1": "0..*",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Campaign",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "In CampaignMetrics, you can find method calculate and openRate, clickRate attribute. Campaign depends on CampaignMetrics.",
    "PlantUML": "class CampaignMetrics {\n  -openRate: Float\n  -clickRate: Float\n  +calculate()\n}\n\nCampaign \"1\" --> \"1\" CampaignMetrics : generates ",
    "Model": "J13",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "CampaignMetrics",
          "children": [
            {
              "type": "attribute",
              "value": "openRate",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "attribute",
              "value": "clickRate",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "method",
              "value": "calculate()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Campaign",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "CampaignMetrics"
                }
              ],
              "label": "generates",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "AuditLog includes an attribute action, timestamp, userId. User needs AuditLog.",
    "PlantUML": "class AuditLog {\n  -action: String\n  -timestamp: DateTime\n  -userId: String\n}\n\nUser \"1\" --> \"0..*\" AuditLog : logs \n",
    "Model": "J13",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AuditLog",
          "children": [
            {
              "type": "attribute",
              "value": "action",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "userId",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "AuditLog"
                }
              ],
              "label": "logs",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "In User, you can find userId attribute, email attribute, password, role. User needs AuthService. AuthService encapsulates a method registerUser, method authenticateUser.",
    "PlantUML": "class User {\n  +userId: String\n  +email: String\n  +password: String\n  +role: String\n}\n\nclass AuthService {\n  +registerUser(email, password)\n  +authenticateUser(email, password)\n}\n\nUser --> AuthService : uses\n",
    "Model": "J14",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "role",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "AuthService"
                }
              ],
              "label": "uses"
            }
          ]
        },
        {
          "type": "class",
          "value": "AuthService",
          "children": [
            {
              "type": "method",
              "value": "registerUser(email, password)",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "authenticateUser(email, password)",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Class Survey contains an attribute surveyId, title attribute, description attribute, createdDate attribute. Survey has as a part Question. The design of Question integrates questionId attribute, text, an attribute type. User depends on Survey.",
    "PlantUML": "class Survey {\n  +surveyId: String\n  +title: String\n  +description: String\n  +createdDate: Date\n}\n\nclass Question {\n  +questionId: String\n  +text: String\n  +type: String\n}\n\nSurvey \"1\" *-- \"*\" Question : contains\nUser \"1\" --> \"*\" Survey : creates\n",
    "Model": "J14",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Survey",
          "children": [
            {
              "type": "attribute",
              "value": "surveyId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "createdDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Question"
                }
              ],
              "label": "contains",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Question",
          "children": [
            {
              "type": "attribute",
              "value": "questionId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "text",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "type",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Survey"
                }
              ],
              "label": "creates",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The design of Scheduler integrates a method scheduleSurvey. The structure of Distribution comprises method sendLink, method sendEmail. Survey depends on Scheduler. Survey needs Distribution.",
    "PlantUML": "class Scheduler {\n  +scheduleSurvey(surveyId, dateTime)\n}\n\nclass Distribution {\n  +sendLink(surveyId)\n  +sendEmail(surveyId, recipients)\n}\n\nSurvey --> Scheduler : \"scheduled by\"\nSurvey --> Distribution : \"distributed via\"\n",
    "Model": "J14",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Scheduler",
          "children": [
            {
              "type": "method",
              "value": "scheduleSurvey(surveyId, dateTime)",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Distribution",
          "children": [
            {
              "type": "method",
              "value": "sendLink(surveyId)",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "sendEmail(surveyId, recipients)",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Survey",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Scheduler"
                }
              ],
              "label": "\"scheduled by\""
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Distribution"
                }
              ],
              "label": "\"distributed via\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Response encapsulates responseId attribute, an attribute submittedAt. Response is composed of Answer. Among the features of Answer are an attribute answerId, value attribute. Question is related to Answer. Survey is related to Response.",
    "PlantUML": "class Response {\n  +responseId: String\n  +submittedAt: Date\n}\n\nclass Answer {\n  +answerId: String\n  +value: String\n}\n\nResponse \"1\" *-- \"*\" Answer : contains\nQuestion \"1\" <-- \"*\" Answer : \"answered by\"\nSurvey \"1\" <-- \"*\" Response : receives\n",
    "Model": "J14",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Response",
          "children": [
            {
              "type": "attribute",
              "value": "responseId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "submittedAt",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Answer"
                }
              ],
              "label": "contains",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Answer",
          "children": [
            {
              "type": "attribute",
              "value": "answerId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "value",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Question",
          "children": [
            {
              "type": "relation",
              "value": "<--",
              "children": [
                {
                  "type": "class",
                  "value": "Answer"
                }
              ],
              "label": "\"answered by\"",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Survey",
          "children": [
            {
              "type": "relation",
              "value": "<--",
              "children": [
                {
                  "type": "class",
                  "value": "Response"
                }
              ],
              "label": "receives",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "AnalysisService includes generateStats, a method generateCharts. Survey depends on AnalysisService.",
    "PlantUML": "class AnalysisService {\n  +generateStats(surveyId)\n  +generateCharts(surveyId)\n}\n\nSurvey --> AnalysisService : analyzed by\n",
    "Model": "J14",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AnalysisService",
          "children": [
            {
              "type": "method",
              "value": "generateStats(surveyId)",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "generateCharts(surveyId)",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Survey",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "AnalysisService"
                }
              ],
              "label": "analyzed by"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "ExportService is defined by exportToCSV, method exportToPDF. Survey needs ExportService.",
    "PlantUML": "class ExportService {\n  +exportToCSV(surveyId)\n  +exportToPDF(surveyId)\n}\n\nSurvey --> ExportService : exported by\n",
    "Model": "J14",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ExportService",
          "children": [
            {
              "type": "method",
              "value": "exportToCSV(surveyId)",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "exportToPDF(surveyId)",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Survey",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "ExportService"
                }
              ],
              "label": "exported by"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Dashboard includes a method showUserSurveys, method showMetrics. Dashboard needs Survey. Dashboard needs AnalysisService. User depends on Dashboard.",
    "PlantUML": "class Dashboard {\n  +showUserSurveys(userId)\n  +showMetrics(surveyId)\n}\n\nUser --> Dashboard : views\nDashboard --> Survey : shows summary\nDashboard --> AnalysisService : \"uses data\"\n",
    "Model": "J14",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Dashboard",
          "children": [
            {
              "type": "method",
              "value": "showUserSurveys(userId)",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "showMetrics(surveyId)",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Survey"
                }
              ],
              "label": "shows summary"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "AnalysisService"
                }
              ],
              "label": "\"uses data\""
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Dashboard"
                }
              ],
              "label": "views"
            }
          ]
        },
        {
          "type": "class",
          "value": "Survey",
          "children": []
        },
        {
          "type": "class",
          "value": "AnalysisService",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The design of NotificationService integrates notifyNewResponse, notifyCompletion, method notifyError. User depends on NotificationService. Survey depends on NotificationService.",
    "PlantUML": "class NotificationService {\n  +notifyNewResponse(surveyId)\n  +notifyCompletion(surveyId)\n  +notifyError(errorMsg)\n}\n\nUser --> NotificationService : receives\nSurvey --> NotificationService : triggers\n",
    "Model": "J14",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "NotificationService",
          "children": [
            {
              "type": "method",
              "value": "notifyNewResponse(surveyId)",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "notifyCompletion(surveyId)",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "notifyError(errorMsg)",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "NotificationService"
                }
              ],
              "label": "receives"
            }
          ]
        },
        {
          "type": "class",
          "value": "Survey",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "NotificationService"
                }
              ],
              "label": "triggers"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The Permission has an attribute canEdit, an attribute canView, canDelete attribute. Permission needs Survey. User needs Permission.",
    "PlantUML": "class Permission {\n  +canEdit: Boolean\n  +canView: Boolean\n  +canDelete: Boolean\n}\n\nUser --> Permission : has\nPermission --> Survey : \"applies to\"\n",
    "Model": "J14",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Permission",
          "children": [
            {
              "type": "attribute",
              "value": "canEdit",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "attribute",
              "value": "canView",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "attribute",
              "value": "canDelete",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Survey"
                }
              ],
              "label": "\"applies to\""
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Permission"
                }
              ],
              "label": "has"
            }
          ]
        },
        {
          "type": "class",
          "value": "Survey",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Survey needs Response.",
    "PlantUML": "Survey {\n  +isAnonymous: Boolean\n}\n\nResponse {\n  +respondentId: String\n}\nSurvey --> Response : collects\n",
    "Model": "J14",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Survey",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Response"
                }
              ],
              "label": "collects"
            }
          ]
        },
        {
          "type": "class",
          "value": "Response",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "User includes id attribute, an attribute username, email attribute, password. User is a subclass of Freelancer. User is a subclass of Client.",
    "PlantUML": "class User {\n  -id: int\n  -username: string\n  -email: string\n  -password: string\n}\n\nclass Freelancer{\n}\n\nclass Client{\n}\n\nUser <|-- Freelancer\nUser <|-- Client\n\n",
    "Model": "J15",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "username",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Freelancer"
                }
              ]
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Client"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Freelancer",
          "children": []
        },
        {
          "type": "class",
          "value": "Client",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Profile encapsulates an attribute bio, profilePhoto, contactInfo attribute. User is aggregated in Profile.",
    "PlantUML": "User \"1\" o-- \"1\" Profile\n\nclass Profile {\n  -bio: string\n  -profilePhoto: string\n  -contactInfo: string\n}\n",
    "Model": "J15",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Profile",
          "children": [
            {
              "type": "attribute",
              "value": "bio",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "profilePhoto",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "contactInfo",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "Profile"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The structure of Job comprises an attribute jobId, title attribute, an attribute description, budget, deadline attribute. Client is aggregated in Job.",
    "PlantUML": "Client \"1\" o-- \"0..*\" Job\n\nclass Job {\n  -jobId: int\n  -title: string\n  -description: string\n  -budget: float\n  -deadline: Date\n}\n",
    "Model": "J15",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Job",
          "children": [
            {
              "type": "attribute",
              "value": "jobId",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "budget",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "attribute",
              "value": "deadline",
              "visibility": "-",
              "data_type": "Date"
            }
          ]
        },
        {
          "type": "class",
          "value": "Client",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "Job"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Freelancer depends on Job.",
    "PlantUML": "Freelancer \"1\" --> \"0..*\" Job : browse\n",
    "Model": "J15",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Freelancer",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Job"
                }
              ],
              "label": "browse",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Job",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Proposal is defined by proposalId, an attribute description, an attribute proposedAmount, timeline attribute. Freelancer includes Proposal. Job is aggregated in Proposal.",
    "PlantUML": "Freelancer \"1\" o-- \"0..*\" Proposal\nJob \"1\" o-- \"0..*\" Proposal\n\nclass Proposal {\n  -proposalId: int\n  -description: string\n  -proposedAmount: float\n  -timeline: string\n}\n",
    "Model": "J15",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Proposal",
          "children": [
            {
              "type": "attribute",
              "value": "proposalId",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "proposedAmount",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "attribute",
              "value": "timeline",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Freelancer",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "Proposal"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Job",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "Proposal"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Job depends on Proposal. Proposal needs Freelancer.",
    "PlantUML": "Job \"1\" --> \"1\" Proposal : accepted\nProposal --> Freelancer\n",
    "Model": "J15",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Job",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Proposal"
                }
              ],
              "label": "accepted",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Proposal",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Freelancer"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Freelancer",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "In Message, you can find messageId attribute, senderId, receiverId, content attribute, an attribute timestamp. User includes Message.",
    "PlantUML": "User \"1\" o-- \"0..*\" Message\n\nclass Message {\n  -messageId: int\n  -senderId: int\n  -receiverId: int\n  -content: string\n  -timestamp: Date\n}\n",
    "Model": "J15",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Message",
          "children": [
            {
              "type": "attribute",
              "value": "messageId",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "senderId",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "receiverId",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "content",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "-",
              "data_type": "Date"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "Message"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Among the features of Submission are an attribute submissionId, contentURL attribute, an attribute submittedAt, status. Job is aggregated in Submission.",
    "PlantUML": "Job \"1\" o-- \"0..1\" Submission\n\nclass Submission {\n  -submissionId: int\n  -contentURL: string\n  -submittedAt: Date\n  -status: string\n}\n",
    "Model": "J15",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Submission",
          "children": [
            {
              "type": "attribute",
              "value": "submissionId",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "contentURL",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "submittedAt",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Job",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "Submission"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The Escrow has escrowId attribute, an attribute amount, status, releasedAt. Job includes Escrow.",
    "PlantUML": "Job \"1\" o-- \"1\" Escrow\n\nclass Escrow {\n  -escrowId: int\n  -amount: float\n  -status: string\n  -releasedAt: Date\n}\n",
    "Model": "J15",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Escrow",
          "children": [
            {
              "type": "attribute",
              "value": "escrowId",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "amount",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "releasedAt",
              "visibility": "-",
              "data_type": "Date"
            }
          ]
        },
        {
          "type": "class",
          "value": "Job",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "Escrow"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The design of Review integrates reviewId, rating, an attribute comment, reviewedUserId attribute. User is aggregated in Review.",
    "PlantUML": "User \"1\" o-- \"0..*\" Review\n\nclass Review {\n  -reviewId: int\n  -rating: int\n  -comment: string\n  -reviewedUserId: int\n}\n",
    "Model": "J15",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Review",
          "children": [
            {
              "type": "attribute",
              "value": "reviewId",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "rating",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "comment",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "reviewedUserId",
              "visibility": "-",
              "data_type": "int"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "Review"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Among the features of Category are categoryId attribute, name. The structure of Skill comprises skillId, an attribute name. Job includes Category. Freelancer is aggregated in Skill.",
    "PlantUML": "Job \"0..*\" o-- \"0..*\" Category\nFreelancer \"0..*\" o-- \"0..*\" Skill\n\nclass Category {\n  -categoryId: int\n  -name: string\n}\n\nclass Skill {\n  -skillId: int\n  -name: string\n}\n",
    "Model": "J15",
    "RequirementIndex": "10",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Category",
          "children": [
            {
              "type": "attribute",
              "value": "categoryId",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Skill",
          "children": [
            {
              "type": "attribute",
              "value": "skillId",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Job",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "Category"
                }
              ],
              "multiplicity1": "0..*",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Freelancer",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "Skill"
                }
              ],
              "multiplicity1": "0..*",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Class ChatbotProject contains an attribute projectId, name, createdDate. ChatbotProject has as a part ChatbotModule.",
    "PlantUML": "class ChatbotProject {\n  - projectId: String\n  - name: String\n  - createdDate: Date\n}\nChatbotProject \"1\" *-- \"*\" ChatbotModule\n",
    "Model": "J16",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ChatbotProject",
          "children": [
            {
              "type": "attribute",
              "value": "projectId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "createdDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "ChatbotModule"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "ChatbotModule",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "ChatbotModule includes moduleId, moduleName attribute. ChatbotModule is composed of Intent. ChatbotModule is composed of Entity. ChatbotModule is composed of DialogFlow.",
    "PlantUML": "class ChatbotModule {\n  - moduleId: String\n  - moduleName: String\n}\nChatbotModule \"1\" *-- \"*\" Intent\nChatbotModule \"1\" *-- \"*\" Entity\nChatbotModule \"1\" *-- \"*\" DialogFlow\n",
    "Model": "J16",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ChatbotModule",
          "children": [
            {
              "type": "attribute",
              "value": "moduleId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "moduleName",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Intent"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "*"
            },
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Entity"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "*"
            },
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "DialogFlow"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Intent",
          "children": []
        },
        {
          "type": "class",
          "value": "Entity",
          "children": []
        },
        {
          "type": "class",
          "value": "DialogFlow",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Intent is defined by intentId attribute, an attribute name. Intent has as a part TrainingPhrase. Intent has as a part Response.",
    "PlantUML": "class Intent {\n  - intentId: String\n  - name: String\n}\nIntent \"1\" *-- \"*\" TrainingPhrase\nIntent \"1\" *-- \"*\" Response\n",
    "Model": "J16",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Intent",
          "children": [
            {
              "type": "attribute",
              "value": "intentId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "TrainingPhrase"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "*"
            },
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Response"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "TrainingPhrase",
          "children": []
        },
        {
          "type": "class",
          "value": "Response",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "TrainingPhrase is defined by phraseId attribute, text.",
    "PlantUML": "class TrainingPhrase {\n  - phraseId: String\n  - text: String\n}\n",
    "Model": "J16",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "TrainingPhrase",
          "children": [
            {
              "type": "attribute",
              "value": "phraseId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "text",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Among the features of Response are an attribute responseId, an attribute contentType, content.",
    "PlantUML": "class Response {\n  - responseId: String\n  - contentType: String\n  - content: String\n}\n",
    "Model": "J16",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Response",
          "children": [
            {
              "type": "attribute",
              "value": "responseId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "contentType",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "content",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "In Entity, you can find entityId, an attribute name, type attribute. Entity has as a part EntityValue.",
    "PlantUML": "class Entity {\n  - entityId: String\n  - name: String\n  - type: String\n}\nEntity \"1\" *-- \"*\" EntityValue\n",
    "Model": "J16",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Entity",
          "children": [
            {
              "type": "attribute",
              "value": "entityId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "type",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "EntityValue"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "EntityValue",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The structure of EntityValue comprises an attribute valueId, an attribute value.",
    "PlantUML": "class EntityValue {\n  - valueId: String\n  - value: String\n}\n",
    "Model": "J16",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "EntityValue",
          "children": [
            {
              "type": "attribute",
              "value": "valueId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "value",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "DialogFlow is defined by an attribute flowId, name attribute. DialogFlow is composed of DialogNode.",
    "PlantUML": "class DialogFlow {\n  - flowId: String\n  - name: String\n}\nDialogFlow \"1\" *-- \"*\" DialogNode\n",
    "Model": "J16",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "DialogFlow",
          "children": [
            {
              "type": "attribute",
              "value": "flowId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "DialogNode"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "DialogNode",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "In DialogNode, you can find an attribute nodeId, prompt attribute, an attribute condition. DialogNode depends on DialogNode.",
    "PlantUML": "class DialogNode {\n  - nodeId: String\n  - prompt: String\n  - condition: String\n}\nDialogNode \"1\" --> \"*\" DialogNode : next\n",
    "Model": "J16",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "DialogNode",
          "children": [
            {
              "type": "attribute",
              "value": "nodeId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "prompt",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "condition",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "DialogNode"
                }
              ],
              "label": "next",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "User includes an attribute userId, an attribute username, an attribute role. User has as a part ChatbotProject.",
    "PlantUML": "class User {\n  - userId: String\n  - username: String\n  - role: String\n}\nUser \"1\" *-- \"*\" ChatbotProject\n",
    "Model": "J16",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "username",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "role",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "ChatbotProject"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "ChatbotProject",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "In InteractionLog, you can find logId, an attribute timestamp, userMessage, matchedIntent. ChatbotProject is composed of InteractionLog.",
    "PlantUML": "class InteractionLog {\n  - logId: String\n  - timestamp: Date\n  - userMessage: String\n  - matchedIntent: String\n}\nChatbotProject \"1\" *-- \"*\" InteractionLog\n",
    "Model": "J16",
    "RequirementIndex": "10",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "InteractionLog",
          "children": [
            {
              "type": "attribute",
              "value": "logId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "userMessage",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "matchedIntent",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "ChatbotProject",
          "children": [
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "InteractionLog"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Class User contains register, login, method logout and an attribute userId, email, an attribute password, an attribute name, an attribute role.",
    "PlantUML": "class User {\n  -userId: String\n  -email: String\n  -password: String\n  -name: String\n  -role: UserRole\n  +register(): void\n  +login(): void\n  +logout(): void\n}",
    "Model": "J17",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "role",
              "visibility": "-",
              "data_type": "UserRole"
            },
            {
              "type": "method",
              "value": "register()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "login()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "logout()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The design of Course integrates method createCourse, updateCourse, method deleteCourse and an attribute courseId, title, an attribute description, an attribute level. User is linked to Course.",
    "PlantUML": "class Course {\n  -courseId: String\n  -title: String\n  -description: String\n  -level: String\n  +createCourse(): void\n  +updateCourse(): void\n  +deleteCourse(): void\n}\nUser \"1\" -- \"0..*\" Course : creates ",
    "Model": "J17",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Course",
          "children": [
            {
              "type": "attribute",
              "value": "courseId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "level",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "createCourse()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "updateCourse()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "deleteCourse()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Course"
                }
              ],
              "label": "creates",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Lesson includes a method viewLesson and lessonId, title attribute, content attribute, videoUrl. Course has as a part Lesson.",
    "PlantUML": "class Lesson {\n  -lessonId: String\n  -title: String\n  -content: String\n  -videoUrl: String\n  +viewLesson(): void\n}\nCourse \"1\" *-- \"0..*\" Lesson : contains ",
    "Model": "J17",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Lesson",
          "children": [
            {
              "type": "attribute",
              "value": "lessonId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "content",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "videoUrl",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "viewLesson()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Course",
          "children": [
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Lesson"
                }
              ],
              "label": "contains",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Quiz is defined by quizId attribute, an attribute question, an attribute options, correctAnswer and a method submitAnswer. Lesson has as a part Quiz.",
    "PlantUML": "class Quiz {\n  -quizId: String\n  -question: String\n  -options: List<String>\n  -correctAnswer: String\n  +submitAnswer(): bool\n}\nLesson \"1\" *-- \"0..*\" Quiz : includes ",
    "Model": "J17",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Quiz",
          "children": [
            {
              "type": "attribute",
              "value": "quizId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "question",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "options",
              "visibility": "-",
              "data_type": "List<String>"
            },
            {
              "type": "attribute",
              "value": "correctAnswer",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "submitAnswer()",
              "visibility": "+",
              "data_type": "bool"
            }
          ]
        },
        {
          "type": "class",
          "value": "Lesson",
          "children": [
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Quiz"
                }
              ],
              "label": "includes",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "In Progress, you can find a method updateProgress and an attribute progressId, userId attribute, lessonId attribute, completionStatus attribute, an attribute score. User is linked to Progress. Lesson is linked to Progress.",
    "PlantUML": "class Progress {\n  -progressId: String\n  -userId: String\n  -lessonId: String\n  -completionStatus: bool\n  -score: float\n  +updateProgress(): void\n}\nUser \"1\" -- \"0..*\" Progress\nLesson \"1\" -- \"0..*\" Progress\n",
    "Model": "J17",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Progress",
          "children": [
            {
              "type": "attribute",
              "value": "progressId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "userId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "lessonId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "completionStatus",
              "visibility": "-",
              "data_type": "bool"
            },
            {
              "type": "attribute",
              "value": "score",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "method",
              "value": "updateProgress()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Progress"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Lesson",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Progress"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The LiveClass has classId, schedule attribute, an attribute meetingLink and a method joinClass. LiveClass is linked to User. User is linked to LiveClass.",
    "PlantUML": "class LiveClass {\n  -classId: String\n  -schedule: DateTime\n  -meetingLink: String\n  +joinClass(): void\n}\nUser \"1\" -- \"0..*\" LiveClass : teaches \nLiveClass \"1\" -- \"0..*\" User : attends ",
    "Model": "J17",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "LiveClass",
          "children": [
            {
              "type": "attribute",
              "value": "classId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "schedule",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "meetingLink",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "joinClass()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "attends",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "LiveClass"
                }
              ],
              "label": "teaches",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The structure of Certificate comprises a method download and certificateId, an attribute issueDate, courseTitle. User is linked to Certificate. Course is associated with Certificate.",
    "PlantUML": "class Certificate {\n  -certificateId: String\n  -issueDate: Date\n  -courseTitle: String\n  +download(): PDF\n}\nUser \"1\" -- \"0..*\" Certificate\nCourse \"1\" -- \"0..*\" Certificate\n",
    "Model": "J17",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Certificate",
          "children": [
            {
              "type": "attribute",
              "value": "certificateId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "issueDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "courseTitle",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "download()",
              "visibility": "+",
              "data_type": "PDF"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Certificate"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Course",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Certificate"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The design of Feedback integrates feedbackId attribute, rating attribute, comments attribute and method submit. User is associated with Feedback. Course is associated with Feedback.",
    "PlantUML": "class Feedback {\n  -feedbackId: String\n  -rating: int\n  -comments: String\n  +submit(): void\n}\nUser \"1\" -- \"0..*\" Feedback\nCourse \"1\" -- \"0..*\" Feedback\n",
    "Model": "J17",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Feedback",
          "children": [
            {
              "type": "attribute",
              "value": "feedbackId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "rating",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "comments",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "submit()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Feedback"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Course",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Feedback"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "In AdminTools, you can find method banUser, a method removeCourse, a method viewReports. User is a subclass of Admin. Admin is linked to AdminTools.",
    "PlantUML": "class AdminTools {\n  +banUser(userId: String): void\n  +removeCourse(courseId: String): void\n  +viewReports(): void\n}\nUser <|-- Admin\nAdmin \"1\" -- \"1\" AdminTools\n",
    "Model": "J17",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AdminTools",
          "children": [
            {
              "type": "method",
              "value": "banUser(userId: String)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "removeCourse(courseId: String)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "viewReports()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Admin"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Admin",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "AdminTools"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Language is defined by languageCode, name attribute. Course is linked to Language. Lesson is associated with Language.",
    "PlantUML": "class Language {\n  -languageCode: String\n  -name: String\n}\nCourse \"1\" -- \"1\" Language\nLesson \"1\" -- \"1\" Language\n",
    "Model": "J17",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Language",
          "children": [
            {
              "type": "attribute",
              "value": "languageCode",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Course",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Language"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Lesson",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Language"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Class Applicant contains an attribute name, an attribute email, phone attribute, resume attribute.",
    "PlantUML": "class Applicant {\n  -name: String\n  -email: String\n  -phone: String\n  -resume: File\n}\n",
    "Model": "J18",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Applicant",
          "children": [
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "phone",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "resume",
              "visibility": "-",
              "data_type": "File"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "JobPosition encapsulates an attribute title, description, requirements attribute. Applicant needs JobPosition.",
    "PlantUML": "class JobPosition {\n  -title: String\n  -description: String\n  -requirements: String\n}\n\nApplicant \"1\" --> \"*\" JobPosition : appliesTo\n",
    "Model": "J18",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "JobPosition",
          "children": [
            {
              "type": "attribute",
              "value": "title",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "requirements",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Applicant",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "JobPosition"
                }
              ],
              "label": "appliesTo",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The InterviewRound has type, scheduledDate, an attribute status. JobPosition needs InterviewRound.",
    "PlantUML": "class InterviewRound {\n  -type: String\n  -scheduledDate: DateTime\n  -status: String\n}\n\nJobPosition \"1\" --> \"*\" InterviewRound : hasRound\n",
    "Model": "J18",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "InterviewRound",
          "children": [
            {
              "type": "attribute",
              "value": "type",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "scheduledDate",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "JobPosition",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "InterviewRound"
                }
              ],
              "label": "hasRound",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Interviewer encapsulates name attribute, department attribute, email. InterviewRound depends on Interviewer.",
    "PlantUML": "class Interviewer {\n  -name: String\n  -department: String\n  -email: String\n}\n\nInterviewRound \"*\" --> \"*\" Interviewer : conductedBy\n",
    "Model": "J18",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Interviewer",
          "children": [
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "department",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "InterviewRound",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Interviewer"
                }
              ],
              "label": "conductedBy",
              "multiplicity1": "*",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "In InterviewSchedule, you can find an attribute dateTime, location, an attribute status. Applicant depends on InterviewSchedule. InterviewRound needs InterviewSchedule.",
    "PlantUML": "class InterviewSchedule {\n  -dateTime: DateTime\n  -location: String\n  -status: String\n}\n\nApplicant \"1\" --> \"*\" InterviewSchedule : scheduledFor\nInterviewRound \"1\" --> \"*\" InterviewSchedule : scheduledAs\n",
    "Model": "J18",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "InterviewSchedule",
          "children": [
            {
              "type": "attribute",
              "value": "dateTime",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "location",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Applicant",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "InterviewSchedule"
                }
              ],
              "label": "scheduledFor",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "InterviewRound",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "InterviewSchedule"
                }
              ],
              "label": "scheduledAs",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "In Evaluation, you can find score, comments attribute, an attribute recommendation. InterviewSchedule depends on Evaluation. Interviewer depends on Evaluation.",
    "PlantUML": "class Evaluation {\n  -score: Float\n  -comments: String\n  -recommendation: String\n}\n\nInterviewSchedule \"1\" --> \"*\" Evaluation : resultsIn\nInterviewer \"1\" --> \"*\" Evaluation : submits\n",
    "Model": "J18",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Evaluation",
          "children": [
            {
              "type": "attribute",
              "value": "score",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "attribute",
              "value": "comments",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "recommendation",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "InterviewSchedule",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Evaluation"
                }
              ],
              "label": "resultsIn",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Interviewer",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Evaluation"
                }
              ],
              "label": "submits",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The FinalResult has an attribute overallScore, an attribute decision. Applicant depends on FinalResult.",
    "PlantUML": "class FinalResult {\n  -overallScore: Float\n  -decision: String\n}\n\nApplicant \"1\" --> \"1\" FinalResult : hasResult\n",
    "Model": "J18",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "FinalResult",
          "children": [
            {
              "type": "attribute",
              "value": "overallScore",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "attribute",
              "value": "decision",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Applicant",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "FinalResult"
                }
              ],
              "label": "hasResult",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Class Admin contains an attribute username, an attribute password, an attribute role. Admin depends on JobPosition. Admin needs InterviewSchedule.",
    "PlantUML": "class Admin {\n  -username: String\n  -password: String\n  -role: String\n}\n\nAdmin \"1\" --> \"*\" JobPosition : manages\nAdmin \"1\" --> \"*\" InterviewSchedule : oversees\n",
    "Model": "J18",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Admin",
          "children": [
            {
              "type": "attribute",
              "value": "username",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "role",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "JobPosition"
                }
              ],
              "label": "manages",
              "multiplicity1": "1",
              "multiplicity2": "*"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "InterviewSchedule"
                }
              ],
              "label": "oversees",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "JobPosition",
          "children": []
        },
        {
          "type": "class",
          "value": "InterviewSchedule",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Notification includes message, recipient attribute, sentAt attribute. InterviewSchedule needs Notification.",
    "PlantUML": "class Notification {\n  -message: String\n  -recipient: String\n  -sentAt: DateTime\n}\n\nInterviewSchedule \"1\" --> \"*\" Notification : triggers\n",
    "Model": "J18",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Notification",
          "children": [
            {
              "type": "attribute",
              "value": "message",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "recipient",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "sentAt",
              "visibility": "-",
              "data_type": "DateTime"
            }
          ]
        },
        {
          "type": "class",
          "value": "InterviewSchedule",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Notification"
                }
              ],
              "label": "triggers",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Class User contains method register, method login and userId attribute, an attribute name, email, an attribute password.",
    "PlantUML": "class User {\n  - userId: String\n  - name: String\n  - email: String\n  - password: String\n  + register()\n  + login()\n}\n",
    "Model": "J19",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "register()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "login()",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The design of HealthMetric integrates metricId, an attribute date, weight attribute, sleepHours, steps, calories and method addEntry, a method updateEntry. User is aggregated in HealthMetric.",
    "PlantUML": "class HealthMetric {\n  - metricId: String\n  - date: Date\n  - weight: Float\n  - sleepHours: Float\n  - steps: Int\n  - calories: Int\n  + addEntry()\n  + updateEntry()\n}\n\nUser \"1\" o-- \"*\" HealthMetric : logs\n",
    "Model": "J19",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "HealthMetric",
          "children": [
            {
              "type": "attribute",
              "value": "metricId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "date",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "weight",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "attribute",
              "value": "sleepHours",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "attribute",
              "value": "steps",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "calories",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "method",
              "value": "addEntry()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "updateEntry()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "HealthMetric"
                }
              ],
              "label": "logs",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "HealthGoal encapsulates goalId, goalType attribute, targetValue, an attribute startDate, endDate and method createGoal, method updateGoal. User is aggregated in HealthGoal.",
    "PlantUML": "class HealthGoal {\n  - goalId: String\n  - goalType: String\n  - targetValue: Float\n  - startDate: Date\n  - endDate: Date\n  + createGoal()\n  + updateGoal()\n}\n\nUser \"1\" o-- \"*\" HealthGoal : sets\n",
    "Model": "J19",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "HealthGoal",
          "children": [
            {
              "type": "attribute",
              "value": "goalId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "goalType",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "targetValue",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "attribute",
              "value": "startDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "endDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "method",
              "value": "createGoal()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "updateGoal()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "HealthGoal"
                }
              ],
              "label": "sets",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "In WaterIntake, you can find a method logIntake, updateIntake and an attribute intakeId, date, an attribute glasses. User is aggregated in WaterIntake.",
    "PlantUML": "class WaterIntake {\n  - intakeId: String\n  - date: Date\n  - glasses: Int\n  + logIntake()\n  + updateIntake()\n}\n\nUser \"1\" o-- \"*\" WaterIntake : tracks\n",
    "Model": "J19",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "WaterIntake",
          "children": [
            {
              "type": "attribute",
              "value": "intakeId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "date",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "glasses",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "method",
              "value": "logIntake()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "updateIntake()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "WaterIntake"
                }
              ],
              "label": "tracks",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "HealthReport is defined by a method generateSummary and an attribute reportId, an attribute generatedDate, reportType attribute. HealthReport uses HealthMetric. HealthReport uses HealthGoal. User is aggregated in HealthReport.",
    "PlantUML": "class HealthReport {\n  - reportId: String\n  - generatedDate: Date\n  - reportType: String\n  + generateSummary()\n}\n\nUser \"1\" o-- \"*\" HealthReport : receives\nHealthReport ..> HealthMetric : aggregates\nHealthReport ..> HealthGoal : compares with\n",
    "Model": "J19",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "HealthReport",
          "children": [
            {
              "type": "attribute",
              "value": "reportId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "generatedDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "reportType",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "generateSummary()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "..>",
              "children": [
                {
                  "type": "class",
                  "value": "HealthMetric"
                }
              ],
              "label": "aggregates"
            },
            {
              "type": "relation",
              "value": "..>",
              "children": [
                {
                  "type": "class",
                  "value": "HealthGoal"
                }
              ],
              "label": "compares with"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "HealthReport"
                }
              ],
              "label": "receives",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "HealthMetric",
          "children": []
        },
        {
          "type": "class",
          "value": "HealthGoal",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Among the features of Reminder are reminderId attribute, an attribute type, an attribute message, an attribute time and schedule, method cancel. User includes Reminder.",
    "PlantUML": "class Reminder {\n  - reminderId: String\n  - type: String\n  - message: String\n  - time: DateTime\n  + schedule()\n  + cancel()\n}\n\nUser \"1\" o-- \"*\" Reminder : sets\n",
    "Model": "J19",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Reminder",
          "children": [
            {
              "type": "attribute",
              "value": "reminderId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "type",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "message",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "time",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "method",
              "value": "schedule()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "cancel()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "Reminder"
                }
              ],
              "label": "sets",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The structure of Notification comprises notificationId attribute, message, dateTime attribute and method send. Notification uses HealthGoal. User is aggregated in Notification.",
    "PlantUML": "class Notification {\n  - notificationId: String\n  - message: String\n  - dateTime: DateTime\n  + send()\n}\n\nUser \"1\" o-- \"*\" Notification : receives\nNotification ..> HealthGoal : refers to\n",
    "Model": "J19",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Notification",
          "children": [
            {
              "type": "attribute",
              "value": "notificationId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "message",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "dateTime",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "method",
              "value": "send()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "..>",
              "children": [
                {
                  "type": "class",
                  "value": "HealthGoal"
                }
              ],
              "label": "refers to"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "Notification"
                }
              ],
              "label": "receives",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "HealthGoal",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The WearableDevice has syncData and deviceId attribute, deviceType, an attribute lastSyncTime. WearableDevice depends on HealthMetric. User is aggregated in WearableDevice.",
    "PlantUML": "class WearableDevice {\n  - deviceId: String\n  - deviceType: String\n  - lastSyncTime: DateTime\n  + syncData()\n}\n\nUser \"1\" o-- \"*\" WearableDevice : connects\nWearableDevice --> HealthMetric : updates\n",
    "Model": "J19",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "WearableDevice",
          "children": [
            {
              "type": "attribute",
              "value": "deviceId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "deviceType",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "lastSyncTime",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "method",
              "value": "syncData()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "HealthMetric"
                }
              ],
              "label": "updates"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "WearableDevice"
                }
              ],
              "label": "connects",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "HealthMetric",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The design of AdminUser integrates adminId, name, email attribute and method viewAnalytics, manageUsers. AdminUser is related to User.",
    "PlantUML": "class AdminUser {\n  - adminId: String\n  - name: String\n  - email: String\n  + viewAnalytics()\n  + manageUsers()\n}\n\nAdminUser --|> User\n",
    "Model": "J19",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AdminUser",
          "children": [
            {
              "type": "attribute",
              "value": "adminId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "viewAnalytics()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "manageUsers()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "--|>",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The User has method register, login and userID, an attribute email, password.",
    "PlantUML": "class User {\n  -userID: String\n  -email: String\n  -password: String\n  +register(): void\n  +login(): boolean\n}\n",
    "Model": "J20",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "register()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "login()",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Resume includes an attribute resumeID, title, creationDate attribute and create, method update, delete. User is associated with Resume.",
    "PlantUML": "class Resume {\n  -resumeID: String\n  -title: String\n  -creationDate: Date\n  +create(): void\n  +update(): void\n  +delete(): void\n}\n\nUser \"1\" -- \"*\" Resume : owns \n",
    "Model": "J20",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Resume",
          "children": [
            {
              "type": "attribute",
              "value": "resumeID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "creationDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "method",
              "value": "create()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "update()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "delete()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Resume"
                }
              ],
              "label": "owns",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Section includes sectionID attribute, type, an attribute content and a method edit. Resume is linked to Section.",
    "PlantUML": "class Section {\n  -sectionID: String\n  -type: String\n  -content: String\n  +edit(): void\n}\n\nResume \"1\" -- \"*\" Section : contains \n",
    "Model": "J20",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Section",
          "children": [
            {
              "type": "attribute",
              "value": "sectionID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "type",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "content",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "edit()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Resume",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Section"
                }
              ],
              "label": "contains",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The PersonalInfo has name attribute, phone, an attribute address, summary attribute. Section is a subclass of PersonalInfo.",
    "PlantUML": "class PersonalInfo {\n  -name: String\n  -phone: String\n  -address: String\n  -summary: String\n}\n\nSection <|-- PersonalInfo\n",
    "Model": "J20",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "PersonalInfo",
          "children": [
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "phone",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "address",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "summary",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Section",
          "children": [
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "PersonalInfo"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "In Education, you can find degree, institution attribute, startDate attribute, an attribute endDate. Section is a subclass of Education.",
    "PlantUML": "class Education {\n  -degree: String\n  -institution: String\n  -startDate: Date\n  -endDate: Date\n}\n\nSection <|-- Education\n",
    "Model": "J20",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Education",
          "children": [
            {
              "type": "attribute",
              "value": "degree",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "institution",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "startDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "endDate",
              "visibility": "-",
              "data_type": "Date"
            }
          ]
        },
        {
          "type": "class",
          "value": "Section",
          "children": [
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Education"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Among the features of Experience are jobTitle, an attribute company, responsibilities attribute, an attribute startDate, endDate attribute. Section is a subclass of Experience.",
    "PlantUML": "class Experience {\n  -jobTitle: String\n  -company: String\n  -responsibilities: String\n  -startDate: Date\n  -endDate: Date\n}\n\nSection <|-- Experience\n",
    "Model": "J20",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Experience",
          "children": [
            {
              "type": "attribute",
              "value": "jobTitle",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "company",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "responsibilities",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "startDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "endDate",
              "visibility": "-",
              "data_type": "Date"
            }
          ]
        },
        {
          "type": "class",
          "value": "Section",
          "children": [
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Experience"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "In Skill, you can find name attribute, type attribute. Section is a subclass of Skill.",
    "PlantUML": "class Skill {\n  -name: String\n  -type: String  \n}\n\nSection <|-- Skill\n",
    "Model": "J20",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Skill",
          "children": [
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "type",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Section",
          "children": [
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Skill"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Class PDFExporter contains method export. Resume depends on PDFExporter.",
    "PlantUML": "class PDFExporter {\n  +export(resume: Resume): File\n}\n\nResume --> PDFExporter : uses\n",
    "Model": "J20",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "PDFExporter",
          "children": [
            {
              "type": "method",
              "value": "export(resume: Resume)",
              "visibility": "+",
              "data_type": "File"
            }
          ]
        },
        {
          "type": "class",
          "value": "Resume",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "PDFExporter"
                }
              ],
              "label": "uses"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Template includes apply and templateID, an attribute name, layout attribute. Resume depends on Template.",
    "PlantUML": "class Template {\n  -templateID: String\n  -name: String\n  -layout: String\n  +apply(): void\n}\n\nResume --> Template :  uses\n",
    "Model": "J20",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Template",
          "children": [
            {
              "type": "attribute",
              "value": "templateID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "layout",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "apply()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Resume",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Template"
                }
              ],
              "label": "uses"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Admin encapsulates manageTemplates and adminID, username attribute, password. Admin is linked to Template.",
    "PlantUML": "class Admin {\n  -adminID: String\n  -username: String\n  -password: String\n  +manageTemplates(): void\n}\n\nAdmin \"1\" -- \"*\" Template : manages \n",
    "Model": "J20",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Admin",
          "children": [
            {
              "type": "attribute",
              "value": "adminID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "username",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "manageTemplates()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Template"
                }
              ],
              "label": "manages",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Template",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Resume encapsulates isDefault attribute. User needs Resume.",
    "PlantUML": "class Resume { \n+isDefault: boolean\n}\n\nUser --> Resume : has default",
    "Model": "J20",
    "RequirementIndex": "10",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Resume",
          "children": [
            {
              "type": "attribute",
              "value": "isDefault",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Resume"
                }
              ],
              "label": "has default"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Class Section contains order attribute. Resume depends on Section.",
    "PlantUML": "class Section { \n+order: int \n}\n\nResume --> Section : ordered\n",
    "Model": "J20",
    "RequirementIndex": "11",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Section",
          "children": [
            {
              "type": "attribute",
              "value": "order",
              "visibility": "+",
              "data_type": "int"
            }
          ]
        },
        {
          "type": "class",
          "value": "Resume",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Section"
                }
              ],
              "label": "ordered"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Class User contains an attribute userID, an attribute email, password and register, login. User is a subclass of Student. User is a subclass of Tutor.",
    "PlantUML": "class User {\n  -userID: String\n  -email: String\n  -password: String\n  +register(): void\n  +login(): boolean\n}\n\nclass Student {\n}\nclass Tutor{\n}\n\nUser <|-- Student\nUser <|-- Tutor",
    "Model": "J21",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "register()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "login()",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Student"
                }
              ]
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Tutor"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Student",
          "children": []
        },
        {
          "type": "class",
          "value": "Tutor",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The design of TutorProfile integrates bio attribute, subjects attribute, availability attribute and method updateProfile. Tutor is associated with TutorProfile.",
    "PlantUML": "class TutorProfile {\n  -bio: String\n  -subjects: List<String>\n  -availability: Schedule\n  +updateProfile(): void\n}\n\nTutor \"1\" -- \"1\" TutorProfile\n",
    "Model": "J21",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "TutorProfile",
          "children": [
            {
              "type": "attribute",
              "value": "bio",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "subjects",
              "visibility": "-",
              "data_type": "List<String>"
            },
            {
              "type": "attribute",
              "value": "availability",
              "visibility": "-",
              "data_type": "Schedule"
            },
            {
              "type": "method",
              "value": "updateProfile()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Tutor",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "TutorProfile"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "StudentProfile includes an attribute learningGoals, preferredSubjects and method editProfile. Student is associated with StudentProfile.",
    "PlantUML": "class StudentProfile {\n  -learningGoals: String\n  -preferredSubjects: List<String>\n  +editProfile(): void\n}\n\nStudent \"1\" -- \"1\" StudentProfile",
    "Model": "J21",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "StudentProfile",
          "children": [
            {
              "type": "attribute",
              "value": "learningGoals",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "preferredSubjects",
              "visibility": "-",
              "data_type": "List<String>"
            },
            {
              "type": "method",
              "value": "editProfile()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Student",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "StudentProfile"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The structure of Student comprises a method search. In SearchService, you can find a method searchTutors.",
    "PlantUML": "class Student {\n+search()\n}\n\nclass SearchService {\n  +searchTutors(criteria: Map): List<Tutor>\n}",
    "Model": "J21",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Student",
          "children": [
            {
              "type": "method",
              "value": "search()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "SearchService",
          "children": [
            {
              "type": "method",
              "value": "searchTutors(criteria: Map)",
              "visibility": "+",
              "data_type": "List<Tutor>"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The structure of Session comprises bookSession and sessionID attribute, dateTime attribute, an attribute status. Student is associated with Session. Tutor is linked to Session.",
    "PlantUML": "class Session {\n  -sessionID: String\n  -dateTime: DateTime\n  -status: String\n  +bookSession(): boolean\n}\n\nStudent \"1\" -- \"0..*\" Session\nTutor \"1\" -- \"0..*\" Session",
    "Model": "J21",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Session",
          "children": [
            {
              "type": "attribute",
              "value": "sessionID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "dateTime",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "bookSession()",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        },
        {
          "type": "class",
          "value": "Student",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Session"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Tutor",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Session"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Calendar encapsulates method viewSchedule and sessions attribute. User is associated with Calendar.",
    "PlantUML": "class Calendar {\n  -sessions: List<Session>\n  +viewSchedule(): List<Session>\n}\n\nUser \"1\" -- \"1\" Calendar",
    "Model": "J21",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Calendar",
          "children": [
            {
              "type": "attribute",
              "value": "sessions",
              "visibility": "-",
              "data_type": "List<Session>"
            },
            {
              "type": "method",
              "value": "viewSchedule()",
              "visibility": "+",
              "data_type": "List<Session>"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Calendar"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Notification includes an attribute message, timestamp and method send. User is associated with Notification.",
    "PlantUML": "class Notification {\n  -message: String\n  -timestamp: DateTime\n  +send(): void\n}\n\nUser \"1\" -- \"0..*\" Notification",
    "Model": "J21",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Notification",
          "children": [
            {
              "type": "attribute",
              "value": "message",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "method",
              "value": "send()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Notification"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Review encapsulates rating attribute, comment attribute, date. Student is associated with Review. Tutor is associated with Review.",
    "PlantUML": "class Review {\n  -rating: int\n  -comment: String\n  -date: Date\n}\n\nStudent \"1\" -- \"0..*\" Review\nTutor \"1\" -- \"0..*\" Review",
    "Model": "J21",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Review",
          "children": [
            {
              "type": "attribute",
              "value": "rating",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "comment",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "date",
              "visibility": "-",
              "data_type": "Date"
            }
          ]
        },
        {
          "type": "class",
          "value": "Student",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Review"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Tutor",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Review"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "In Admin, you can find an attribute adminID and method manageUsers, method moderateContent.",
    "PlantUML": "class Admin {\n  -adminID: String\n  +manageUsers(): void\n  +moderateContent(): void\n}",
    "Model": "J21",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Admin",
          "children": [
            {
              "type": "attribute",
              "value": "adminID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "manageUsers()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "moderateContent()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The design of Payment integrates process and paymentID, an attribute amount, an attribute status. Student is associated with Payment. Tutor is linked to Payment. Session is linked to Payment.",
    "PlantUML": "class Payment {\n  -paymentID: String\n  -amount: Double\n  -status: String\n  +process(): boolean\n}\n\nStudent \"1\" -- \"0..*\" Payment\nTutor \"1\" -- \"0..*\" Payment\nSession \"1\" -- \"1\" Payment",
    "Model": "J21",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Payment",
          "children": [
            {
              "type": "attribute",
              "value": "paymentID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "amount",
              "visibility": "-",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "process()",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        },
        {
          "type": "class",
          "value": "Student",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Payment"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Tutor",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Payment"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Session",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Payment"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The User has userId, email attribute, passwordHash and method register, method login.",
    "PlantUML": "class User {\n  +userId: String\n  +email: String\n  +passwordHash: String\n  +register()\n  +login()\n}\n",
    "Model": "J22",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "passwordHash",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "register()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "login()",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The design of Profile integrates a method updateProfile and fullName, preferences attribute, isSubscribed. User needs Profile.",
    "PlantUML": "\nclass Profile {\n  +fullName: String\n  +preferences: List<String>\n  +isSubscribed: Boolean\n  +updateProfile()\n}\nUser --> Profile",
    "Model": "J22",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Profile",
          "children": [
            {
              "type": "attribute",
              "value": "fullName",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "preferences",
              "visibility": "+",
              "data_type": "List<String>"
            },
            {
              "type": "attribute",
              "value": "isSubscribed",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "method",
              "value": "updateProfile()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Profile"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The structure of NewsArticle comprises an attribute articleId, an attribute title, an attribute content, publishedDate attribute and method getSummary, a method getFullContent. User depends on NewsArticle.",
    "PlantUML": "class NewsArticle {\n  +articleId: String\n  +title: String\n  +content: String\n  +publishedDate: Date\n  +getSummary()\n  +getFullContent()\n}\n\nUser --> NewsArticle : views\n",
    "Model": "J22",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "NewsArticle",
          "children": [
            {
              "type": "attribute",
              "value": "articleId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "content",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "publishedDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "method",
              "value": "getSummary()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "getFullContent()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "NewsArticle"
                }
              ],
              "label": "views"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Subscription is defined by an attribute planType, an attribute startDate, endDate and a method cancel, method renew. User needs Subscription.",
    "PlantUML": "class Subscription {\n  +planType: String\n  +startDate: Date\n  +endDate: Date\n  +cancel()\n  +renew()\n}\nUser --> Subscription : owns",
    "Model": "J22",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Subscription",
          "children": [
            {
              "type": "attribute",
              "value": "planType",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "startDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "endDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "method",
              "value": "cancel()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "renew()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Subscription"
                }
              ],
              "label": "owns"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "In Payment, you can find method processPayment and paymentId attribute, amount, status. Subscription depends on Payment.",
    "PlantUML": "class Payment {\n  +paymentId: String\n  +amount: Double\n  +status: String\n  +processPayment()\n}\n\nSubscription --> Payment",
    "Model": "J22",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Payment",
          "children": [
            {
              "type": "attribute",
              "value": "paymentId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "amount",
              "visibility": "+",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "processPayment()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Subscription",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Payment"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The design of Category integrates name, description. NewsArticle needs Category.",
    "PlantUML": "class Category {\n  +name: String\n  +description: String\n}\n\nNewsArticle --> Category",
    "Model": "J22",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Category",
          "children": [
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "NewsArticle",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Category"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Among the features of Admin are adminId attribute, an attribute email and manageArticles. Admin needs NewsArticle.",
    "PlantUML": "class Admin {\n  +adminId: String\n  +email: String\n  +manageArticles()\n}\nAdmin --> NewsArticle : manages\n",
    "Model": "J22",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Admin",
          "children": [
            {
              "type": "attribute",
              "value": "adminId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "manageArticles()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "NewsArticle"
                }
              ],
              "label": "manages"
            }
          ]
        },
        {
          "type": "class",
          "value": "NewsArticle",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The Comment has a method delete and commentId, content, timestamp attribute. User needs Comment. NewsArticle needs Comment.",
    "PlantUML": "class Comment {\n  +commentId: String\n  +content: String\n  +timestamp: Date\n  +delete()\n}\nUser --> Comment : writes\nNewsArticle --> Comment : has",
    "Model": "J22",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Comment",
          "children": [
            {
              "type": "attribute",
              "value": "commentId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "content",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "method",
              "value": "delete()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Comment"
                }
              ],
              "label": "writes"
            }
          ]
        },
        {
          "type": "class",
          "value": "NewsArticle",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Comment"
                }
              ],
              "label": "has"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Class SearchEngine contains method search. User needs SearchEngine.",
    "PlantUML": "class SearchEngine {\n  +search(query: String): List<NewsArticle>\n}\n\nUser --> SearchEngine : uses",
    "Model": "J22",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "SearchEngine",
          "children": [
            {
              "type": "method",
              "value": "search(query: String)",
              "visibility": "+",
              "data_type": "List<NewsArticle>"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "SearchEngine"
                }
              ],
              "label": "uses"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The structure of Notification comprises send and notificationId, type, message. User depends on Notification.",
    "PlantUML": "class Notification {\n  +notificationId: String\n  +type: String\n  +message: String\n  +send()\n}\n\nUser --> Notification : receives",
    "Model": "J22",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Notification",
          "children": [
            {
              "type": "attribute",
              "value": "notificationId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "type",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "message",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "send()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Notification"
                }
              ],
              "label": "receives"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The design of User integrates register, login and an attribute userID, an attribute email, an attribute password.",
    "PlantUML": "class User {\n  -userID: String\n  -email: String\n  -password: String\n  +register(): bool\n  +login(): bool\n}\n",
    "Model": "J23",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "register()",
              "visibility": "+",
              "data_type": "bool"
            },
            {
              "type": "method",
              "value": "login()",
              "visibility": "+",
              "data_type": "bool"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "SearchService encapsulates a method searchByLocation. User needs SearchService.",
    "PlantUML": "class SearchService {\n  +searchByLocation(location: String): List<ParkingSpace>\n}\n\nUser --> SearchService : uses\n",
    "Model": "J23",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "SearchService",
          "children": [
            {
              "type": "method",
              "value": "searchByLocation(location: String)",
              "visibility": "+",
              "data_type": "List<ParkingSpace>"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "SearchService"
                }
              ],
              "label": "uses"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "In ParkingSpace, you can find spaceID, an attribute location, an attribute price, isAvailable attribute.",
    "PlantUML": "class ParkingSpace {\n  -spaceID: String\n  -location: String\n  -price: double\n  -isAvailable: bool\n}\n",
    "Model": "J23",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ParkingSpace",
          "children": [
            {
              "type": "attribute",
              "value": "spaceID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "location",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "price",
              "visibility": "-",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "isAvailable",
              "visibility": "-",
              "data_type": "bool"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Class Owner contains an attribute ownerID, name attribute and method listSpace, method updateSpace. Owner depends on ParkingSpace.",
    "PlantUML": "class Owner {\n  -ownerID: String\n  -name: String\n  +listSpace(ps: ParkingSpace): void\n  +updateSpace(ps: ParkingSpace): void\n}\n\nOwner --> ParkingSpace : manages\n",
    "Model": "J23",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Owner",
          "children": [
            {
              "type": "attribute",
              "value": "ownerID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "listSpace(ps: ParkingSpace)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "updateSpace(ps: ParkingSpace)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "ParkingSpace"
                }
              ],
              "label": "manages"
            }
          ]
        },
        {
          "type": "class",
          "value": "ParkingSpace",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Class Booking contains an attribute bookingID, startTime attribute, endTime, status and method confirmBooking. Booking depends on ParkingSpace. User needs Booking.",
    "PlantUML": "class Booking {\n  -bookingID: String\n  -startTime: DateTime\n  -endTime: DateTime\n  -status: String\n  +confirmBooking(): bool\n}\n\nUser --> Booking : creates\nBooking --> ParkingSpace : reserves\n",
    "Model": "J23",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Booking",
          "children": [
            {
              "type": "attribute",
              "value": "bookingID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "startTime",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "endTime",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "confirmBooking()",
              "visibility": "+",
              "data_type": "bool"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "ParkingSpace"
                }
              ],
              "label": "reserves"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Booking"
                }
              ],
              "label": "creates"
            }
          ]
        },
        {
          "type": "class",
          "value": "ParkingSpace",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Payment includes method processPayment and paymentID, amount, method attribute. Booking depends on Payment.",
    "PlantUML": "class Payment {\n  -paymentID: String\n  -amount: double\n  -method: String\n  +processPayment(): bool\n}\n\nBooking --> Payment : initiates\n",
    "Model": "J23",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Payment",
          "children": [
            {
              "type": "attribute",
              "value": "paymentID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "amount",
              "visibility": "-",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "method",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "processPayment()",
              "visibility": "+",
              "data_type": "bool"
            }
          ]
        },
        {
          "type": "class",
          "value": "Booking",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Payment"
                }
              ],
              "label": "initiates"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The Notification has a method sendConfirmation, method sendReminder. User depends on Notification.",
    "PlantUML": "class Notification {\n  +sendConfirmation(user: User): void\n  +sendReminder(user: User): void\n}\n\nUser --> Notification : receives\n",
    "Model": "J23",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Notification",
          "children": [
            {
              "type": "method",
              "value": "sendConfirmation(user: User)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "sendReminder(user: User)",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Notification"
                }
              ],
              "label": "receives"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "User needs Booking. User needs Payment.",
    "PlantUML": "User --> Booking : has\nUser --> Payment : has\n",
    "Model": "J23",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Booking"
                }
              ],
              "label": "has"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Payment"
                }
              ],
              "label": "has"
            }
          ]
        },
        {
          "type": "class",
          "value": "Booking",
          "children": []
        },
        {
          "type": "class",
          "value": "Payment",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The structure of Admin comprises a method viewReports, manageUsers and an attribute adminID.",
    "PlantUML": "class Admin {\n  -adminID: String\n  +viewReports(): Report\n  +manageUsers(): void\n}\n",
    "Model": "J23",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Admin",
          "children": [
            {
              "type": "attribute",
              "value": "adminID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "viewReports()",
              "visibility": "+",
              "data_type": "Report"
            },
            {
              "type": "method",
              "value": "manageUsers()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "In SecurityManager, you can find method authenticate, encrypt. User needs SecurityManager.",
    "PlantUML": "class SecurityManager {\n  +authenticate(user: User): bool\n  +encrypt(data: String): String\n}\n\nUser --> SecurityManager : \"authenticated by\"\n",
    "Model": "J23",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "SecurityManager",
          "children": [
            {
              "type": "method",
              "value": "authenticate(user: User)",
              "visibility": "+",
              "data_type": "bool"
            },
            {
              "type": "method",
              "value": "encrypt(data: String)",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "SecurityManager"
                }
              ],
              "label": "\"authenticated by\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "User is defined by a method register, a method updateProfile and userID attribute, name attribute, an attribute email, password attribute, contactInfo attribute.",
    "PlantUML": "class User {\n  - userID: String\n  - name: String\n  - email: String\n  - password: String\n  - contactInfo: String\n  + register()\n  + updateProfile()\n}\n",
    "Model": "J24",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "contactInfo",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "register()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "updateProfile()",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The design of Therapist integrates therapistID, name attribute, qualifications attribute, an attribute specialties, availability attribute and a method updateProfile, method manageSchedule.",
    "PlantUML": "class Therapist {\n  - therapistID: String\n  - name: String\n  - qualifications: String\n  - specialties: List<String>\n  - availability: Schedule\n  + updateProfile()\n  + manageSchedule()\n}\n\n",
    "Model": "J24",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Therapist",
          "children": [
            {
              "type": "attribute",
              "value": "therapistID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "qualifications",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "specialties",
              "visibility": "-",
              "data_type": "List<String>"
            },
            {
              "type": "attribute",
              "value": "availability",
              "visibility": "-",
              "data_type": "Schedule"
            },
            {
              "type": "method",
              "value": "updateProfile()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "manageSchedule()",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The design of Appointment integrates schedule, a method reschedule, method cancel and appointmentID attribute, an attribute userID, therapistID attribute, dateTime, an attribute status. User is linked to Appointment. Therapist is associated with Appointment.",
    "PlantUML": "class Appointment {\n  - appointmentID: String\n  - userID: String\n  - therapistID: String\n  - dateTime: DateTime\n  - status: String\n  + schedule()\n  + reschedule()\n  + cancel()\n}\nUser \"1\" -- \"0..*\" Appointment : schedules\nTherapist \"1\" -- \"0..*\" Appointment : receives ",
    "Model": "J24",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Appointment",
          "children": [
            {
              "type": "attribute",
              "value": "appointmentID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "userID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "therapistID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "dateTime",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "schedule()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "reschedule()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "cancel()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Appointment"
                }
              ],
              "label": "schedules",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Therapist",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Appointment"
                }
              ],
              "label": "receives",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The TherapySession has method startSession, endSession, a method addNotes and sessionID attribute, appointmentID, an attribute sessionType, duration, notes. Appointment is associated with TherapySession.",
    "PlantUML": "class TherapySession {\n  - sessionID: String\n  - appointmentID: String\n  - sessionType: String\n  - duration: int\n  - notes: String\n  + startSession()\n  + endSession()\n  + addNotes()\n}\nAppointment \"1\" -- \"1\" TherapySession : generates ",
    "Model": "J24",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "TherapySession",
          "children": [
            {
              "type": "attribute",
              "value": "sessionID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "appointmentID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "sessionType",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "duration",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "notes",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "startSession()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "endSession()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "addNotes()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Appointment",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "TherapySession"
                }
              ],
              "label": "generates",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The Assessment has assessmentID attribute, userID, an attribute questions, an attribute responses, an attribute score and method takeAssessment, method calculateScore. User is associated with Assessment.",
    "PlantUML": "class Assessment {\n  - assessmentID: String\n  - userID: String\n  - questions: List<String>\n  - responses: List<String>\n  - score: float\n  + takeAssessment()\n  + calculateScore()\n}\nUser \"1\" -- \"0..*\" Assessment : takes ",
    "Model": "J24",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Assessment",
          "children": [
            {
              "type": "attribute",
              "value": "assessmentID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "userID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "questions",
              "visibility": "-",
              "data_type": "List<String>"
            },
            {
              "type": "attribute",
              "value": "responses",
              "visibility": "-",
              "data_type": "List<String>"
            },
            {
              "type": "attribute",
              "value": "score",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "method",
              "value": "takeAssessment()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "calculateScore()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Assessment"
                }
              ],
              "label": "takes",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Resource is defined by browse, search, method bookmark and resourceID, an attribute title, type, contentURL attribute. Resource is linked to User.",
    "PlantUML": "class Resource {\n  - resourceID: String\n  - title: String\n  - type: String\n  - contentURL: String\n  + browse()\n  + search()\n  + bookmark()\n}\nResource \"0..*\" -- \"*\" User : \"bookmarked by\"",
    "Model": "J24",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Resource",
          "children": [
            {
              "type": "attribute",
              "value": "resourceID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "type",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "contentURL",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "browse()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "search()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "bookmark()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "\"bookmarked by\"",
              "multiplicity1": "0..*",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "In Notification, you can find an attribute notificationID, an attribute recipientID, message, an attribute dateTime and send. User is associated with Notification. Therapist is linked to Notification.",
    "PlantUML": "class Notification {\n  - notificationID: String\n  - recipientID: String\n  - message: String\n  - dateTime: DateTime\n  + send()\n}\nUser \"1\" -- \"0..*\" Notification : receives\nTherapist \"1\" -- \"0..*\" Notification : receives ",
    "Model": "J24",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Notification",
          "children": [
            {
              "type": "attribute",
              "value": "notificationID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "recipientID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "message",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "dateTime",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "method",
              "value": "send()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Notification"
                }
              ],
              "label": "receives",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Therapist",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Notification"
                }
              ],
              "label": "receives",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "User includes id, name attribute, email, password attribute, role attribute.",
    "PlantUML": "class User {\n  + id : String\n  + name : String\n  + email : String\n  + password : String\n  + role : Role\n}\n",
    "Model": "J25",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "role",
              "visibility": "+",
              "data_type": "Role"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The design of Project integrates id attribute, an attribute title, description, an attribute startDate, an attribute endDate, an attribute status. User depends on Project.",
    "PlantUML": "class Project {\n  + id : String\n  + title : String\n  + description : String\n  + startDate : Date\n  + endDate : Date\n  + status : ProjectStatus\n}\n\n\nUser \"1\" --> \"*\" Project : manages",
    "Model": "J25",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Project",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "startDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "endDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "+",
              "data_type": "ProjectStatus"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Project"
                }
              ],
              "label": "manages",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "In Task, you can find id, title, description attribute, an attribute priority, status, dueDate. Project needs Task. User needs Task.",
    "PlantUML": "class Task {\n  + id : String\n  + title : String\n  + description : String\n  + priority : Priority\n  + status : TaskStatus\n  + dueDate : Date\n}\n\n\n\nProject \"1\" --> \"*\" Task : contains\nUser \"1\" --> \"*\" Task : assignedTo\n",
    "Model": "J25",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Task",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "priority",
              "visibility": "+",
              "data_type": "Priority"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "+",
              "data_type": "TaskStatus"
            },
            {
              "type": "attribute",
              "value": "dueDate",
              "visibility": "+",
              "data_type": "Date"
            }
          ]
        },
        {
          "type": "class",
          "value": "Project",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Task"
                }
              ],
              "label": "contains",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Task"
                }
              ],
              "label": "assignedTo",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "In Comment, you can find id, message attribute, an attribute timestamp. Task depends on Comment. User needs Comment.",
    "PlantUML": "class Comment {\n  + id : String\n  + message : String\n  + timestamp : Date\n}\n\n\nTask \"1\" --> \"*\" Comment : has\nUser \"1\" --> \"*\" Comment : authored\n",
    "Model": "J25",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Comment",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "message",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "+",
              "data_type": "Date"
            }
          ]
        },
        {
          "type": "class",
          "value": "Task",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Comment"
                }
              ],
              "label": "has",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Comment"
                }
              ],
              "label": "authored",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Attachment is defined by an attribute id, an attribute fileName, fileType attribute, uploadedAt. Task depends on Attachment.",
    "PlantUML": "class Attachment {\n  + id : String\n  + fileName : String\n  + fileType : String\n  + uploadedAt : Date\n}\n\n\nTask \"1\" --> \"*\" Attachment : includes\n",
    "Model": "J25",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Attachment",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "fileName",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "fileType",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "uploadedAt",
              "visibility": "+",
              "data_type": "Date"
            }
          ]
        },
        {
          "type": "class",
          "value": "Task",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Attachment"
                }
              ],
              "label": "includes",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Among the features of Team are an attribute id, an attribute name. Team depends on User. Project depends on Team.",
    "PlantUML": "class Team {\n  + id : String\n  + name : String\n}\n\n\nTeam \"1\" --> \"*\" User : hasMembers\nProject \"1\" --> \"1\" Team : belongsTo\n",
    "Model": "J25",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Team",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "hasMembers",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        },
        {
          "type": "class",
          "value": "Project",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Team"
                }
              ],
              "label": "belongsTo",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Among the features of Notification are id, message attribute, type, isRead attribute. User depends on Notification.",
    "PlantUML": "class Notification {\n  + id : String\n  + message : String\n  + type : NotificationType\n  + isRead : Boolean\n}\n\n\nUser \"1\" --> \"*\" Notification : receives\n",
    "Model": "J25",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Notification",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "message",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "type",
              "visibility": "+",
              "data_type": "NotificationType"
            },
            {
              "type": "attribute",
              "value": "isRead",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Notification"
                }
              ],
              "label": "receives",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "AuditLog is defined by id, action attribute, an attribute targetId, an attribute timestamp. User needs AuditLog.",
    "PlantUML": "class AuditLog {\n  + id : String\n  + action : String\n  + targetId : String\n  + timestamp : Date\n}\n\n\nUser \"1\" --> \"*\" AuditLog : created\n",
    "Model": "J25",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AuditLog",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "action",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "targetId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "+",
              "data_type": "Date"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "AuditLog"
                }
              ],
              "label": "created",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The User has method register, a method login, a method logout, a method updateProfile and userId, username attribute, password attribute, name attribute, email, phone attribute.",
    "PlantUML": "class User {\n  -userId: String\n  -username: String\n  -password: String\n  -name: String\n  -email: String\n  -phone: String\n  +register()\n  +login()\n  +logout()\n  +updateProfile()\n}\n",
    "Model": "J26",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "username",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "phone",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "register()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "login()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "logout()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "updateProfile()",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The structure of Role comprises an attribute roleId, an attribute roleName. User depends on Role.",
    "PlantUML": "class Role {\n  -roleId: String\n  -roleName: String\n}\nUser --> Role : has\n",
    "Model": "J26",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Role",
          "children": [
            {
              "type": "attribute",
              "value": "roleId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "roleName",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Role"
                }
              ],
              "label": "has"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Among the features of Service are createService, method updateService and serviceId attribute, title attribute, description, an attribute durationInMinutes. Service depends on User.",
    "PlantUML": "class Service {\n  -serviceId: String\n  -title: String\n  -description: String\n  -durationInMinutes: int\n  +createService()\n  +updateService()\n}\nService --> User : offeredBy\n",
    "Model": "J26",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Service",
          "children": [
            {
              "type": "attribute",
              "value": "serviceId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "durationInMinutes",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "method",
              "value": "createService()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "updateService()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "offeredBy"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Among the features of Appointment are a method book, a method cancel, method updateStatus and an attribute appointmentId, an attribute appointmentTime, status attribute, an attribute notes. Appointment depends on Service. Appointment depends on User.",
    "PlantUML": "class Appointment {\n  -appointmentId: String\n  -appointmentTime: DateTime\n  -status: String\n  -notes: String\n  +book()\n  +cancel()\n  +updateStatus()\n}\nAppointment --> Service : for\nAppointment --> User : bookedBy\n",
    "Model": "J26",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Appointment",
          "children": [
            {
              "type": "attribute",
              "value": "appointmentId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "appointmentTime",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "notes",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "book()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "cancel()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "updateStatus()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Service"
                }
              ],
              "label": "for"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "bookedBy"
            }
          ]
        },
        {
          "type": "class",
          "value": "Service",
          "children": []
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "TimeSlot includes an attribute slotId, an attribute date, startTime attribute, an attribute endTime, maxAppointments attribute and method setAvailability. TimeSlot needs User. Appointment needs TimeSlot.",
    "PlantUML": "class TimeSlot {\n  -slotId: String\n  -date: Date\n  -startTime: Time\n  -endTime: Time\n  -maxAppointments: int\n  +setAvailability()\n}\nTimeSlot --> User : belongsTo\nAppointment --> TimeSlot : scheduledIn\n",
    "Model": "J26",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "TimeSlot",
          "children": [
            {
              "type": "attribute",
              "value": "slotId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "date",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "startTime",
              "visibility": "-",
              "data_type": "Time"
            },
            {
              "type": "attribute",
              "value": "endTime",
              "visibility": "-",
              "data_type": "Time"
            },
            {
              "type": "attribute",
              "value": "maxAppointments",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "method",
              "value": "setAvailability()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "belongsTo"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        },
        {
          "type": "class",
          "value": "Appointment",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "TimeSlot"
                }
              ],
              "label": "scheduledIn"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Among the features of Notification are notificationId, message attribute, sentTime, type and method send. Notification needs User.",
    "PlantUML": "class Notification {\n  -notificationId: String\n  -message: String\n  -sentTime: DateTime\n  -type: String\n  +send()\n}\nNotification --> User : sentTo\n",
    "Model": "J26",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Notification",
          "children": [
            {
              "type": "attribute",
              "value": "notificationId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "message",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "sentTime",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "type",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "send()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "sentTo"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Review includes method submitReview and an attribute reviewId, rating attribute, comment attribute. Review needs Service. Review needs User.",
    "PlantUML": "class Review {\n  -reviewId: String\n  -rating: int\n  -comment: String\n  +submitReview()\n}\nReview --> Service : for\nReview --> User : by\n",
    "Model": "J26",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Review",
          "children": [
            {
              "type": "attribute",
              "value": "reviewId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "rating",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "comment",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "submitReview()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Service"
                }
              ],
              "label": "for"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "by"
            }
          ]
        },
        {
          "type": "class",
          "value": "Service",
          "children": []
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "AdminDashboard is defined by a method viewUsers, method manageServices, generateReports. User is a subclass of Admin.",
    "PlantUML": "class AdminDashboard {\n  +viewUsers()\n  +manageServices()\n  +generateReports()\n}\nUser <|-- Admin\n",
    "Model": "J26",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AdminDashboard",
          "children": [
            {
              "type": "method",
              "value": "viewUsers()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "manageServices()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "generateReports()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Admin"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Admin",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "",
    "PlantUML": "class Patient {\n  + patientID : String;\n  + name : String;\n  + dateOfBirth : Date;\n  + gender : String;\n  + contactInfo : String;\n}\n\n",
    "Model": "J27",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Patient",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "MedicalRecord encapsulates recordID, patientID, an attribute createdAt, an attribute diagnosis, treatment attribute, doctorNotes. Patient is associated with MedicalRecord.",
    "PlantUML": "class MedicalRecord {\n  + recordID : String\n  + patientID : String\n  + createdAt : Date\n  + diagnosis : String\n  + treatment : String\n  + doctorNotes : String\n}\n\nPatient \"1\" -- \"*\" MedicalRecord : has >\n",
    "Model": "J27",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "MedicalRecord",
          "children": [
            {
              "type": "attribute",
              "value": "recordID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "patientID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "createdAt",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "diagnosis",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "treatment",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "doctorNotes",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Patient",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "MedicalRecord"
                }
              ],
              "label": "has >",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The Doctor has doctorID, name attribute, an attribute specialty. Doctor is linked to MedicalRecord.",
    "PlantUML": "class Doctor {\n  + doctorID : String\n  + name : String\n  + specialty : String\n}\n\nDoctor \"1\" -- \"*\" MedicalRecord : updates",
    "Model": "J27",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Doctor",
          "children": [
            {
              "type": "attribute",
              "value": "doctorID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "specialty",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "MedicalRecord"
                }
              ],
              "label": "updates",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "MedicalRecord",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The Appointment has an attribute appointmentID, an attribute time, patientID, doctorID attribute, an attribute status. Patient is associated with Appointment. Doctor is associated with Appointment.",
    "PlantUML": "class Appointment {\n  + appointmentID : String\n  + time : DateTime\n  + patientID : String\n  + doctorID : String\n  + status : String\n}\n\nPatient \"1\" -- \"*\" Appointment : books \nDoctor \"1\" -- \"*\" Appointment : attends \n",
    "Model": "J27",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Appointment",
          "children": [
            {
              "type": "attribute",
              "value": "appointmentID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "time",
              "visibility": "+",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "patientID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "doctorID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Patient",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Appointment"
                }
              ],
              "label": "books",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Doctor",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Appointment"
                }
              ],
              "label": "attends",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Among the features of User are userID attribute, an attribute username, passwordHash attribute, role.",
    "PlantUML": "class User {\n  + userID : String\n  + username : String\n  + passwordHash : String\n  + role : UserRole\n}\n\n\n",
    "Model": "J27",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "username",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "passwordHash",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "role",
              "visibility": "+",
              "data_type": "UserRole"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "In Vitals, you can find vitalsID, patientID attribute, measuredAt, bloodPressure, an attribute temperature. Patient is associated with Vitals. User is associated with Vitals.",
    "PlantUML": "class Vitals {\n  + vitalsID : String\n  + patientID : String\n  + measuredAt : Date\n  + bloodPressure : String\n  + temperature : Float\n}\n\nPatient \"1\" -- \"*\" Vitals : has >\nUser \"1\" -- \"*\" Vitals : enteredBy >\n",
    "Model": "J27",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Vitals",
          "children": [
            {
              "type": "attribute",
              "value": "vitalsID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "patientID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "measuredAt",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "bloodPressure",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "temperature",
              "visibility": "+",
              "data_type": "float"
            }
          ]
        },
        {
          "type": "class",
          "value": "Patient",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Vitals"
                }
              ],
              "label": "has >",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Vitals"
                }
              ],
              "label": "enteredBy >",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Prescription encapsulates prescriptionID attribute, an attribute medication, an attribute dosage, durationDays, doctorID, patientID. Doctor is associated with Prescription. Patient is associated with Prescription.",
    "PlantUML": "class Prescription {\n  + prescriptionID : String\n  + medication : String\n  + dosage : String\n  + durationDays : Int\n  + doctorID : String\n  + patientID : String\n}\n\nDoctor \"1\" -- \"*\" Prescription : issues \nPatient \"1\" -- \"*\" Prescription : receives \n",
    "Model": "J27",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Prescription",
          "children": [
            {
              "type": "attribute",
              "value": "prescriptionID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "medication",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "dosage",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "durationDays",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "doctorID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "patientID",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Doctor",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Prescription"
                }
              ],
              "label": "issues",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Patient",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Prescription"
                }
              ],
              "label": "receives",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "AuditLog encapsulates logID, userID, an attribute action, targetEntity, timestamp attribute. User is linked to AuditLog.",
    "PlantUML": "class AuditLog {\n  + logID : String\n  + userID : String\n  + action : String\n  + targetEntity : String\n  + timestamp : DateTime\n}\n\nUser \"1\" -- \"*\" AuditLog : performs ",
    "Model": "J27",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AuditLog",
          "children": [
            {
              "type": "attribute",
              "value": "logID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "userID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "action",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "targetEntity",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "+",
              "data_type": "DateTime"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "AuditLog"
                }
              ],
              "label": "performs",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "LabResult encapsulates resultID, recordID, dateOfTest attribute, resultSummary attribute, an attribute attachedFiles. MedicalRecord is associated with LabResult.",
    "PlantUML": "class LabResult {\n  + resultID : String\n  + recordID : String\n  + dateOfTest : Date\n  + resultSummary : String\n  + attachedFiles : String\n}\n\nMedicalRecord \"1\" -- \"*\" LabResult : includes \n",
    "Model": "J27",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "LabResult",
          "children": [
            {
              "type": "attribute",
              "value": "resultID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "recordID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "dateOfTest",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "resultSummary",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "attachedFiles",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "MedicalRecord",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "LabResult"
                }
              ],
              "label": "includes",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The design of Invoice integrates invoiceID attribute, an attribute patientID, totalAmount, issuedAt attribute, paymentStatus. Patient is associated with Invoice.",
    "PlantUML": "class Invoice {\n  + invoiceID : String\n  + patientID : String\n  + totalAmount : Float\n  + issuedAt : Date\n  + paymentStatus : String\n}\n\nPatient \"1\" -- \"*\" Invoice : billed ",
    "Model": "J27",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Invoice",
          "children": [
            {
              "type": "attribute",
              "value": "invoiceID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "patientID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "totalAmount",
              "visibility": "+",
              "data_type": "float"
            },
            {
              "type": "attribute",
              "value": "issuedAt",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "paymentStatus",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Patient",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Invoice"
                }
              ],
              "label": "billed",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "User is defined by a method login, method logout and userID, username attribute, an attribute password, an attribute email. User is a subclass of Student. User is a subclass of Teacher. User is a subclass of Administrator. The Student has a method viewExam, method takeExam and an attribute studentID. In Teacher, you can find createExam, gradeExam and an attribute teacherID. Among the features of Administrator are manageUsers, method generateReports.",
    "PlantUML": "class User {\n  - userID: String\n  - username: String\n  - password: String\n  - email: String\n  + login()\n  + logout()\n}\n\nclass Student {\n  - studentID: String\n  + viewExam()\n  + takeExam()\n}\n\nclass Teacher {\n  - teacherID: String\n  + createExam()\n  + gradeExam()\n}\n\nclass Administrator {\n  + manageUsers()\n  + generateReports()\n}\n\nUser <|-- Student\nUser <|-- Teacher\nUser <|-- Administrator",
    "Model": "J28",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "username",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "login()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "logout()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Student"
                }
              ]
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Teacher"
                }
              ]
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Administrator"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Student",
          "children": [
            {
              "type": "attribute",
              "value": "studentID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "viewExam()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "takeExam()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Teacher",
          "children": [
            {
              "type": "attribute",
              "value": "teacherID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "createExam()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "gradeExam()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Administrator",
          "children": [
            {
              "type": "method",
              "value": "manageUsers()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "generateReports()",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The design of Exam integrates method addQuestion, removeQuestion and examID attribute, an attribute title, duration, totalMarks attribute. Exam is linked to Question. Class Question contains questionID attribute, questionType attribute, text, marks attribute and display. Teacher is associated with Exam.",
    "PlantUML": "class Exam {\n  - examID: String\n  - title: String\n  - duration: int\n  - totalMarks: int\n  + addQuestion(Question)\n  + removeQuestion(Question)\n}\n\nclass Question {\n  - questionID: String\n  - questionType: String\n  - text: String\n  - marks: int\n  + display()\n}\n\n\nTeacher \"1\" -- \"0..*\" Exam : creates\nExam \"1\" -- \"0..*\" Question : contains",
    "Model": "J28",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Exam",
          "children": [
            {
              "type": "attribute",
              "value": "examID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "duration",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "totalMarks",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "method",
              "value": "addQuestion(Question)",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "removeQuestion(Question)",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Question"
                }
              ],
              "label": "contains",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Question",
          "children": [
            {
              "type": "attribute",
              "value": "questionID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "questionType",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "text",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "marks",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "method",
              "value": "display()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Teacher",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Exam"
                }
              ],
              "label": "creates",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The design of Enrollment integrates enrollmentID attribute, an attribute enrollmentDate and a method enrollStudent. Enrollment is linked to Student. Enrollment is linked to Exam. Student is linked to Enrollment. Exam is associated with Enrollment.",
    "PlantUML": "class Enrollment {\n  - enrollmentID: String\n  - enrollmentDate: Date\n  + enrollStudent(Student, Exam)\n}\n\nStudent \"1\" -- \"0..*\" Enrollment : enrolls\nExam \"1\" -- \"0..*\" Enrollment : includes\nEnrollment \"1\" -- \"1\" Student\nEnrollment \"1\" -- \"1\" Exam",
    "Model": "J28",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Enrollment",
          "children": [
            {
              "type": "attribute",
              "value": "enrollmentID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "enrollmentDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "method",
              "value": "enrollStudent(Student, Exam)",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Student"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "1"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Exam"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Student",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Enrollment"
                }
              ],
              "label": "enrolls",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Exam",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Enrollment"
                }
              ],
              "label": "includes",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Grade encapsulates calculateTotal and gradeID, marksObtained attribute. Teacher is linked to Grade.",
    "PlantUML": "class Grade {\n  - gradeID: String\n  - marksObtained: float\n  + calculateTotal()\n}\n\nTeacher \"1\" -- \"0..*\" Grade : assigns",
    "Model": "J28",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Grade",
          "children": [
            {
              "type": "attribute",
              "value": "gradeID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "marksObtained",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "method",
              "value": "calculateTotal()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Teacher",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Grade"
                }
              ],
              "label": "assigns",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The structure of Report comprises a method generateReport and an attribute reportID, reportType, an attribute generatedOn. In Administrator, you can find method generateReports. Administrator is associated with Report. Exam is associated with Report.",
    "PlantUML": "class Report {\n  - reportID: String\n  - reportType: String\n  - generatedOn: Date\n  + generateReport()\n}\n\nclass Administrator {\n  + generateReports()\n}\n\nAdministrator \"1\" -- \"0..*\" Report : generates\nExam \"1\" -- \"0..*\" Report : analyzedIn\n",
    "Model": "J28",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Report",
          "children": [
            {
              "type": "attribute",
              "value": "reportID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "reportType",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "generatedOn",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "method",
              "value": "generateReport()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Administrator",
          "children": [
            {
              "type": "method",
              "value": "generateReports()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Report"
                }
              ],
              "label": "generates",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Exam",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Report"
                }
              ],
              "label": "analyzedIn",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Class Product contains updateStock and productId attribute, name, description, an attribute SKU, price attribute, quantityInStock attribute.",
    "PlantUML": "class Product {\n  + productId : String\n  + name : String\n  + description : String\n  + SKU : String\n  + price : double\n  + quantityInStock : int\n  + updateStock(amount : int)\n}\n\n",
    "Model": "J29",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Product",
          "children": [
            {
              "type": "attribute",
              "value": "productId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "SKU",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "price",
              "visibility": "+",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "quantityInStock",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "method",
              "value": "updateStock(amount : int)",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Supplier includes supplierId attribute, an attribute name, contactInfo. Supplier is associated with Product.",
    "PlantUML": "\nclass Supplier {\n  +supplierId : String\n  +name : String\n  +contactInfo : String\n}\n\n\nSupplier \"1\" -- \"0..*\" Product : supplies \n",
    "Model": "J29",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Supplier",
          "children": [
            {
              "type": "attribute",
              "value": "supplierId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "contactInfo",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Product"
                }
              ],
              "label": "supplies",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Product",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The design of InventoryTransaction integrates transactionId attribute, date attribute, transactionType, quantity attribute. InventoryTransaction needs Product.",
    "PlantUML": "class InventoryTransaction {\n  + transactionId : String\n  + date : Date\n  + transactionType : String\n  + quantity : int\n}\n\n\nInventoryTransaction \"1\" --> \"1\" Product\n",
    "Model": "J29",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "InventoryTransaction",
          "children": [
            {
              "type": "attribute",
              "value": "transactionId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "date",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "transactionType",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "quantity",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Product"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Product",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "In Order, you can find placeOrder, a method updateStatus and an attribute orderId, an attribute orderDate, an attribute status. Order depends on Product. Order depends on Supplier.",
    "PlantUML": "class Order {\n  + orderId : String\n  + orderDate : Date\n  + status : String\n\n  + placeOrder() : void\n  + updateStatus(newStatus : String) : void\n}\n\nOrder \"1\" --> \"1..*\" Product : contains \nOrder \"1\" --> \"1\" Supplier : placedFrom \n",
    "Model": "J29",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Order",
          "children": [
            {
              "type": "attribute",
              "value": "orderId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "orderDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "placeOrder()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "updateStatus(newStatus : String)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Product"
                }
              ],
              "label": "contains",
              "multiplicity1": "1",
              "multiplicity2": "1..*"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Supplier"
                }
              ],
              "label": "placedFrom",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Product",
          "children": []
        },
        {
          "type": "class",
          "value": "Supplier",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The design of User integrates a method login, a method logout and an attribute userId, username attribute, role. User is a subclass of Admin. User is a subclass of WarehouseManager. User is a subclass of Salesperson.",
    "PlantUML": "class User {\n  + userId : String\n  + username : String\n  + role : String\n\n  + login()\n  + logout()\n}\n\n\nUser <|-- Admin\nUser <|-- WarehouseManager\nUser <|-- Salesperson\n",
    "Model": "J29",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "username",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "role",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "login()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "logout()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Admin"
                }
              ]
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "WarehouseManager"
                }
              ]
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Salesperson"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Admin",
          "children": []
        },
        {
          "type": "class",
          "value": "WarehouseManager",
          "children": []
        },
        {
          "type": "class",
          "value": "Salesperson",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Among the features of Report are reportId attribute, reportType and method generate. The Alert has alertId attribute, message, alertDate. Alert depends on Product.",
    "PlantUML": "class Report {\n  + reportId : String\n  + reportType : String\n  + generate()\n}\n\n\nclass Alert {\n  + alertId : String\n  + message : String\n  + alertDate : Date\n}\n\n\nAlert \"1\" --> \"1\" Product : concerns\n",
    "Model": "J29",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Report",
          "children": [
            {
              "type": "attribute",
              "value": "reportId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "reportType",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "generate()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Alert",
          "children": [
            {
              "type": "attribute",
              "value": "alertId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "message",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "alertDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Product"
                }
              ],
              "label": "concerns",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Product",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Category is defined by categoryId, name, description attribute. Category is associated with Product.",
    "PlantUML": "class Category {\n  + categoryId : String\n  + name : String\n  + description : String\n}\n\n\nCategory \"1\" -- \"0..*\" Product : includes\n",
    "Model": "J29",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Category",
          "children": [
            {
              "type": "attribute",
              "value": "categoryId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Product"
                }
              ],
              "label": "includes",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Product",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "There is a class called BackupSchedule that defines the timing and frequency of data backups. It includes attributes like scheduleId, backupTime, frequency, and lastBackupDate. It has methods such as startBackup() to initiate the backup and updateSchedule() to change the backup timing.",
    "PlantUML": "class BackupSchedule {\n    - scheduleId : String\n    - backupTime : Time\n    - frequency : String\n    - lastBackupDate : Date\n    + startBackup() : void\n    + updateSchedule(newTime: Time, newFrequency: String) : void\n}\n",
    "Model": "V1",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "BackupSchedule",
          "children": [
            {
              "type": "attribute",
              "value": "scheduleId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "backupTime",
              "visibility": "-",
              "data_type": "Time"
            },
            {
              "type": "attribute",
              "value": "frequency",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "lastBackupDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "method",
              "value": "startBackup()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "updateSchedule(newTime: Time, newFrequency: String)",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The BackupJob class represents an individual backup operation. It has attributes such as jobId, statu, startTime, endTime, and dataSize. It includes methods like execute() to perform the backup and cancel() to stop a running backup job.",
    "PlantUML": "class BackupJob {\n    - jobId : String\n    - status : String\n    - startTime : DateTime\n    - endTime : DateTime\n    - dataSize : long\n    + execute() : void\n    + cancel() : void\n}\n",
    "Model": "V1",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "BackupJob",
          "children": [
            {
              "type": "attribute",
              "value": "jobId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "startTime",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "endTime",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "dataSize",
              "visibility": "-",
              "data_type": "long"
            },
            {
              "type": "method",
              "value": "execute()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "cancel()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The BackupStorage class represents the location or medium where backups are saved. It has attributes such as storageId, storageType, capacity, and usedSpace. It provides methods like allocateSpace(size) to reserve storage and releaseSpace(size) to free up storage after deletion.",
    "PlantUML": "class BackupStorage {\n    - storageId : String\n    - storageType : String\n    - capacity : long\n    - usedSpace : long\n    + allocateSpace(size: long) : boolean\n    + releaseSpace(size: long) : void\n}\n",
    "Model": "V1",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "BackupStorage",
          "children": [
            {
              "type": "attribute",
              "value": "storageId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "storageType",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "capacity",
              "visibility": "-",
              "data_type": "long"
            },
            {
              "type": "attribute",
              "value": "usedSpace",
              "visibility": "-",
              "data_type": "long"
            },
            {
              "type": "method",
              "value": "allocateSpace(size: long)",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "method",
              "value": "releaseSpace(size: long)",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The DisasterRecoveryPlan class encapsulates the procedures and steps to recover data and systems after a disaster. It includes attributes like planId, planName, description, and lastTestDate. It has methods such as activatePlan() to start the recovery process and testPlan() to simulate and verify recovery readiness.",
    "PlantUML": "class DisasterRecoveryPlan {\n    - planId : String\n    - planName : String\n    - description : String\n    - lastTestDate : Date\n    + activatePlan() : void\n    + testPlan() : boolean\n}\n",
    "Model": "V1",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "DisasterRecoveryPlan",
          "children": [
            {
              "type": "attribute",
              "value": "planId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "planName",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "lastTestDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "method",
              "value": "activatePlan()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "testPlan()",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The RecoveryPoint class represents a snapshot of data at a particular time that can be used for recovery. It contains pointId, timestamp, and description. It has methods like validate() to check data integrity and restore() to recover data from this point.",
    "PlantUML": "class RecoveryPoint {\n    - pointId : String\n    - timestamp : DateTime\n    - description : String\n    + validate() : boolean\n    + restore() : void\n}\n",
    "Model": "V1",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "RecoveryPoint",
          "children": [
            {
              "type": "attribute",
              "value": "pointId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "validate()",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "method",
              "value": "restore()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The BackupManager coordinates the backup process. It maintains collections of BackupSchedule, BackupJob, and BackupStorage. It includes methods like createBackupSchedule(), startBackupJob(), and manageStorage(). It controls overall backup orchestration.",
    "PlantUML": "class BackupManager {\n    + createBackupSchedule(schedule: BackupSchedule) : void\n    + startBackupJob(job: BackupJob) : void\n    + manageStorage(storage: BackupStorage) : void\n}\nBackupManager \"1\" -- \"*\" BackupSchedule\nBackupManager \"1\" -- \"*\" BackupJob\nBackupManager \"1\" -- \"*\" BackupStorage\n",
    "Model": "V1",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "BackupManager",
          "children": [
            {
              "type": "method",
              "value": "createBackupSchedule(schedule: BackupSchedule)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "startBackupJob(job: BackupJob)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "manageStorage(storage: BackupStorage)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "BackupSchedule"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "*"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "BackupJob"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "*"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "BackupStorage"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "BackupSchedule",
          "children": []
        },
        {
          "type": "class",
          "value": "BackupJob",
          "children": []
        },
        {
          "type": "class",
          "value": "BackupStorage",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The DisasterRecoveryCoordinator oversees disaster recovery plans and recovery points. It associates with multiple DisasterRecoveryPlan and RecoveryPoint objects. It provides methods like initiateRecovery() and schedulePlanTest().",
    "PlantUML": "class DisasterRecoveryCoordinator {\n    + initiateRecovery(plan: DisasterRecoveryPlan) : void\n    + schedulePlanTest(plan: DisasterRecoveryPlan) : void\n}\nDisasterRecoveryCoordinator \"1\" -- \"*\" DisasterRecoveryPlan\nDisasterRecoveryCoordinator \"1\" -- \"*\" RecoveryPoint\n",
    "Model": "V1",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "DisasterRecoveryCoordinator",
          "children": [
            {
              "type": "method",
              "value": "initiateRecovery(plan: DisasterRecoveryPlan)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "schedulePlanTest(plan: DisasterRecoveryPlan)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "DisasterRecoveryPlan"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "*"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "RecoveryPoint"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "DisasterRecoveryPlan",
          "children": []
        },
        {
          "type": "class",
          "value": "RecoveryPoint",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The Alert class represents notifications triggered during backup or recovery. Attributes include alertId, alertType, message, and timestamp. It has methods like send() and acknowledge().",
    "PlantUML": "class Alert {\n    - alertId : String\n    - alertType : String\n    - message : String\n    - timestamp : DateTime\n    + send() : void\n    + acknowledge() : void\n}\n",
    "Model": "V1",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Alert",
          "children": [
            {
              "type": "attribute",
              "value": "alertId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "alertType",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "message",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "method",
              "value": "send()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "acknowledge()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Alerts can be associated with BackupJob or DisasterRecoveryPlan for error reporting.",
    "PlantUML": "BackupJob \"0..*\" -- \"0..*\" Alert\nDisasterRecoveryPlan \"0..*\" -- \"0..*\" Alert\n",
    "Model": "V1",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "BackupJob",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Alert"
                }
              ],
              "multiplicity1": "0..*",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Alert",
          "children": []
        },
        {
          "type": "class",
          "value": "DisasterRecoveryPlan",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Alert"
                }
              ],
              "multiplicity1": "0..*",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system has a Bank class that manages multiple Account objects. Each Account has an account number, balance, and is associated with a customer.\n\n",
    "PlantUML": "class Bank {\n    - name: String\n    - address: String\n    + addAccount(account: Account): void\n    + removeAccount(accountNumber: String): void\n}\n\nclass Account {\n    - accountNumber: String\n    - balance: double\n    + deposit(amount: double): void\n    + withdraw(amount: double): boolean\n    + getBalance(): double\n}\n\nBank \"1\" --> \"*\" Account : manages \n",
    "Model": "V2",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Bank",
          "children": [
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "address",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "addAccount(account: Account)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "removeAccount(accountNumber: String)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Account"
                }
              ],
              "label": "manages",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Account",
          "children": [
            {
              "type": "attribute",
              "value": "accountNumber",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "balance",
              "visibility": "-",
              "data_type": "double"
            },
            {
              "type": "method",
              "value": "deposit(amount: double)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "withdraw(amount: double)",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "method",
              "value": "getBalance()",
              "visibility": "+",
              "data_type": "double"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Each Customer has a unique ID, name, and contact information. A customer can hold multiple accounts.",
    "PlantUML": "class Customer {\n    - customerId: String\n    - name: String\n    - email: String\n    - phoneNumber: String\n    + getDetails(): String\n}\n\nCustomer \"1\" --> \"*\" Account : owns >\n",
    "Model": "V2",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Customer",
          "children": [
            {
              "type": "attribute",
              "value": "customerId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "phoneNumber",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "getDetails()",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Account"
                }
              ],
              "label": "owns >",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Account",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "There are different types of accounts: SavingsAccount and CheckingAccount. Both inherit from the base Account class. SavingsAccount has an interest rate, and CheckingAccount has an overdraft limit.",
    "PlantUML": "class SavingsAccount {\n    - interestRate: double\n    + addInterest(): void\n}\n\nclass CheckingAccount {\n    - overdraftLimit: double\n    + checkOverdraft(): boolean\n}\n\nAccount <|-- SavingsAccount\nAccount <|-- CheckingAccount\n",
    "Model": "V2",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "SavingsAccount",
          "children": [
            {
              "type": "attribute",
              "value": "interestRate",
              "visibility": "-",
              "data_type": "double"
            },
            {
              "type": "method",
              "value": "addInterest()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "CheckingAccount",
          "children": [
            {
              "type": "attribute",
              "value": "overdraftLimit",
              "visibility": "-",
              "data_type": "double"
            },
            {
              "type": "method",
              "value": "checkOverdraft()",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        },
        {
          "type": "class",
          "value": "Account",
          "children": [
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "SavingsAccount"
                }
              ]
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "CheckingAccount"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system records every Transaction with a transaction ID, date, amount, and type (deposit, withdrawal, transfer). Each transaction is associated with one account.",
    "PlantUML": "class Transaction {\n    - transactionId: String\n    - date: Date\n    - amount: double\n    - type: String\n    + execute(): boolean\n}\n\nAccount \"1\" --> \"*\" Transaction : records \n",
    "Model": "V2",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Transaction",
          "children": [
            {
              "type": "attribute",
              "value": "transactionId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "date",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "amount",
              "visibility": "-",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "type",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "execute()",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        },
        {
          "type": "class",
          "value": "Account",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Transaction"
                }
              ],
              "label": "records",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "BankEmployee class represents bank staff with employee ID, name, and role. Employees manage the bank operations but are not directly linked to accounts.",
    "PlantUML": "class BankEmployee {\n    - employeeId: String\n    - name: String\n    - role: String\n    + performOperation(): void\n}\n\nBank \"1\" --> \"*\" BankEmployee : employs \n",
    "Model": "V2",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "BankEmployee",
          "children": [
            {
              "type": "attribute",
              "value": "employeeId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "role",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "performOperation()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Bank",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "BankEmployee"
                }
              ],
              "label": "employs",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Customers can apply for Loans. A Loan has a loan ID, amount, interest rate, and status. A loan is associated with one customer.",
    "PlantUML": "class Loan {\n    - loanId: String\n    - amount: double\n    - interestRate: double\n    - status: String\n    + approve(): void\n    + reject(): void\n}\n\nCustomer \"1\" --> \"*\" Loan : applies >\n",
    "Model": "V2",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Loan",
          "children": [
            {
              "type": "attribute",
              "value": "loanId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "amount",
              "visibility": "-",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "interestRate",
              "visibility": "-",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "approve()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "reject()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Customer",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Loan"
                }
              ],
              "label": "applies >",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Each customer has one or more addresses. Address is a separate class containing street, city, postal code, and country. This is a composition relationship.",
    "PlantUML": "class Address {\n    - street: String\n    - city: String\n    - postalCode: String\n    - country: String\n}\n\nCustomer \"1\" *-- \"*\" Address : has \n",
    "Model": "V2",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Address",
          "children": [
            {
              "type": "attribute",
              "value": "street",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "city",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "postalCode",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "country",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Customer",
          "children": [
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Address"
                }
              ],
              "label": "has",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system provides an OnlineBankingService that allows customers to login and perform transactions online.",
    "PlantUML": "class OnlineBankingService {\n    + login(customerId: String, password: String): boolean\n    + performTransaction(transaction: Transaction): boolean\n}\n\nCustomer \"1\" --> \"1\" OnlineBankingService : uses \n",
    "Model": "V2",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "OnlineBankingService",
          "children": [
            {
              "type": "method",
              "value": "login(customerId: String, password: String)",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "method",
              "value": "performTransaction(transaction: Transaction)",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        },
        {
          "type": "class",
          "value": "Customer",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "OnlineBankingService"
                }
              ],
              "label": "uses",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system must keep track of customers who visit the restaurant. Each customer has an ID, name, phone number, and email address. Customers can place multiple orders.\n",
    "PlantUML": "class Customer {\n    - customerID: int\n    - name: String\n    - phoneNumber: String\n    - email: String\n    + placeOrder(order: Order): void\n}\n\nclass Order {\n}\n\nCustomer \"1\" -- \"*\" Order : places\n\n",
    "Model": "V3",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Customer",
          "children": [
            {
              "type": "attribute",
              "value": "customerID",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "phoneNumber",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "placeOrder(order: Order)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Order"
                }
              ],
              "label": "places",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Order",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The order has orderID, orderDate and status.",
    "PlantUML": "class Order {\n    - orderID: int\n    - orderDate: Date\n    - status: String\n}",
    "Model": "V3",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Order",
          "children": [
            {
              "type": "attribute",
              "value": "orderID",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "orderDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The restaurant system must manage a menu containing many menu items. Each menu item has a unique item code, name, description, price, and category. ",
    "PlantUML": "class Menu {\n    + getMenuItems(): List<MenuItem>\n}\n\nclass MenuItem {\n    - itemCode: int\n    - name: String\n    - description: String\n    - price: float\n    - category: String\n}\n\n\n",
    "Model": "V3",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Menu",
          "children": [
            {
              "type": "method",
              "value": "getMenuItems()",
              "visibility": "+",
              "data_type": "List<MenuItem>"
            }
          ]
        },
        {
          "type": "class",
          "value": "MenuItem",
          "children": [
            {
              "type": "attribute",
              "value": "itemCode",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "price",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "attribute",
              "value": "category",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The menu can have multiple items.",
    "PlantUML": "Menu \"1\" -- \"*\" MenuItem : contains",
    "Model": "V3",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Menu",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "MenuItem"
                }
              ],
              "label": "contains",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "MenuItem",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Each order consists of one or more order items. ",
    "PlantUML": "Order \"1\" -- \"*\" OrderItem : contains ",
    "Model": "V3",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Order",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "OrderItem"
                }
              ],
              "label": "contains",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "OrderItem",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "ach order item records the menu item ordered, the quantity, and the subtotal price for that item.  An order can have multiple order items.",
    "PlantUML": "class Order {\n    - orderID: int\n    - orderDate: Date\n    - status: String\n}\n\nclass OrderItem {\n    - quantity: int\n    - subtotalPrice: float\n}\n\nclass MenuItem {\n    - itemCode: int\n    - name: String\n    - description: String\n    - price: float\n    - category: String\n}\n\nOrderItem \"*\" -- \"1\" MenuItem : refers to ",
    "Model": "V3",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Order",
          "children": [
            {
              "type": "attribute",
              "value": "orderID",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "orderDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "OrderItem",
          "children": [
            {
              "type": "attribute",
              "value": "quantity",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "subtotalPrice",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "MenuItem"
                }
              ],
              "label": "refers to",
              "multiplicity1": "*",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "MenuItem",
          "children": [
            {
              "type": "attribute",
              "value": "itemCode",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "price",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "attribute",
              "value": "category",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system should handle payments for orders. Each payment has a payment ID, payment date, payment amount, and payment method.",
    "PlantUML": "class Payment {\n    - paymentID: int\n    - paymentDate: Date\n    - amount: float\n    - method: String\n}\n\nclass Order {\n    - orderID: int\n    - orderDate: Date\n    - status: String\n}",
    "Model": "V3",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Payment",
          "children": [
            {
              "type": "attribute",
              "value": "paymentID",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "paymentDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "amount",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "attribute",
              "value": "method",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Order",
          "children": [
            {
              "type": "attribute",
              "value": "orderID",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "orderDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": " Each order is associated with one payment.",
    "PlantUML": "Order \"1\" -- \"1\" Payment : paid by ",
    "Model": "V3",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Order",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Payment"
                }
              ],
              "label": "paid by",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Payment",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The restaurant employs staff members. Each staff member has a staff ID, name, role, and contact information. Staff members can handle multiple orders.",
    "PlantUML": "class Staff {\n    - staffID: int\n    - name: String\n    - role: String\n    - contactInfo: String\n    + handleOrder(order: Order): void\n}\n\nclass Order {\n    - orderID: int\n    - orderDate: Date\n    - status: String\n}\n\nStaff \"1\" -- \"*\" Order : handles\n",
    "Model": "V3",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Staff",
          "children": [
            {
              "type": "attribute",
              "value": "staffID",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "role",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "contactInfo",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "handleOrder(order: Order)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Order"
                }
              ],
              "label": "handles",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Order",
          "children": [
            {
              "type": "attribute",
              "value": "orderID",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "orderDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Customers can reserve tables at the restaurant. Each reservation has a reservation ID, reservation date and time, number of guests, and status. Each reservation is linked to one customer and one table.",
    "PlantUML": "class Reservation {\n    - reservationID: int\n    - reservationDateTime: DateTime\n    - numberOfGuests: int\n    - status: String\n}\n\nclass Customer{ \n}\nclass Table {\n    - tableID: int\n    - tableNumber: int\n    - seats: int\n}\n\nReservation \"1\" -- \"1\" Customer : made by \nReservation \"1\" -- \"1\" Table : reserves \n",
    "Model": "V3",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Reservation",
          "children": [
            {
              "type": "attribute",
              "value": "reservationID",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "reservationDateTime",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "numberOfGuests",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Customer"
                }
              ],
              "label": "made by",
              "multiplicity1": "1",
              "multiplicity2": "1"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Table"
                }
              ],
              "label": "reserves",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Customer",
          "children": []
        },
        {
          "type": "class",
          "value": "Table",
          "children": [
            {
              "type": "attribute",
              "value": "tableID",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "tableNumber",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "seats",
              "visibility": "-",
              "data_type": "int"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The CDN structure includes the method distributeContent and relies on an EdgeServer. The EdgeServer features, among other things, a method called storeContent.",
    "PlantUML": "class CDN {\n  +distributeContent(content: Content)\n}\n\nclass EdgeServer {\n  +storeContent(content: Content)\n}\n\nCDN --> EdgeServer : \"distributes\"\n",
    "Model": "V4",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "CDN",
          "children": [
            {
              "type": "method",
              "value": "distributeContent(content: Content)",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "EdgeServer"
                }
              ],
              "label": "\"distributes\""
            }
          ]
        },
        {
          "type": "class",
          "value": "EdgeServer",
          "children": [
            {
              "type": "method",
              "value": "storeContent(content: Content)",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "RequestRouter contains the routeRequest function and interacts with EdgeServer.",
    "PlantUML": "class RequestRouter {\n  +routeRequest(userLocation: Location): EdgeServer\n}\n\nRequestRouter ..> EdgeServer : \"routes\"\n",
    "Model": "V4",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "RequestRouter",
          "children": [
            {
              "type": "method",
              "value": "routeRequest(userLocation: Location)",
              "visibility": "+",
              "data_type": "EdgeServer"
            },
            {
              "type": "relation",
              "value": "..>",
              "children": [
                {
                  "type": "class",
                  "value": "EdgeServer"
                }
              ],
              "label": "\"routes\""
            }
          ]
        },
        {
          "type": "class",
          "value": "EdgeServer",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Cache is a class with a store and a retrieve method, which is utilized by EdgeServer.",
    "PlantUML": "\"class Cache {\\n    +store(content: Content)\\n    +retrieve(contentId: String): Content\\n}\\n\\nEdgeServer ..> Cache : \\\"uses\\\"\\n\",\n ",
    "Model": "V4",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Cache",
          "children": []
        },
        {
          "type": "class",
          "value": "nEdgeServer",
          "children": [
            {
              "type": "relation",
              "value": "..>",
              "children": [
                {
                  "type": "class",
                  "value": "Cache"
                }
              ],
              "label": "\\\"uses\\\"\\n\","
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Analytics defines generateReport, and EdgeServer relies on Analytics.",
    "PlantUML": "class Analytics {\n  + generateReport(): Report\n}\n\nEdgeServer --> Analytics : \"sends\"\n",
    "Model": "V4",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Analytics",
          "children": [
            {
              "type": "method",
              "value": "generateReport()",
              "visibility": "+",
              "data_type": "Report"
            }
          ]
        },
        {
          "type": "class",
          "value": "EdgeServer",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Analytics"
                }
              ],
              "label": "\"sends\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Purger includes a method called purge, which is utilized by EdgeServer.",
    "PlantUML": "class Purger {\n  +purge(contentId: String)\n}\n\nEdgeServer ..> Purger : \"requests\"\n",
    "Model": "V4",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Purger",
          "children": [
            {
              "type": "method",
              "value": "purge(contentId: String)",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "EdgeServer",
          "children": [
            {
              "type": "relation",
              "value": "..>",
              "children": [
                {
                  "type": "class",
                  "value": "Purger"
                }
              ],
              "label": "\"requests\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "EdgeServer relies on the API, which provides the fetchDynamicContent method.",
    "PlantUML": "class API {\n  +fetchDynamicContent(userId: String): Content\n}\n\nEdgeServer --> API : \"fetches\"\n",
    "Model": "V4",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "API",
          "children": [
            {
              "type": "method",
              "value": "fetchDynamicContent(userId: String)",
              "visibility": "+",
              "data_type": "Content"
            }
          ]
        },
        {
          "type": "class",
          "value": "EdgeServer",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "API"
                }
              ],
              "label": "\"fetches\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Security contains the detectDDoS and encryptData methods, and it is a requirement for the CDN.",
    "PlantUML": "class Security {\n  + detectDDoS(): Boolean\n  + encryptData(data: Data): Data\n}\n\nCDN --> Security : \"integrates\"\n",
    "Model": "V4",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Security",
          "children": [
            {
              "type": "method",
              "value": "detectDDoS()",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "method",
              "value": "encryptData(data: Data)",
              "visibility": "+",
              "data_type": "Data"
            }
          ]
        },
        {
          "type": "class",
          "value": "CDN",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Security"
                }
              ],
              "label": "\"integrates\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The OriginServer includes a method called provideContent, which is required by the EdgeServer.",
    "PlantUML": "class OriginServer {\n  + provideContent(contentId: String): Content\n}\n\nEdgeServer --> OriginServer : fetches\n",
    "Model": "V4",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "OriginServer",
          "children": [
            {
              "type": "method",
              "value": "provideContent(contentId: String)",
              "visibility": "+",
              "data_type": "Content"
            }
          ]
        },
        {
          "type": "class",
          "value": "EdgeServer",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "OriginServer"
                }
              ],
              "label": "fetches"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The LoadBalancer is characterized by the balanceLoad method. The CDN relies on the LoadBalancer.",
    "PlantUML": "class LoadBalancer {\n    +balanceLoad(edgeServers: List<EdgeServer>)\n}\n\nCDN --> LoadBalancer : uses\n",
    "Model": "V4",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "LoadBalancer",
          "children": [
            {
              "type": "method",
              "value": "balanceLoad(edgeServers: List<EdgeServer>)",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "CDN",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "LoadBalancer"
                }
              ],
              "label": "uses"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The RuleEngine is built around the applyRules function. The CDN relies on the RuleEngine.",
    "PlantUML": "class RuleEngine {\n  +applyRules(content: Content, user: User)\n}\n\nCDN --> RuleEngine : configures\n",
    "Model": "V4",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "RuleEngine",
          "children": [
            {
              "type": "method",
              "value": "applyRules(content: Content, user: User)",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "CDN",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "RuleEngine"
                }
              ],
              "label": "configures"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Content is characterized by a type and a size attribute. The EdgeServer requires Content.",
    "PlantUML": "class Content {\n  +type: String\n  +size: int\n}\n\nEdgeServer --> Content : \"Stores\"\n",
    "Model": "V4",
    "RequirementIndex": "10",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Content",
          "children": [
            {
              "type": "attribute",
              "value": "type",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "size",
              "visibility": "+",
              "data_type": "int"
            }
          ]
        },
        {
          "type": "class",
          "value": "EdgeServer",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Content"
                }
              ],
              "label": "\"Stores\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The Compressor includes a method called compress. The CDN depends on the Compressor.",
    "PlantUML": "class Compressor {\n  +compress(content: Content): Content\n}\n\nCDN --> Compressor : \"compresses\"\n",
    "Model": "V4",
    "RequirementIndex": "11",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Compressor",
          "children": [
            {
              "type": "method",
              "value": "compress(content: Content)",
              "visibility": "+",
              "data_type": "Content"
            }
          ]
        },
        {
          "type": "class",
          "value": "CDN",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Compressor"
                }
              ],
              "label": "\"compresses\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The FailoverManager design includes the methods detectFailure and rerouteTraffic. The CDN relies on FailoverManager.",
    "PlantUML": "class FailoverManager {\n  + detectFailure(edgeServer: EdgeServer)\n  + rerouteTraffic(failedServer: EdgeServer)\n}\n\nCDN --> FailoverManager : \"ensures failover\"\n",
    "Model": "V4",
    "RequirementIndex": "12",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "FailoverManager",
          "children": [
            {
              "type": "method",
              "value": "detectFailure(edgeServer: EdgeServer)",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "rerouteTraffic(failedServer: EdgeServer)",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "CDN",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "FailoverManager"
                }
              ],
              "label": "\"ensures failover\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The Repository design includes a name attribute, a url attribute, and three methods: createRepository, cloneRepository, and deleteRepository. The User class encapsulates accessRepository and username attributes. Additionally, the User requires the Repository.",
    "PlantUML": "\nclass Repository {\n  - name: String\n  - url: String\n  + createRepository()\n  + cloneRepository()\n  + deleteRepository()\n}\n\nclass User {\n  - username: String\n  + accessRepository()\n}\n\nUser --> Repository : \"manages\"",
    "Model": "V5",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Repository",
          "children": [
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "url",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "createRepository()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "cloneRepository()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "deleteRepository()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "username",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "accessRepository()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Repository"
                }
              ],
              "label": "\"manages\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The Branch structure includes a createBranch method, a switchBranch method, a deleteBranch method, and an attribute called name. The Repository depends on Branch.",
    "PlantUML": "class Branch {\n  - name: String\n  + createBranch()\n  + switchBranch()\n  + deleteBranch()\n}\n\nRepository --> Branch : contains",
    "Model": "V5",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Branch",
          "children": [
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "createBranch()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "switchBranch()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "deleteBranch()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Repository",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Branch"
                }
              ],
              "label": "contains"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The Commit component includes the methods stageChanges and commitChanges, as well as the attributes hash and message. The Branch component relies on Commit, and the User component depends on Commit as well.",
    "PlantUML": "class Commit {\n  - hash: String\n  - message: String\n  + stageChanges()\n  + commitChanges()\n}\n\nBranch --> Commit : \"tracks\"\nUser --> Commit : \"makes\"",
    "Model": "V5",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Commit",
          "children": [
            {
              "type": "attribute",
              "value": "hash",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "message",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "stageChanges()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "commitChanges()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Branch",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Commit"
                }
              ],
              "label": "\"tracks\""
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Commit"
                }
              ],
              "label": "\"makes\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The concept of Merge is represented by two methods: mergeBranches and resolveConflicts. Additionally, Branch relies on Merge.\n",
    "PlantUML": "class Merge {\n  +mergeBranches()\n  +resolveConflicts()\n}\n\nBranch --> Merge : \"merges\"",
    "Model": "V5",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Merge",
          "children": [
            {
              "type": "method",
              "value": "mergeBranches()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "resolveConflicts()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Branch",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Merge"
                }
              ],
              "label": "\"merges\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The History class includes a method called viewLogs. The Commit component depends on History. The Repository component also relies on History.\n\n",
    "PlantUML": "class History {\n  +viewLogs()\n}\n\nCommit --> History : \"maintains\"\nRepository --> History : \"contains\"\n",
    "Model": "V5",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "History",
          "children": [
            {
              "type": "method",
              "value": "viewLogs()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Commit",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "History"
                }
              ],
              "label": "\"maintains\""
            }
          ]
        },
        {
          "type": "class",
          "value": "Repository",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "History"
                }
              ],
              "label": "\"contains\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Collaboration encompasses the methods pushChanges and pullChanges. The User component relies on Collaboration, and the Repository component also depends on Collaboration.",
    "PlantUML": "class Collaboration {\n    +pushChanges()\n    +pullChanges()\n}\n\nUser --> Collaboration : \"participates\"\nRepository --> Collaboration : \"facilitates\"",
    "Model": "V5",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Collaboration",
          "children": [
            {
              "type": "method",
              "value": "pushChanges()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "pullChanges()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Collaboration"
                }
              ],
              "label": "\"participates\""
            }
          ]
        },
        {
          "type": "class",
          "value": "Repository",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Collaboration"
                }
              ],
              "label": "\"facilitates\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "AccessControl contains a permissions attribute along with two methods: assignRole and checkPermission. The User relies on AccessControl, and the Repository also requires AccessControl.",
    "PlantUML": "class AccessControl {\n  - permissions: String\n  + assignRole()\n  + checkPermission()\n}\n\nUser --> AccessControl : \"uses\"\nRepository --> AccessControl : \"enforces\"",
    "Model": "V5",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AccessControl",
          "children": [
            {
              "type": "attribute",
              "value": "permissions",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "assignRole()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "checkPermission()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "AccessControl"
                }
              ],
              "label": "\"uses\""
            }
          ]
        },
        {
          "type": "class",
          "value": "Repository",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "AccessControl"
                }
              ],
              "label": "\"enforces\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The Tag contains a name attribute and two methods: createTag and deleteTag. The Commit relies on the Tag.",
    "PlantUML": "class Tag {\n  - name: String\n  + createTag()\n  + deleteTag()\n}\n\nCommit --> Tag : \"associates\"",
    "Model": "V5",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Tag",
          "children": [
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "createTag()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "deleteTag()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Commit",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Tag"
                }
              ],
              "label": "\"associates\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The class Conflict includes two methods detectConflict and resolveConflict. The Merge class relies on Conflict, and the File class requires Conflict as well.\n\n",
    "PlantUML": "class Conflict {\n  +detectConflict()\n  +resolveConflict()\n}\n\nMerge --> Conflict : \"handles\"\nFile --> Conflict : \"detects\"\n",
    "Model": "V5",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Conflict",
          "children": [
            {
              "type": "method",
              "value": "detectConflict()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "resolveConflict()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Merge",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Conflict"
                }
              ],
              "label": "\"handles\""
            }
          ]
        },
        {
          "type": "class",
          "value": "File",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Conflict"
                }
              ],
              "label": "\"detects\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The Backup module includes the methods createBackup and restoreBackup. ",
    "PlantUML": "class Backup {\n  +createBackup()\n  +restoreBackup()\n}\n\n",
    "Model": "V5",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Backup",
          "children": [
            {
              "type": "method",
              "value": "createBackup()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "restoreBackup()",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The Repository relies on Backup.",
    "PlantUML": "Repository --> Backup : \"supports\"",
    "Model": "V5",
    "RequirementIndex": "10",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Repository",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Backup"
                }
              ],
              "label": "\"supports\""
            }
          ]
        },
        {
          "type": "class",
          "value": "Backup",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The system shall allow a teacher to create a class and generate a unique class code.",
    "PlantUML": "class Teacher {\n  -teacherId: String\n  -name: String\n  +createClass(name: String): Class\n}\n\nclass Class {\n  -classId: String\n  -name: String\n  -code: String\n  -teacherId: String\n}\nTeacher --> Class : creates",
    "Model": "V6",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Teacher",
          "children": [
            {
              "type": "attribute",
              "value": "teacherId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "createClass(name: String)",
              "visibility": "+",
              "data_type": "Class"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Class"
                }
              ],
              "label": "creates"
            }
          ]
        },
        {
          "type": "class",
          "value": "Class",
          "children": [
            {
              "type": "attribute",
              "value": "classId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "code",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "teacherId",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system shall allow a teacher to generate a QR code for each class session.",
    "PlantUML": "class QRCode {\n  -qrId: String\n  -classId: String\n  -sessionDate: Date\n  -content: String\n  +generate(): void\n}\n\nClass --> QRCode : generates",
    "Model": "V6",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "QRCode",
          "children": [
            {
              "type": "attribute",
              "value": "qrId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "classId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "sessionDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "content",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "generate()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Class",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "QRCode"
                }
              ],
              "label": "generates"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system shall allow a student to scan a QR code to mark attendance.",
    "PlantUML": "class Student {\n  -studentId: String\n  -name: String\n  +scanQRCode(code: String): void\n}\n\nclass Attendance {\n  -attendanceId: String\n  -studentId: String\n  -classId: String\n  -sessionDate: Date\n  -status: String\n}\n\nStudent --> Attendance : scans",
    "Model": "V6",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Student",
          "children": [
            {
              "type": "attribute",
              "value": "studentId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "scanQRCode(code: String)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Attendance"
                }
              ],
              "label": "scans"
            }
          ]
        },
        {
          "type": "class",
          "value": "Attendance",
          "children": [
            {
              "type": "attribute",
              "value": "attendanceId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "studentId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "classId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "sessionDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system shall validate the QR code for the correct class and session date.",
    "PlantUML": "class QRValidator {\n  +validate(code: String): Boolean\n}\n\nQRCode --> QRValidator : validates",
    "Model": "V6",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "QRValidator",
          "children": [
            {
              "type": "method",
              "value": "validate(code: String)",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        },
        {
          "type": "class",
          "value": "QRCode",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "QRValidator"
                }
              ],
              "label": "validates"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system shall store attendance records in the database.",
    "PlantUML": "class Database {\n  +saveAttendance(attendance: Attendance): void\n  +getAttendanceByStudent(studentId: String): List<Attendance>\n}\n\nAttendance --> Database : storedIn",
    "Model": "V6",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Database",
          "children": [
            {
              "type": "method",
              "value": "saveAttendance(attendance: Attendance)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "getAttendanceByStudent(studentId: String)",
              "visibility": "+",
              "data_type": "List<Attendance>"
            }
          ]
        },
        {
          "type": "class",
          "value": "Attendance",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Database"
                }
              ],
              "label": "storedIn"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system shall allow teachers to view attendance reports for a class.",
    "PlantUML": "Teacher --> Attendance : views",
    "Model": "V6",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Teacher",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Attendance"
                }
              ],
              "label": "views"
            }
          ]
        },
        {
          "type": "class",
          "value": "Attendance",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The system shall allow students to view their personal attendance records.",
    "PlantUML": "Student --> Attendance : views ",
    "Model": "V6",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Student",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Attendance"
                }
              ],
              "label": "views"
            }
          ]
        },
        {
          "type": "class",
          "value": "Attendance",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The system shall prevent duplicate attendance entries for the same session.",
    "PlantUML": "class AttendanceManager {\n  +markAttendance(studentId: String, classId: String, sessionDate: Date): String\n}\n\nAttendanceManager --> Attendance : prevents",
    "Model": "V6",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AttendanceManager",
          "children": [
            {
              "type": "method",
              "value": "markAttendance(studentId: String, classId: String, sessionDate: Date)",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Attendance"
                }
              ],
              "label": "prevents"
            }
          ]
        },
        {
          "type": "class",
          "value": "Attendance",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "In Online Ticket Booking System for Events,  Users must be able to register, login, and manage their account securely using email and password.",
    "PlantUML": "class User {\n  - userId: String\n  - name: String\n  - email: String\n  - password: String\n  + register(): void\n  + login(): boolean\n}\n",
    "Model": "V7",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "register()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "login()",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Event organizers can create, update, and delete events including details like name, date, venue, and description.",
    "PlantUML": "class Event {\n  - eventId: String\n  - title: String\n  - date: Date\n  - venue: String\n  - description: String\n  + createEvent(): void\n  + updateEvent(): void\n  + deleteEvent(): void\n}\n",
    "Model": "V7",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Event",
          "children": [
            {
              "type": "attribute",
              "value": "eventId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "date",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "venue",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "createEvent()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "updateEvent()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "deleteEvent()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Users can browse events and book tickets by selecting the number of seats and paying online.  Each user can have multiple bookings.",
    "PlantUML": "class Booking {\n  - bookingId: String\n  - userId: String\n  - eventId: String\n  - ticketCount: int\n  - bookingDate: Date\n  + makeBooking(): boolean\n}\nUser \"1\" -- \"0..*\" Booking : makes ",
    "Model": "V7",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Booking",
          "children": [
            {
              "type": "attribute",
              "value": "bookingId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "userId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "eventId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "ticketCount",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "bookingDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "method",
              "value": "makeBooking()",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Booking"
                }
              ],
              "label": "makes",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "System integrates with payment gateway to process ticket payments securely and confirm booking.",
    "PlantUML": "class Payment {\n  - paymentId: String\n  - bookingId: String\n  - amount: double\n  - status: String\n  + processPayment(): boolean\n}\nBooking \"1\" -- \"1\" Payment : paid",
    "Model": "V7",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Payment",
          "children": [
            {
              "type": "attribute",
              "value": "paymentId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "bookingId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "amount",
              "visibility": "-",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "processPayment()",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        },
        {
          "type": "class",
          "value": "Booking",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Payment"
                }
              ],
              "label": "paid",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Each booking results in the creation of one e-ticket, which includes a QR code and is sent to the user.",
    "PlantUML": "class ETicket {\n  - ticketId: String\n  - bookingId: String\n  - qrCode: String\n  + generateTicket(): void\n  + sendToEmail(): void\n}\nBooking \"1\" -- \"1\" Eticket",
    "Model": "V7",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ETicket",
          "children": [
            {
              "type": "attribute",
              "value": "ticketId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "bookingId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "qrCode",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "generateTicket()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "sendToEmail()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Booking",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Eticket"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Eticket",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Users can search for events using keywords and apply filters based on category, date, or location.",
    "PlantUML": "class EventSearch {\n  + searchByKeyword(keyword: String): List<Event>\n  + filterByDate(date: Date): List<Event>\n  + filterByLocation(location: String): List<Event>\n}\n",
    "Model": "V7",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "EventSearch",
          "children": [
            {
              "type": "method",
              "value": "searchByKeyword(keyword: String)",
              "visibility": "+",
              "data_type": "List<Event>"
            },
            {
              "type": "method",
              "value": "filterByDate(date: Date)",
              "visibility": "+",
              "data_type": "List<Event>"
            },
            {
              "type": "method",
              "value": "filterByLocation(location: String)",
              "visibility": "+",
              "data_type": "List<Event>"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Admin can manage users, view system reports, and remove inappropriate events or block users.",
    "PlantUML": "class Admin {\n  - adminId: String\n  - name: String\n  + manageUsers(): void\n  + moderateEvents(): void\n  + viewReports(): void\n}\nAdmin \"1\" -- \"*\" User : manages\nAdmin \"1\" -- \"*\" Event : moderates",
    "Model": "V7",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Admin",
          "children": [
            {
              "type": "attribute",
              "value": "adminId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "manageUsers()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "moderateEvents()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "viewReports()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "manages",
              "multiplicity1": "1",
              "multiplicity2": "*"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Event"
                }
              ],
              "label": "moderates",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        },
        {
          "type": "class",
          "value": "Event",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Users receive email/SMS notifications for booking confirmations, cancellations, and event updates.",
    "PlantUML": "class Notification {\n  - notificationId: String\n  - userId: String\n  - message: String\n  + sendEmail(): void\n  + sendSMS(): void\n}\nUser \"1\" -- \"0..*\" Notification",
    "Model": "V7",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Notification",
          "children": [
            {
              "type": "attribute",
              "value": "notificationId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "userId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "message",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "sendEmail()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "sendSMS()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Notification"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Each event can define available seats and manage seat availability during bookings.",
    "PlantUML": "class Seat {\n  - seatId: String\n  - eventId: String\n  - isAvailable: boolean\n  + reserveSeat(): boolean\n  + releaseSeat(): void\n}\n",
    "Model": "V7",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Seat",
          "children": [
            {
              "type": "attribute",
              "value": "seatId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "eventId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "isAvailable",
              "visibility": "-",
              "data_type": "boolean"
            },
            {
              "type": "method",
              "value": "reserveSeat()",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "method",
              "value": "releaseSeat()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Users can cancel bookings within a defined window, and the system processes refund if applicable.",
    "PlantUML": "class Cancellation {\n  - cancellationId: String\n  - bookingId: String\n  - refundAmount: double\n  + cancelBooking(): boolean\n  + processRefund(): boolean\n}\n",
    "Model": "V7",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Cancellation",
          "children": [
            {
              "type": "attribute",
              "value": "cancellationId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "bookingId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "refundAmount",
              "visibility": "-",
              "data_type": "double"
            },
            {
              "type": "method",
              "value": "cancelBooking()",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "method",
              "value": "processRefund()",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Event organizers manage events. An organizer is a special type of user with event creation privileges.",
    "PlantUML": "class Organizer {\n  + createEvent(): void\n  + updateEvent(): void\n  + deleteEvent(): void\n}\n\nOrganizer \"1\" -- \"0..*\" Event : organizes\nOrganizer --|> User",
    "Model": "V7",
    "RequirementIndex": "10",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Organizer",
          "children": [
            {
              "type": "method",
              "value": "createEvent()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "updateEvent()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "deleteEvent()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Event"
                }
              ],
              "label": "organizes",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            },
            {
              "type": "relation",
              "value": "--|>",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Event",
          "children": []
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Users can book one or more tickets for an event.",
    "PlantUML": "Booking \"1\" -- \"1\" Event",
    "Model": "V7",
    "RequirementIndex": "11",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Booking",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Event"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Event",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The  virtual classroom platform must allow users (students and teachers) to register, log in, and manage their profiles securely. Authentication includes password encryption and role-based access.",
    "PlantUML": "class User {\n  -id: String\n  -username: String\n  -password: String\n  -email: String\n  -role: UserRole\n  +login(): boolean\n  +logout(): void\n}",
    "Model": "V8",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "username",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "role",
              "visibility": "-",
              "data_type": "UserRole"
            },
            {
              "type": "method",
              "value": "login()",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "method",
              "value": "logout()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Students and teachers should have extended profiles with specific attributes like enrolled courses for students and created courses for teachers.",
    "PlantUML": "class Student {\n  -enrolledCourses: List<Course>\n}\n\nclass Teacher {\n  -teachingCourses: List<Course>\n}\n\nUser <|-- Student\nUser <|-- Teacher\n",
    "Model": "V8",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Student",
          "children": [
            {
              "type": "attribute",
              "value": "enrolledCourses",
              "visibility": "-",
              "data_type": "List<Course>"
            }
          ]
        },
        {
          "type": "class",
          "value": "Teacher",
          "children": [
            {
              "type": "attribute",
              "value": "teachingCourses",
              "visibility": "-",
              "data_type": "List<Course>"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Student"
                }
              ]
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Teacher"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Teachers can create, edit, and delete courses. Each course contains a title, description, and list of enrolled students.",
    "PlantUML": "class Course {\n  -courseId: String\n  -title: String\n  -description: String\n  -teacher: Teacher\n  -students: List<Student>\n  +addStudent(s: Student): void\n}\n\nTeacher \"1\" -- \"0..*\" Course : creates \nStudent \"0..*\" -- \"0..*\" Course : enrolls \n",
    "Model": "V8",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Course",
          "children": [
            {
              "type": "attribute",
              "value": "courseId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "teacher",
              "visibility": "-",
              "data_type": "Teacher"
            },
            {
              "type": "attribute",
              "value": "students",
              "visibility": "-",
              "data_type": "List<Student>"
            },
            {
              "type": "method",
              "value": "addStudent(s: Student)",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Teacher",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Course"
                }
              ],
              "label": "creates",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Student",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Course"
                }
              ],
              "label": "enrolls",
              "multiplicity1": "0..*",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Teachers can schedule live sessions. Each session has a start time, duration, and associated course.",
    "PlantUML": "class VirtualSession {\n  -sessionId: String\n  -startTime: DateTime\n  -durationMinutes: int\n  -course: Course\n  +join(): void\n}\n\nCourse \"1\" -- \"0..*\" VirtualSession : contains ",
    "Model": "V8",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "VirtualSession",
          "children": [
            {
              "type": "attribute",
              "value": "sessionId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "startTime",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "durationMinutes",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "course",
              "visibility": "-",
              "data_type": "Course"
            },
            {
              "type": "method",
              "value": "join()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Course",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "VirtualSession"
                }
              ],
              "label": "contains",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Teachers can upload assignments and set deadlines. Students can submit their work before deadlines.",
    "PlantUML": "class Assignment {\n  -assignmentId: String\n  -title: String\n  -description: String\n  -deadline: DateTime\n  -course: Course\n}\n\nclass Submission {\n  -submissionId: String\n  -student: Student\n  -fileLink: String\n  -submittedAt: DateTime\n}\n\nAssignment \"1\" -- \"0..*\" Submission : receives \nStudent \"1\" -- \"0..*\" Submission : submits \nCourse \"1\" -- \"0..*\" Assignment : assigns \n",
    "Model": "V8",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Assignment",
          "children": [
            {
              "type": "attribute",
              "value": "assignmentId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "deadline",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "course",
              "visibility": "-",
              "data_type": "Course"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Submission"
                }
              ],
              "label": "receives",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Submission",
          "children": [
            {
              "type": "attribute",
              "value": "submissionId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "student",
              "visibility": "-",
              "data_type": "Student"
            },
            {
              "type": "attribute",
              "value": "fileLink",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "submittedAt",
              "visibility": "-",
              "data_type": "DateTime"
            }
          ]
        },
        {
          "type": "class",
          "value": "Student",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Submission"
                }
              ],
              "label": "submits",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Course",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Assignment"
                }
              ],
              "label": "assigns",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Real-time communication between students and teachers should be available per session or course.",
    "PlantUML": "class Message {\n  -messageId: String\n  -sender: User\n  -content: String\n  -timestamp: DateTime\n}\n\nclass ChatRoom {\n  -roomId: String\n  -participants: List<User>\n  -messages: List<Message>\n}\n\nChatRoom \"1\" -- \"0..*\" Message : contains \nUser \"0..*\" -- \"0..*\" ChatRoom : participates \n",
    "Model": "V8",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Message",
          "children": [
            {
              "type": "attribute",
              "value": "messageId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "sender",
              "visibility": "-",
              "data_type": "User"
            },
            {
              "type": "attribute",
              "value": "content",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "-",
              "data_type": "DateTime"
            }
          ]
        },
        {
          "type": "class",
          "value": "ChatRoom",
          "children": [
            {
              "type": "attribute",
              "value": "roomId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "participants",
              "visibility": "-",
              "data_type": "List<User>"
            },
            {
              "type": "attribute",
              "value": "messages",
              "visibility": "-",
              "data_type": "List<Message>"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Message"
                }
              ],
              "label": "contains",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "ChatRoom"
                }
              ],
              "label": "participates",
              "multiplicity1": "0..*",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Teachers should be able to upload materials to their courses, accessible by enrolled students.",
    "PlantUML": "class Material {\n  -materialId: String\n  -title: String\n  -type: MaterialType\n  -linkOrFile: String\n}\n\nCourse \"1\" -- \"0..*\" Material : provides \n",
    "Model": "V8",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Material",
          "children": [
            {
              "type": "attribute",
              "value": "materialId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "type",
              "visibility": "-",
              "data_type": "MaterialType"
            },
            {
              "type": "attribute",
              "value": "linkOrFile",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Course",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Material"
                }
              ],
              "label": "provides",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Teachers can grade students’ submissions, and grades are stored for viewing and analytics.",
    "PlantUML": "class Grade {\n  -gradeId: String\n  -score: float\n  -feedback: String\n  -submission: Submission\n}\n\nSubmission \"1\" -- \"0..1\" Grade : evaluatedBy ",
    "Model": "V8",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Grade",
          "children": [
            {
              "type": "attribute",
              "value": "gradeId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "score",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "attribute",
              "value": "feedback",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "submission",
              "visibility": "-",
              "data_type": "Submission"
            }
          ]
        },
        {
          "type": "class",
          "value": "Submission",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Grade"
                }
              ],
              "label": "evaluatedBy",
              "multiplicity1": "1",
              "multiplicity2": "0..1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system should notify users of upcoming sessions, assignment deadlines, or messages.",
    "PlantUML": "class Notification {\n  -notificationId: String\n  -content: String\n  -timestamp: DateTime\n  -user: User\n  -isRead: boolean\n}\n\nUser \"1\" -- \"0..*\" Notification : receives",
    "Model": "V8",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Notification",
          "children": [
            {
              "type": "attribute",
              "value": "notificationId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "content",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "user",
              "visibility": "-",
              "data_type": "User"
            },
            {
              "type": "attribute",
              "value": "isRead",
              "visibility": "-",
              "data_type": "boolean"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Notification"
                }
              ],
              "label": "receives",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Attendance must be tracked automatically for each virtual session a student joins.",
    "PlantUML": "class Attendance {\n  -attendanceId: String\n  -student: Student\n  -session: VirtualSession\n  -status: AttendanceStatus\n}\n\nStudent \"1\" -- \"0..*\" Attendance : has >\nVirtualSession \"1\" -- \"0..*\" Attendance : records >\n",
    "Model": "V8",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Attendance",
          "children": [
            {
              "type": "attribute",
              "value": "attendanceId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "student",
              "visibility": "-",
              "data_type": "Student"
            },
            {
              "type": "attribute",
              "value": "session",
              "visibility": "-",
              "data_type": "VirtualSession"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "AttendanceStatus"
            }
          ]
        },
        {
          "type": "class",
          "value": "Student",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Attendance"
                }
              ],
              "label": "has >",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "VirtualSession",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Attendance"
                }
              ],
              "label": "records >",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Clinic Appointment & Prescription System shall support users such as patients, doctors, and admins, each with specific attributes and roles. Each user must be able to log in and manage their profile.",
    "PlantUML": "class User {\n  -userID: String\n  -name: String\n  -email: String\n  -password: String\n  +login(): void\n  +updateProfile(): void\n}\n\nUser <|-- Patient\nUser <|-- Doctor\nUser <|-- Admin\n\n",
    "Model": "V9",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "login()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "updateProfile()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Patient"
                }
              ]
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Doctor"
                }
              ]
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Admin"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Patient",
          "children": []
        },
        {
          "type": "class",
          "value": "Doctor",
          "children": []
        },
        {
          "type": "class",
          "value": "Admin",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Doctors must have a profile including specialization, available timings, and credentials for patients to view and book appointments.",
    "PlantUML": "class DoctorProfile {\n  -specialization: String\n  -availability: String\n  -experienceYears: int\n  +updateAvailability(): void\n}\n\nDoctor o-- DoctorProfile\n",
    "Model": "V9",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "DoctorProfile",
          "children": [
            {
              "type": "attribute",
              "value": "specialization",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "availability",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "experienceYears",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "method",
              "value": "updateAvailability()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Doctor",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "DoctorProfile"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Patients can view available time slots and schedule appointments with doctors. The system prevents overlapping appointments.",
    "PlantUML": "class Appointment {\n  -appointmentID: String\n  -dateTime: DateTime\n  -status: String\n  +book(): void\n  +cancel(): void\n}\n\nPatient --> Appointment\nDoctor --> Appointment\n",
    "Model": "V9",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Appointment",
          "children": [
            {
              "type": "attribute",
              "value": "appointmentID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "dateTime",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "book()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "cancel()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Patient",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Appointment"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Doctor",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Appointment"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Doctors can issue electronic prescriptions linked to appointments. Prescriptions contain medicines, dosage, and notes.\n",
    "PlantUML": "class Prescription {\n  -prescriptionID: String\n  -dateIssued: Date\n  -notes: String\n  +generatePDF(): void\n}\n\nclass Medicine {\n  -name: String\n  -dosage: String\n  -duration: String\n}\n\nPrescription \"1\" --> \"1..*\" Medicine\nAppointment \"1\" --> Prescription\n",
    "Model": "V9",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Prescription",
          "children": [
            {
              "type": "attribute",
              "value": "prescriptionID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "dateIssued",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "notes",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "generatePDF()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Medicine"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "1..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Medicine",
          "children": [
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "dosage",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "duration",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Appointment",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Prescription"
                }
              ],
              "multiplicity1": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system maintains a record of a patient's past appointments and prescriptions for easy reference by doctors.",
    "PlantUML": "class MedicalHistory {\n  -historyID: String\n  +getHistory(): void\n}\n\nPatient --> MedicalHistory\nMedicalHistory \"1\" --> \"0..*\" Appointment\nMedicalHistory \"1\" --> \"0..*\" Prescription\n",
    "Model": "V9",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "MedicalHistory",
          "children": [
            {
              "type": "attribute",
              "value": "historyID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "getHistory()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Appointment"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Prescription"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Patient",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "MedicalHistory"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Appointment",
          "children": []
        },
        {
          "type": "class",
          "value": "Prescription",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The system sends reminders to patients for upcoming appointments and prescription refills via email/SMS.",
    "PlantUML": "class Notification {\n  -notificationID: String\n  -type: String\n  -message: String\n  +send(): void\n}\n\nUser --> \"0..*\" Notification\nAppointment --> Notification : \"Reminder\"\nPrescription --> Notification : \"Refill Alert\"\n",
    "Model": "V9",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Notification",
          "children": [
            {
              "type": "attribute",
              "value": "notificationID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "type",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "message",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "send()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Notification"
                }
              ],
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Appointment",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Notification"
                }
              ],
              "label": "\"Reminder\""
            }
          ]
        },
        {
          "type": "class",
          "value": "Prescription",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Notification"
                }
              ],
              "label": "\"Refill Alert\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Admins can manage users, view reports, and oversee system operations like approving doctor registrations.",
    "PlantUML": "class AdminPanel {\n  +manageUsers(): void\n  +viewReports(): void\n  +approveDoctor(): void\n}\n\nAdmin --> AdminPanel\n",
    "Model": "V9",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AdminPanel",
          "children": [
            {
              "type": "method",
              "value": "manageUsers()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "viewReports()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "approveDoctor()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Admin",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "AdminPanel"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Each completed appointment generates an invoice including consultation charges and medicine costs.",
    "PlantUML": "class Invoice {\n  -invoiceID: String\n  -amount: Float\n  -dateIssued: Date\n  +generateInvoice(): void\n}\n\nAppointment --> Invoice\nPrescription --> Invoice\nPatient --> Invoice\n",
    "Model": "V9",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Invoice",
          "children": [
            {
              "type": "attribute",
              "value": "invoiceID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "amount",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "attribute",
              "value": "dateIssued",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "method",
              "value": "generateInvoice()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Appointment",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Invoice"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Prescription",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Invoice"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Patient",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Invoice"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Patients can search for doctors by name, specialization, and availability.",
    "PlantUML": "class SearchEngine {\n  +searchByName(name: String): List<Doctor>\n  +searchBySpecialization(spec: String): List<Doctor>\n  +filterByAvailability(): List<Doctor>\n}\n\nPatient --> SearchEngine\n",
    "Model": "V9",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "SearchEngine",
          "children": [
            {
              "type": "method",
              "value": "searchByName(name: String)",
              "visibility": "+",
              "data_type": "List<Doctor>"
            },
            {
              "type": "method",
              "value": "searchBySpecialization(spec: String)",
              "visibility": "+",
              "data_type": "List<Doctor>"
            },
            {
              "type": "method",
              "value": "filterByAvailability()",
              "visibility": "+",
              "data_type": "List<Doctor>"
            }
          ]
        },
        {
          "type": "class",
          "value": "Patient",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "SearchEngine"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "All critical operations (like appointment creation, prescription edits) are logged for security and auditing purposes.",
    "PlantUML": "class AuditLog {\n  -logID: String\n  -timestamp: DateTime\n  -action: String\n  -performedBy: String\n  +record(): void\n}\n\nUser  \"1\"--> \"0..*\" AuditLog\nAppointment --> AuditLog\nPrescription --> AuditLog\n",
    "Model": "V9",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AuditLog",
          "children": [
            {
              "type": "attribute",
              "value": "logID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "action",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "performedBy",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "record()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "AuditLog"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Appointment",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "AuditLog"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Prescription",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "AuditLog"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The Virtual Reality Content Platform must allow users to register, log in securely, and manage their profiles. Authentication is required for content access and personalization.\n",
    "PlantUML": "class User {\n  +userID: String\n  +username: String\n  +email: String\n  +password: String\n  +login(): boolean\n  +logout(): void\n  +updateProfile(): void\n}",
    "Model": "V10",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "username",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "login()",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "method",
              "value": "logout()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "updateProfile()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Creators can upload 3D/VR content, add metadata, and manage their uploaded content through a dashboard.",
    "PlantUML": "class Content {\n  +contentID: String\n  +title: String\n  +description: String\n  +uploadDate: Date\n  +upload(): void\n  +edit(): void\n  +delete(): void\n}\n\nUser \"1\" -- \"*\" Content : uploads",
    "Model": "V10",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Content",
          "children": [
            {
              "type": "attribute",
              "value": "contentID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "uploadDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "method",
              "value": "upload()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "edit()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "delete()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Content"
                }
              ],
              "label": "uploads",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Users can stream and interact with VR content using a VR-compatible viewer or standard display.",
    "PlantUML": "class VRPlayer {\n  +play(contentID: String): void\n  +pause(): void\n  +stop(): void\n}\n\nContent \"1\" -- \"1\" VRPlayer : \"used by\"",
    "Model": "V10",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "VRPlayer",
          "children": [
            {
              "type": "method",
              "value": "play(contentID: String)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "pause()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "stop()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Content",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "VRPlayer"
                }
              ],
              "label": "\"used by\"",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Users can like, comment, and rate VR content to enhance engagement and improve content recommendations.",
    "PlantUML": "class Feedback {\n  +feedbackID: String\n  +rating: int\n  +comment: String\n  +date: Date\n}\n\nUser \"1\" -- \"*\" Feedback : gives \nContent \"1\" -- \"*\" Feedback : receives ",
    "Model": "V10",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Feedback",
          "children": [
            {
              "type": "attribute",
              "value": "feedbackID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "rating",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "comment",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "date",
              "visibility": "+",
              "data_type": "Date"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Feedback"
                }
              ],
              "label": "gives",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Content",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Feedback"
                }
              ],
              "label": "receives",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Based on user preferences and feedback, the system recommends similar or trending VR content.",
    "PlantUML": "class RecommendationEngine {\n  +generateRecommendations(userID: String): List<Content>\n}\n\nUser \"1\" -- \"1\" RecommendationEngine : \"personalized for\"",
    "Model": "V10",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "RecommendationEngine",
          "children": [
            {
              "type": "method",
              "value": "generateRecommendations(userID: String)",
              "visibility": "+",
              "data_type": "List<Content>"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "RecommendationEngine"
                }
              ],
              "label": "\"personalized for\"",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Each VR content item can be categorized and tagged to enhance searchability and recommendation accuracy.",
    "PlantUML": "class Category {\n  +categoryID: String\n  +name: String\n}\n\nclass Tag {\n  +tagID: String\n  +name: String\n}\n\nContent \"*\" -- \"*\" Category : \"belongs to\"\nContent \"*\" -- \"*\" Tag : \"tagged with\"",
    "Model": "V10",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Category",
          "children": [
            {
              "type": "attribute",
              "value": "categoryID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Tag",
          "children": [
            {
              "type": "attribute",
              "value": "tagID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Content",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Category"
                }
              ],
              "label": "\"belongs to\"",
              "multiplicity1": "*",
              "multiplicity2": "*"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Tag"
                }
              ],
              "label": "\"tagged with\"",
              "multiplicity1": "*",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The platform supports premium subscriptions and revenue sharing for creators through views or purchases.",
    "PlantUML": "class Subscription {\n  +subscriptionID: String\n  +planType: String\n  +startDate: Date\n  +endDate: Date\n}\n\nUser \"1\" -- \"0..1\" Subscription : has\n\nclass Payment {\n  +paymentID: String\n  +amount: double\n  +date: Date\n}\n\nSubscription \"1\" -- \"*\" Payment : generates",
    "Model": "V10",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Subscription",
          "children": [
            {
              "type": "attribute",
              "value": "subscriptionID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "planType",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "startDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "endDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Payment"
                }
              ],
              "label": "generates",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Payment",
          "children": [
            {
              "type": "attribute",
              "value": "paymentID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "amount",
              "visibility": "+",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "date",
              "visibility": "+",
              "data_type": "Date"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Subscription"
                }
              ],
              "label": "has",
              "multiplicity1": "1",
              "multiplicity2": "0..1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Admins can manage users, content, and access analytics for performance and compliance.",
    "PlantUML": "class Admin {\n  +adminID: String\n  +manageUsers(): void\n  +moderateContent(): void\n  +viewAnalytics(): void\n}\n\nAdmin \"1\" -- \"*\" User : manages \nAdmin \"1\" -- \"*\" Content : moderates",
    "Model": "V10",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Admin",
          "children": [
            {
              "type": "attribute",
              "value": "adminID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "manageUsers()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "moderateContent()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "viewAnalytics()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "manages",
              "multiplicity1": "1",
              "multiplicity2": "*"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Content"
                }
              ],
              "label": "moderates",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        },
        {
          "type": "class",
          "value": "Content",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The platform must support different VR headsets and fallback to desktop or mobile view if VR is unavailable.",
    "PlantUML": "class Device {\n  +deviceID: String\n  +type: String\n  +isVRCapable: boolean\n}\n\nUser \"1\" -- \"*\" Device : uses",
    "Model": "V10",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Device",
          "children": [
            {
              "type": "attribute",
              "value": "deviceID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "type",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "isVRCapable",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Device"
                }
              ],
              "label": "uses",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Tracks user viewing sessions for analytics and lets users resume or rewatch content.\n",
    "PlantUML": "class Session {\n  +sessionID: String\n  +startTime: Date\n  +endTime: Date\n  +contentID: String\n}\n\nUser \"1\" -- \"*\" Session : watches\nContent \"1\" -- \"*\" Session : viewed in",
    "Model": "V10",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Session",
          "children": [
            {
              "type": "attribute",
              "value": "sessionID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "startTime",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "endTime",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "contentID",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Session"
                }
              ],
              "label": "watches",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Content",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Session"
                }
              ],
              "label": "viewed in",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The auction system shall allow users to register with an email and password, and log in securely using authentication.",
    "PlantUML": "class User {\n  -userId: String\n  -email: String\n  -password: String\n  +register(): void\n  +login(): boolean\n}\n",
    "Model": "V11",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "register()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "login()",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Users shall be able to search for auctions by keywords and view auction details such as item name, current bid, and end time.",
    "PlantUML": "class Auction {\n  -auctionId: String\n  -itemName: String\n  -currentBid: double\n  -endTime: DateTime\n  +getDetails(): String\n}\n\nUser --> Auction : searches/views\n",
    "Model": "V11",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Auction",
          "children": [
            {
              "type": "attribute",
              "value": "auctionId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "itemName",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "currentBid",
              "visibility": "-",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "endTime",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "method",
              "value": "getDetails()",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Auction"
                }
              ],
              "label": "searches/views"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Users can configure a snipe to automatically place a bid at the last moment before auction ends.",
    "PlantUML": "class Snipe {\n  -snipeId: String\n  -maxBid: double\n  -snipeTime: DateTime\n  +configureSnipe(): void\n}\n\nUser --> Snipe : configures\nSnipe --> Auction : targets\n",
    "Model": "V11",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Snipe",
          "children": [
            {
              "type": "attribute",
              "value": "snipeId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "maxBid",
              "visibility": "-",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "snipeTime",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "method",
              "value": "configureSnipe()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Auction"
                }
              ],
              "label": "targets"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Snipe"
                }
              ],
              "label": "configures"
            }
          ]
        },
        {
          "type": "class",
          "value": "Auction",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The system shall automatically execute a snipe by placing a bid milliseconds before the auction ends.",
    "PlantUML": "class BiddingEngine {\n  +executeSnipe(snipe: Snipe): boolean\n}\n\nBiddingEngine --> Snipe : uses\n",
    "Model": "V11",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "BiddingEngine",
          "children": [
            {
              "type": "method",
              "value": "executeSnipe(snipe: Snipe)",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Snipe"
                }
              ],
              "label": "uses"
            }
          ]
        },
        {
          "type": "class",
          "value": "Snipe",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The system shall monitor auction end-times and notify the Bidding Engine in real-time.",
    "PlantUML": "class AuctionMonitor {\n  +trackAuction(auction: Auction): void\n  +notifyBiddingEngine(): void\n}\n\nAuctionMonitor --> Auction : monitors\nAuctionMonitor --> BiddingEngine : notifies\n",
    "Model": "V11",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AuctionMonitor",
          "children": [
            {
              "type": "method",
              "value": "trackAuction(auction: Auction)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "notifyBiddingEngine()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Auction"
                }
              ],
              "label": "monitors"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "BiddingEngine"
                }
              ],
              "label": "notifies"
            }
          ]
        },
        {
          "type": "class",
          "value": "Auction",
          "children": []
        },
        {
          "type": "class",
          "value": "BiddingEngine",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The system shall maintain a bid history for each user and auction, storing all bids placed.",
    "PlantUML": "class Bid {\n  -bidId: String\n  -amount: double\n  -timestamp: DateTime\n}\n\nUser --> Bid : places\nBid --> Auction : for\n",
    "Model": "V11",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Bid",
          "children": [
            {
              "type": "attribute",
              "value": "bidId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "amount",
              "visibility": "-",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Auction"
                }
              ],
              "label": "for"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Bid"
                }
              ],
              "label": "places"
            }
          ]
        },
        {
          "type": "class",
          "value": "Auction",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Users shall receive email notifications for snipe success, failure, or auction changes.",
    "PlantUML": "class NotificationService {\n  +sendEmail(user: User, message: String): void\n}\n\nNotificationService --> User : notifies\n",
    "Model": "V11",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "NotificationService",
          "children": [
            {
              "type": "method",
              "value": "sendEmail(user: User, message: String)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "notifies"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The system shall synchronize with an NTP server to ensure bid timing accuracy.",
    "PlantUML": "class TimeSyncService {\n  +syncTime(): DateTime\n}\nBiddingEngine --> TimeSyncService : requests accurate time\n",
    "Model": "V11",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "TimeSyncService",
          "children": [
            {
              "type": "method",
              "value": "syncTime()",
              "visibility": "+",
              "data_type": "DateTime"
            }
          ]
        },
        {
          "type": "class",
          "value": "BiddingEngine",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "TimeSyncService"
                }
              ],
              "label": "requests accurate time"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system shall integrate with external auction sites via APIs to fetch auction data.",
    "PlantUML": "class AuctionAPI {\n  +fetchAuctions(): List<Auction>\n  +placeBid(auctionId: String, amount: double): boolean\n}\n\nAuctionAPI <|.. AuctionMonitor\nAuctionAPI <|.. BiddingEngine\n",
    "Model": "V11",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AuctionAPI",
          "children": [
            {
              "type": "method",
              "value": "fetchAuctions()",
              "visibility": "+",
              "data_type": "List<Auction>"
            },
            {
              "type": "method",
              "value": "placeBid(auctionId: String, amount: double)",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "<|..",
              "children": [
                {
                  "type": "class",
                  "value": "AuctionMonitor"
                }
              ]
            },
            {
              "type": "relation",
              "value": "<|..",
              "children": [
                {
                  "type": "class",
                  "value": "BiddingEngine"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "AuctionMonitor",
          "children": []
        },
        {
          "type": "class",
          "value": "BiddingEngine",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Admins can view users, monitor system health, and manually override auction snipes.",
    "PlantUML": "class Admin {\n  -adminId: String\n  +viewUsers(): List<User>\n  +overrideSnipe(snipe: Snipe): void\n}\n\nAdmin --> User : manages\nAdmin --> Snipe : overrides\n",
    "Model": "V11",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Admin",
          "children": [
            {
              "type": "attribute",
              "value": "adminId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "viewUsers()",
              "visibility": "+",
              "data_type": "List<User>"
            },
            {
              "type": "method",
              "value": "overrideSnipe(snipe: Snipe)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "manages"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Snipe"
                }
              ],
              "label": "overrides"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        },
        {
          "type": "class",
          "value": "Snipe",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "In digital signature verification system The system shall allow users to upload a document and its corresponding digital signature file.",
    "PlantUML": "class User {\n  +uploadDocument(doc: Document, signature: Signature): void\n}\nclass Document {\n}\nclass Signature {\n}\n\nUser --> Document\nUser --> Signature\n",
    "Model": "V12",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "method",
              "value": "uploadDocument(doc: Document, signature: Signature)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Document"
                }
              ]
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Signature"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Document",
          "children": []
        },
        {
          "type": "class",
          "value": "Signature",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The system shall validate the digital signature using the public key associated with the user.",
    "PlantUML": "class Validator {\n  +validateSignature(doc: Document, sig: Signature, key: PublicKey): boolean\n}\nclass PublicKey {\n}\n\nValidator --> Document\nValidator --> Signature\nValidator --> PublicKey\n",
    "Model": "V12",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Validator",
          "children": [
            {
              "type": "method",
              "value": "validateSignature(doc: Document, sig: Signature, key: PublicKey)",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Document"
                }
              ]
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Signature"
                }
              ]
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "PublicKey"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "PublicKey",
          "children": []
        },
        {
          "type": "class",
          "value": "Document",
          "children": []
        },
        {
          "type": "class",
          "value": "Signature",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The system shall maintain user credentials and public keys in a secure repository.",
    "PlantUML": "class UserRepository {\n  +getUserCredentials(username: String): Credentials\n  +getPublicKey(userId: String): PublicKey\n}\nclass Credentials{\n}\n\nUser --> UserRepository\nUserRepository --> PublicKey\nUserRepository --> Credentials\n",
    "Model": "V12",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "UserRepository",
          "children": [
            {
              "type": "method",
              "value": "getUserCredentials(username: String)",
              "visibility": "+",
              "data_type": "Credentials"
            },
            {
              "type": "method",
              "value": "getPublicKey(userId: String)",
              "visibility": "+",
              "data_type": "PublicKey"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "PublicKey"
                }
              ]
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Credentials"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Credentials",
          "children": []
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "UserRepository"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "PublicKey",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The system shall display verification results including status, signer identity, and timestamp.",
    "PlantUML": "class VerificationResult {\n  -status: boolean\n  -signer: String\n  -timestamp: DateTime\n  +displayResult(): void\n}\nValidator --> VerificationResult\n",
    "Model": "V12",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "VerificationResult",
          "children": [
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "boolean"
            },
            {
              "type": "attribute",
              "value": "signer",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "method",
              "value": "displayResult()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Validator",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "VerificationResult"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system shall log each verification request for auditing purposes.",
    "PlantUML": "class AuditLogger {\n  +logVerification(userId: String, result: VerificationResult): void\n}\n\nValidator --> AuditLogger\nAuditLogger --> VerificationResult\n",
    "Model": "V12",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AuditLogger",
          "children": [
            {
              "type": "method",
              "value": "logVerification(userId: String, result: VerificationResult)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "VerificationResult"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Validator",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "AuditLogger"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "VerificationResult",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The system shall support importing certificates in X.509 format for signature validation. \n",
    "PlantUML": "class Certificate {\n  -format: String\n  +loadCertificate(path: String): void\n}\nCertificate <|-- X509Certificate\n\nValidator --> Certificate\n",
    "Model": "V12",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Certificate",
          "children": [
            {
              "type": "attribute",
              "value": "format",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "loadCertificate(path: String)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "X509Certificate"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "X509Certificate",
          "children": []
        },
        {
          "type": "class",
          "value": "Validator",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Certificate"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system shall notify users if the signature is invalid or the certificate is expired.",
    "PlantUML": "class NotificationService {\n  +notifyUser(user: User, message: String): void\n}\n\nValidator --> NotificationService\nNotificationService --> User\n",
    "Model": "V12",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "NotificationService",
          "children": [
            {
              "type": "method",
              "value": "notifyUser(user: User, message: String)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Validator",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "NotificationService"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The system shall restrict access to verification features only to authenticated users.",
    "PlantUML": "class AuthService {\n  +authenticate(username: String, password: String): boolean\n}\nUser --> AuthService\n",
    "Model": "V12",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AuthService",
          "children": [
            {
              "type": "method",
              "value": "authenticate(username: String, password: String)",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "AuthService"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system shall parse the uploaded document to extract embedded signature data if applicable.",
    "PlantUML": "class DocumentParser {\n  +extractSignature(doc: Document): Signature\n}\n\nDocumentParser --> Document\nDocumentParser --> Signature\n",
    "Model": "V12",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "DocumentParser",
          "children": [
            {
              "type": "method",
              "value": "extractSignature(doc: Document)",
              "visibility": "+",
              "data_type": "Signature"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Document"
                }
              ]
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Signature"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Document",
          "children": []
        },
        {
          "type": "class",
          "value": "Signature",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The system shall generate verification reports downloadable in PDF format.",
    "PlantUML": "class ReportGenerator {\n  +generatePDF(result: VerificationResult): File\n}\nReportGenerator --> VerificationResult\n",
    "Model": "V12",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ReportGenerator",
          "children": [
            {
              "type": "method",
              "value": "generatePDF(result: VerificationResult)",
              "visibility": "+",
              "data_type": "File"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "VerificationResult"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "VerificationResult",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Email system must allow marketers to create, edit, and delete multiple email campaigns.",
    "PlantUML": "class Campaign {\n  -id: String\n  -name: String\n  -createdDate: Date\n  -status: String\n  +create()\n  +edit()\n  +delete()\n}\n",
    "Model": "V13",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Campaign",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "createdDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "create()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "edit()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "delete()",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Each campaign should contain multiple emails scheduled to be sent at different times.",
    "PlantUML": "class Email {\n  -id: String\n  -subject: String\n  -body: String\n  -sendTime: DateTime\n  +schedule()\n  +edit()\n}\n\nCampaign \"1\" *-- \"0..*\" Email : contains \n",
    "Model": "V13",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Email",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "subject",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "body",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "sendTime",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "method",
              "value": "schedule()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "edit()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Campaign",
          "children": [
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Email"
                }
              ],
              "label": "contains",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Emails must be sent to a specific contact list chosen by the marketer.",
    "PlantUML": "class ContactList {\n  -id: String\n  -name: String\n  +addContact()\n  +removeContact()\n}\n\nEmail \"1\" --> \"1\" ContactList : targets \n",
    "Model": "V13",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ContactList",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "addContact()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "removeContact()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Email",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "ContactList"
                }
              ],
              "label": "targets",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Each contact list consists of many individual contacts with personal details.",
    "PlantUML": "class Contact {\n  -id: String\n  -email: String\n  -firstName: String\n  -lastName: String\n  +updateInfo()\n}\n\nContactList \"1\" *-- \"0..*\" Contact : includes \n",
    "Model": "V13",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Contact",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "firstName",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "lastName",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "updateInfo()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "ContactList",
          "children": [
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Contact"
                }
              ],
              "label": "includes",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system must track email delivery status (sent, failed, opened) for each recipient.\n\n",
    "PlantUML": "class DeliveryStatus {\n  -status: String\n  -timestamp: DateTime\n}\n\nContact \"1\" --> \"0..*\" DeliveryStatus : has \nEmail \"1\" --> \"0..*\" DeliveryStatus : results in \n",
    "Model": "V13",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "DeliveryStatus",
          "children": [
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "-",
              "data_type": "DateTime"
            }
          ]
        },
        {
          "type": "class",
          "value": "Contact",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "DeliveryStatus"
                }
              ],
              "label": "has",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Email",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "DeliveryStatus"
                }
              ],
              "label": "results in",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Users should be able to segment contacts based on filters like location or activity.",
    "PlantUML": "class Segment {\n  -id: String\n  -criteria: String\n  +applyFilter()\n}\n\nSegment \"1\" --> \"0..*\" Contact : filters \n",
    "Model": "V13",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Segment",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "criteria",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "applyFilter()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Contact"
                }
              ],
              "label": "filters",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Contact",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The system must allow scheduling campaigns with start and end dates.",
    "PlantUML": "Campaign --> Email : schedules \nCampaign --> Segment : targets ",
    "Model": "V13",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Campaign",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Email"
                }
              ],
              "label": "schedules"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Segment"
                }
              ],
              "label": "targets"
            }
          ]
        },
        {
          "type": "class",
          "value": "Email",
          "children": []
        },
        {
          "type": "class",
          "value": "Segment",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The system must support user authentication and different roles (e.g., admin, marketer).",
    "PlantUML": "class User {\n  -id: String\n  -username: String\n  -role: String\n  +login()\n  +logout()\n}\n\nUser \"0..*\" --> \"0..*\" Campaign : manages\n",
    "Model": "V13",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "username",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "role",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "login()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "logout()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Campaign"
                }
              ],
              "label": "manages",
              "multiplicity1": "0..*",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Campaign",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Campaign performance metrics (open rate, click rate) should be stored and viewable.",
    "PlantUML": "class CampaignMetrics {\n  -openRate: Float\n  -clickRate: Float\n  +calculate()\n}\n\nCampaign \"1\" --> \"1\" CampaignMetrics : generates ",
    "Model": "V13",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "CampaignMetrics",
          "children": [
            {
              "type": "attribute",
              "value": "openRate",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "attribute",
              "value": "clickRate",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "method",
              "value": "calculate()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Campaign",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "CampaignMetrics"
                }
              ],
              "label": "generates",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "system administrators must be able to audit user actions (e.g., create campaign, send email).",
    "PlantUML": "class AuditLog {\n  -action: String\n  -timestamp: DateTime\n  -userId: String\n}\n\nUser \"1\" --> \"0..*\" AuditLog : logs \n",
    "Model": "V13",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AuditLog",
          "children": [
            {
              "type": "attribute",
              "value": "action",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "userId",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "AuditLog"
                }
              ],
              "label": "logs",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "For a Customer Feedback and Survey Tool allow users to register and authenticate using email and password. Admins and regular users should be distinguishable.",
    "PlantUML": "class User {\n  +userId: String\n  +email: String\n  +password: String\n  +role: String\n}\n\nclass AuthService {\n  +registerUser(email, password)\n  +authenticateUser(email, password)\n}\n\nUser --> AuthService : uses\n",
    "Model": "V14",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "role",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "AuthService"
                }
              ],
              "label": "uses"
            }
          ]
        },
        {
          "type": "class",
          "value": "AuthService",
          "children": [
            {
              "type": "method",
              "value": "registerUser(email, password)",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "authenticateUser(email, password)",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Users can create surveys by adding a title, description, and selecting question types (MCQ, text, rating).",
    "PlantUML": "class Survey {\n  +surveyId: String\n  +title: String\n  +description: String\n  +createdDate: Date\n}\n\nclass Question {\n  +questionId: String\n  +text: String\n  +type: String\n}\n\nSurvey \"1\" *-- \"*\" Question : contains\nUser \"1\" --> \"*\" Survey : creates\n",
    "Model": "V14",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Survey",
          "children": [
            {
              "type": "attribute",
              "value": "surveyId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "createdDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Question"
                }
              ],
              "label": "contains",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Question",
          "children": [
            {
              "type": "attribute",
              "value": "questionId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "text",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "type",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Survey"
                }
              ],
              "label": "creates",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Surveys can be scheduled for a future date and shared via link or email with target respondents.",
    "PlantUML": "class Scheduler {\n  +scheduleSurvey(surveyId, dateTime)\n}\n\nclass Distribution {\n  +sendLink(surveyId)\n  +sendEmail(surveyId, recipients)\n}\n\nSurvey --> Scheduler : \"scheduled by\"\nSurvey --> Distribution : \"distributed via\"\n",
    "Model": "V14",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Scheduler",
          "children": [
            {
              "type": "method",
              "value": "scheduleSurvey(surveyId, dateTime)",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Distribution",
          "children": [
            {
              "type": "method",
              "value": "sendLink(surveyId)",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "sendEmail(surveyId, recipients)",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Survey",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Scheduler"
                }
              ],
              "label": "\"scheduled by\""
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Distribution"
                }
              ],
              "label": "\"distributed via\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Respondents can submit feedback by answering survey questions without needing to log in.",
    "PlantUML": "class Response {\n  +responseId: String\n  +submittedAt: Date\n}\n\nclass Answer {\n  +answerId: String\n  +value: String\n}\n\nResponse \"1\" *-- \"*\" Answer : contains\nQuestion \"1\" <-- \"*\" Answer : \"answered by\"\nSurvey \"1\" <-- \"*\" Response : receives\n",
    "Model": "V14",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Response",
          "children": [
            {
              "type": "attribute",
              "value": "responseId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "submittedAt",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Answer"
                }
              ],
              "label": "contains",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Answer",
          "children": [
            {
              "type": "attribute",
              "value": "answerId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "value",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Question",
          "children": [
            {
              "type": "relation",
              "value": "<--",
              "children": [
                {
                  "type": "class",
                  "value": "Answer"
                }
              ],
              "label": "\"answered by\"",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Survey",
          "children": [
            {
              "type": "relation",
              "value": "<--",
              "children": [
                {
                  "type": "class",
                  "value": "Response"
                }
              ],
              "label": "receives",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Admins can view aggregated statistics such as average ratings, response rates, and charts.\n\n",
    "PlantUML": "class AnalysisService {\n  +generateStats(surveyId)\n  +generateCharts(surveyId)\n}\n\nSurvey --> AnalysisService : analyzed by\n",
    "Model": "V14",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AnalysisService",
          "children": [
            {
              "type": "method",
              "value": "generateStats(surveyId)",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "generateCharts(surveyId)",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Survey",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "AnalysisService"
                }
              ],
              "label": "analyzed by"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Users can export results as CSV or PDF reports for offline analysis or presentation.",
    "PlantUML": "class ExportService {\n  +exportToCSV(surveyId)\n  +exportToPDF(surveyId)\n}\n\nSurvey --> ExportService : exported by\n",
    "Model": "V14",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ExportService",
          "children": [
            {
              "type": "method",
              "value": "exportToCSV(surveyId)",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "exportToPDF(surveyId)",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Survey",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "ExportService"
                }
              ],
              "label": "exported by"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system provides a dashboard showing surveys created, participation rates, and overall feedback scores.",
    "PlantUML": "class Dashboard {\n  +showUserSurveys(userId)\n  +showMetrics(surveyId)\n}\n\nUser --> Dashboard : views\nDashboard --> Survey : shows summary\nDashboard --> AnalysisService : \"uses data\"\n",
    "Model": "V14",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Dashboard",
          "children": [
            {
              "type": "method",
              "value": "showUserSurveys(userId)",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "showMetrics(surveyId)",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Survey"
                }
              ],
              "label": "shows summary"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "AnalysisService"
                }
              ],
              "label": "\"uses data\""
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Dashboard"
                }
              ],
              "label": "views"
            }
          ]
        },
        {
          "type": "class",
          "value": "Survey",
          "children": []
        },
        {
          "type": "class",
          "value": "AnalysisService",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Users get notified about new responses, survey completion, or issues in scheduling.",
    "PlantUML": "class NotificationService {\n  +notifyNewResponse(surveyId)\n  +notifyCompletion(surveyId)\n  +notifyError(errorMsg)\n}\n\nUser --> NotificationService : receives\nSurvey --> NotificationService : triggers\n",
    "Model": "V14",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "NotificationService",
          "children": [
            {
              "type": "method",
              "value": "notifyNewResponse(surveyId)",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "notifyCompletion(surveyId)",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "notifyError(errorMsg)",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "NotificationService"
                }
              ],
              "label": "receives"
            }
          ]
        },
        {
          "type": "class",
          "value": "Survey",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "NotificationService"
                }
              ],
              "label": "triggers"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Only authorized users can edit, view, or delete surveys depending on roles (admin, creator).",
    "PlantUML": "class Permission {\n  +canEdit: Boolean\n  +canView: Boolean\n  +canDelete: Boolean\n}\n\nUser --> Permission : has\nPermission --> Survey : \"applies to\"\n",
    "Model": "V14",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Permission",
          "children": [
            {
              "type": "attribute",
              "value": "canEdit",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "attribute",
              "value": "canView",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "attribute",
              "value": "canDelete",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Survey"
                }
              ],
              "label": "\"applies to\""
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Permission"
                }
              ],
              "label": "has"
            }
          ]
        },
        {
          "type": "class",
          "value": "Survey",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Survey creators can enable anonymous feedback where user identity is hidden.",
    "PlantUML": "Survey {\n  +isAnonymous: Boolean\n}\n\nResponse {\n  +respondentId: String\n}\nSurvey --> Response : collects\n",
    "Model": "V14",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Survey",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Response"
                }
              ],
              "label": "collects"
            }
          ]
        },
        {
          "type": "class",
          "value": "Response",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "In Freelance Marketplace Platform Users must be able to register as either freelancers or clients and log into the system securely.",
    "PlantUML": "class User {\n  -id: int\n  -username: string\n  -email: string\n  -password: string\n}\n\nclass Freelancer{\n}\n\nclass Client{\n}\n\nUser <|-- Freelancer\nUser <|-- Client\n\n",
    "Model": "V15",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "username",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Freelancer"
                }
              ]
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Client"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Freelancer",
          "children": []
        },
        {
          "type": "class",
          "value": "Client",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Users can manage their profiles including bio, profile photo, and contact information.",
    "PlantUML": "User \"1\" o-- \"1\" Profile\n\nclass Profile {\n  -bio: string\n  -profilePhoto: string\n  -contactInfo: string\n}\n",
    "Model": "V15",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Profile",
          "children": [
            {
              "type": "attribute",
              "value": "bio",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "profilePhoto",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "contactInfo",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "Profile"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Clients can post new job listings with details such as description, budget, and deadline.",
    "PlantUML": "Client \"1\" o-- \"0..*\" Job\n\nclass Job {\n  -jobId: int\n  -title: string\n  -description: string\n  -budget: float\n  -deadline: Date\n}\n",
    "Model": "V15",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Job",
          "children": [
            {
              "type": "attribute",
              "value": "jobId",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "budget",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "attribute",
              "value": "deadline",
              "visibility": "-",
              "data_type": "Date"
            }
          ]
        },
        {
          "type": "class",
          "value": "Client",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "Job"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Freelancers can browse and filter job listings by category, budget, and date.\n",
    "PlantUML": "Freelancer \"1\" --> \"0..*\" Job : browse\n",
    "Model": "V15",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Freelancer",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Job"
                }
              ],
              "label": "browse",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Job",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Freelancers can submit proposals to job posts including their offer and timeline.",
    "PlantUML": "Freelancer \"1\" o-- \"0..*\" Proposal\nJob \"1\" o-- \"0..*\" Proposal\n\nclass Proposal {\n  -proposalId: int\n  -description: string\n  -proposedAmount: float\n  -timeline: string\n}\n",
    "Model": "V15",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Proposal",
          "children": [
            {
              "type": "attribute",
              "value": "proposalId",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "proposedAmount",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "attribute",
              "value": "timeline",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Freelancer",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "Proposal"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Job",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "Proposal"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Clients can review proposals and assign a job to one freelancer.",
    "PlantUML": "Job \"1\" --> \"1\" Proposal : accepted\nProposal --> Freelancer\n",
    "Model": "V15",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Job",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Proposal"
                }
              ],
              "label": "accepted",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Proposal",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Freelancer"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Freelancer",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Freelancers and clients can communicate via a built-in messaging system.",
    "PlantUML": "User \"1\" o-- \"0..*\" Message\n\nclass Message {\n  -messageId: int\n  -senderId: int\n  -receiverId: int\n  -content: string\n  -timestamp: Date\n}\n",
    "Model": "V15",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Message",
          "children": [
            {
              "type": "attribute",
              "value": "messageId",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "senderId",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "receiverId",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "content",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "-",
              "data_type": "Date"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "Message"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Freelancers submit completed work; clients review and approve or request changes.",
    "PlantUML": "Job \"1\" o-- \"0..1\" Submission\n\nclass Submission {\n  -submissionId: int\n  -contentURL: string\n  -submittedAt: Date\n  -status: string\n}\n",
    "Model": "V15",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Submission",
          "children": [
            {
              "type": "attribute",
              "value": "submissionId",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "contentURL",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "submittedAt",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Job",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "Submission"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The platform holds payments in escrow and releases them upon job approval.",
    "PlantUML": "Job \"1\" o-- \"1\" Escrow\n\nclass Escrow {\n  -escrowId: int\n  -amount: float\n  -status: string\n  -releasedAt: Date\n}\n",
    "Model": "V15",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Escrow",
          "children": [
            {
              "type": "attribute",
              "value": "escrowId",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "amount",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "releasedAt",
              "visibility": "-",
              "data_type": "Date"
            }
          ]
        },
        {
          "type": "class",
          "value": "Job",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "Escrow"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "After completion, both freelancers and clients can leave reviews and ratings.",
    "PlantUML": "User \"1\" o-- \"0..*\" Review\n\nclass Review {\n  -reviewId: int\n  -rating: int\n  -comment: string\n  -reviewedUserId: int\n}\n",
    "Model": "V15",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Review",
          "children": [
            {
              "type": "attribute",
              "value": "reviewId",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "rating",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "comment",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "reviewedUserId",
              "visibility": "-",
              "data_type": "int"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "Review"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Jobs and freelancers are tagged with categories and skills for better matching.",
    "PlantUML": "Job \"0..*\" o-- \"0..*\" Category\nFreelancer \"0..*\" o-- \"0..*\" Skill\n\nclass Category {\n  -categoryId: int\n  -name: string\n}\n\nclass Skill {\n  -skillId: int\n  -name: string\n}\n",
    "Model": "V15",
    "RequirementIndex": "10",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Category",
          "children": [
            {
              "type": "attribute",
              "value": "categoryId",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Skill",
          "children": [
            {
              "type": "attribute",
              "value": "skillId",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Job",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "Category"
                }
              ],
              "multiplicity1": "0..*",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Freelancer",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "Skill"
                }
              ],
              "multiplicity1": "0..*",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Each chatbot project has a unique name and is associated with multiple chatbot modules.",
    "PlantUML": "class ChatbotProject {\n  - projectId: String\n  - name: String\n  - createdDate: Date\n}\nChatbotProject \"1\" *-- \"*\" ChatbotModule\n",
    "Model": "V16",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ChatbotProject",
          "children": [
            {
              "type": "attribute",
              "value": "projectId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "createdDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "ChatbotModule"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "ChatbotModule",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Modules logically group functionalities and can be reused across multiple projects.",
    "PlantUML": "class ChatbotModule {\n  - moduleId: String\n  - moduleName: String\n}\nChatbotModule \"1\" *-- \"*\" Intent\nChatbotModule \"1\" *-- \"*\" Entity\nChatbotModule \"1\" *-- \"*\" DialogFlow\n",
    "Model": "V16",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ChatbotModule",
          "children": [
            {
              "type": "attribute",
              "value": "moduleId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "moduleName",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Intent"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "*"
            },
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Entity"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "*"
            },
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "DialogFlow"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Intent",
          "children": []
        },
        {
          "type": "class",
          "value": "Entity",
          "children": []
        },
        {
          "type": "class",
          "value": "DialogFlow",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Each intent is linked to one or more responses and a set of training phrases.",
    "PlantUML": "class Intent {\n  - intentId: String\n  - name: String\n}\nIntent \"1\" *-- \"*\" TrainingPhrase\nIntent \"1\" *-- \"*\" Response\n",
    "Model": "V16",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Intent",
          "children": [
            {
              "type": "attribute",
              "value": "intentId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "TrainingPhrase"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "*"
            },
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Response"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "TrainingPhrase",
          "children": []
        },
        {
          "type": "class",
          "value": "Response",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Each phrase belongs to exactly one intent.",
    "PlantUML": "class TrainingPhrase {\n  - phraseId: String\n  - text: String\n}\n",
    "Model": "V16",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "TrainingPhrase",
          "children": [
            {
              "type": "attribute",
              "value": "phraseId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "text",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "A response can include text, images, or structured cards.",
    "PlantUML": "class Response {\n  - responseId: String\n  - contentType: String\n  - content: String\n}\n",
    "Model": "V16",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Response",
          "children": [
            {
              "type": "attribute",
              "value": "responseId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "contentType",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "content",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Entities include a name, type, and sample values.",
    "PlantUML": "class Entity {\n  - entityId: String\n  - name: String\n  - type: String\n}\nEntity \"1\" *-- \"*\" EntityValue\n",
    "Model": "V16",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Entity",
          "children": [
            {
              "type": "attribute",
              "value": "entityId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "type",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "EntityValue"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "EntityValue",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Each value belongs to a specific entity.",
    "PlantUML": "class EntityValue {\n  - valueId: String\n  - value: String\n}\n",
    "Model": "V16",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "EntityValue",
          "children": [
            {
              "type": "attribute",
              "value": "valueId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "value",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "It models transitions between steps based on user input or context.",
    "PlantUML": "class DialogFlow {\n  - flowId: String\n  - name: String\n}\nDialogFlow \"1\" *-- \"*\" DialogNode\n",
    "Model": "V16",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "DialogFlow",
          "children": [
            {
              "type": "attribute",
              "value": "flowId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "DialogNode"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "DialogNode",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Nodes can have conditions, actions, and links to other nodes.",
    "PlantUML": "class DialogNode {\n  - nodeId: String\n  - prompt: String\n  - condition: String\n}\nDialogNode \"1\" --> \"*\" DialogNode : next\n",
    "Model": "V16",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "DialogNode",
          "children": [
            {
              "type": "attribute",
              "value": "nodeId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "prompt",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "condition",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "DialogNode"
                }
              ],
              "label": "next",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Users can be developers, testers, or admins with different access levels.",
    "PlantUML": "class User {\n  - userId: String\n  - username: String\n  - role: String\n}\nUser \"1\" *-- \"*\" ChatbotProject\n",
    "Model": "V16",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "username",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "role",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "ChatbotProject"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "ChatbotProject",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Logs store user messages, matched intents, and response timestamps.",
    "PlantUML": "class InteractionLog {\n  - logId: String\n  - timestamp: Date\n  - userMessage: String\n  - matchedIntent: String\n}\nChatbotProject \"1\" *-- \"*\" InteractionLog\n",
    "Model": "V16",
    "RequirementIndex": "10",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "InteractionLog",
          "children": [
            {
              "type": "attribute",
              "value": "logId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "userMessage",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "matchedIntent",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "ChatbotProject",
          "children": [
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "InteractionLog"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "In Language Learning Platform, the system must allow users to register, log in, and manage their profile securely using email and password.",
    "PlantUML": "class User {\n  -userId: String\n  -email: String\n  -password: String\n  -name: String\n  -role: UserRole\n  +register(): void\n  +login(): void\n  +logout(): void\n}",
    "Model": "V17",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "role",
              "visibility": "-",
              "data_type": "UserRole"
            },
            {
              "type": "method",
              "value": "register()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "login()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "logout()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Teachers can create, update, and delete language courses, including metadata like title, level, and description.",
    "PlantUML": "class Course {\n  -courseId: String\n  -title: String\n  -description: String\n  -level: String\n  +createCourse(): void\n  +updateCourse(): void\n  +deleteCourse(): void\n}\nUser \"1\" -- \"0..*\" Course : creates ",
    "Model": "V17",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Course",
          "children": [
            {
              "type": "attribute",
              "value": "courseId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "level",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "createCourse()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "updateCourse()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "deleteCourse()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Course"
                }
              ],
              "label": "creates",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Each course consists of multiple structured lessons with content, media, and quizzes.",
    "PlantUML": "class Lesson {\n  -lessonId: String\n  -title: String\n  -content: String\n  -videoUrl: String\n  +viewLesson(): void\n}\nCourse \"1\" *-- \"0..*\" Lesson : contains ",
    "Model": "V17",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Lesson",
          "children": [
            {
              "type": "attribute",
              "value": "lessonId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "content",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "videoUrl",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "viewLesson()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Course",
          "children": [
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Lesson"
                }
              ],
              "label": "contains",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Lessons may contain interactive quizzes for learners to practice and test their knowledge.",
    "PlantUML": "class Quiz {\n  -quizId: String\n  -question: String\n  -options: List<String>\n  -correctAnswer: String\n  +submitAnswer(): bool\n}\nLesson \"1\" *-- \"0..*\" Quiz : includes ",
    "Model": "V17",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Quiz",
          "children": [
            {
              "type": "attribute",
              "value": "quizId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "question",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "options",
              "visibility": "-",
              "data_type": "List<String>"
            },
            {
              "type": "attribute",
              "value": "correctAnswer",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "submitAnswer()",
              "visibility": "+",
              "data_type": "bool"
            }
          ]
        },
        {
          "type": "class",
          "value": "Lesson",
          "children": [
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Quiz"
                }
              ],
              "label": "includes",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system should track student progress by logging completed lessons and scores on quizzes.",
    "PlantUML": "class Progress {\n  -progressId: String\n  -userId: String\n  -lessonId: String\n  -completionStatus: bool\n  -score: float\n  +updateProgress(): void\n}\nUser \"1\" -- \"0..*\" Progress\nLesson \"1\" -- \"0..*\" Progress\n",
    "Model": "V17",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Progress",
          "children": [
            {
              "type": "attribute",
              "value": "progressId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "userId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "lessonId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "completionStatus",
              "visibility": "-",
              "data_type": "bool"
            },
            {
              "type": "attribute",
              "value": "score",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "method",
              "value": "updateProgress()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Progress"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Lesson",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Progress"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Teachers can schedule live classes, and students can view and join them.",
    "PlantUML": "class LiveClass {\n  -classId: String\n  -schedule: DateTime\n  -meetingLink: String\n  +joinClass(): void\n}\nUser \"1\" -- \"0..*\" LiveClass : teaches \nLiveClass \"1\" -- \"0..*\" User : attends ",
    "Model": "V17",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "LiveClass",
          "children": [
            {
              "type": "attribute",
              "value": "classId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "schedule",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "meetingLink",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "joinClass()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "attends",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "LiveClass"
                }
              ],
              "label": "teaches",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The platform should generate completion certificates for students who finish all lessons in a course.",
    "PlantUML": "class Certificate {\n  -certificateId: String\n  -issueDate: Date\n  -courseTitle: String\n  +download(): PDF\n}\nUser \"1\" -- \"0..*\" Certificate\nCourse \"1\" -- \"0..*\" Certificate\n",
    "Model": "V17",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Certificate",
          "children": [
            {
              "type": "attribute",
              "value": "certificateId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "issueDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "courseTitle",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "download()",
              "visibility": "+",
              "data_type": "PDF"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Certificate"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Course",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Certificate"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Students can leave feedback and rate courses after completion.",
    "PlantUML": "class Feedback {\n  -feedbackId: String\n  -rating: int\n  -comments: String\n  +submit(): void\n}\nUser \"1\" -- \"0..*\" Feedback\nCourse \"1\" -- \"0..*\" Feedback\n",
    "Model": "V17",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Feedback",
          "children": [
            {
              "type": "attribute",
              "value": "feedbackId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "rating",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "comments",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "submit()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Feedback"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Course",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Feedback"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Admins can manage users, monitor activity, and remove inappropriate content.",
    "PlantUML": "class AdminTools {\n  +banUser(userId: String): void\n  +removeCourse(courseId: String): void\n  +viewReports(): void\n}\nUser <|-- Admin\nAdmin \"1\" -- \"1\" AdminTools\n",
    "Model": "V17",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AdminTools",
          "children": [
            {
              "type": "method",
              "value": "banUser(userId: String)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "removeCourse(courseId: String)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "viewReports()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Admin"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Admin",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "AdminTools"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The platform interface and course materials should support multiple languages.\n",
    "PlantUML": "class Language {\n  -languageCode: String\n  -name: String\n}\nCourse \"1\" -- \"1\" Language\nLesson \"1\" -- \"1\" Language\n",
    "Model": "V17",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Language",
          "children": [
            {
              "type": "attribute",
              "value": "languageCode",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Course",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Language"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Lesson",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Language"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Job Interview Scheduling system should manage multiple job applicants with personal details like name, email, phone number, and resume.",
    "PlantUML": "class Applicant {\n  -name: String\n  -email: String\n  -phone: String\n  -resume: File\n}\n",
    "Model": "V18",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Applicant",
          "children": [
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "phone",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "resume",
              "visibility": "-",
              "data_type": "File"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Applicants should be able to apply for one or more job positions.",
    "PlantUML": "class JobPosition {\n  -title: String\n  -description: String\n  -requirements: String\n}\n\nApplicant \"1\" --> \"*\" JobPosition : appliesTo\n",
    "Model": "V18",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "JobPosition",
          "children": [
            {
              "type": "attribute",
              "value": "title",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "requirements",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Applicant",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "JobPosition"
                }
              ],
              "label": "appliesTo",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Each job position can have multiple interview rounds (e.g., HR, Technical, Managerial).",
    "PlantUML": "class InterviewRound {\n  -type: String\n  -scheduledDate: DateTime\n  -status: String\n}\n\nJobPosition \"1\" --> \"*\" InterviewRound : hasRound\n",
    "Model": "V18",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "InterviewRound",
          "children": [
            {
              "type": "attribute",
              "value": "type",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "scheduledDate",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "JobPosition",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "InterviewRound"
                }
              ],
              "label": "hasRound",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Each interview round should be assigned to one or more interviewers.",
    "PlantUML": "class Interviewer {\n  -name: String\n  -department: String\n  -email: String\n}\n\nInterviewRound \"*\" --> \"*\" Interviewer : conductedBy\n",
    "Model": "V18",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Interviewer",
          "children": [
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "department",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "InterviewRound",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Interviewer"
                }
              ],
              "label": "conductedBy",
              "multiplicity1": "*",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system should store interview schedules with applicant, round, and timing details.",
    "PlantUML": "class InterviewSchedule {\n  -dateTime: DateTime\n  -location: String\n  -status: String\n}\n\nApplicant \"1\" --> \"*\" InterviewSchedule : scheduledFor\nInterviewRound \"1\" --> \"*\" InterviewSchedule : scheduledAs\n",
    "Model": "V18",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "InterviewSchedule",
          "children": [
            {
              "type": "attribute",
              "value": "dateTime",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "location",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Applicant",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "InterviewSchedule"
                }
              ],
              "label": "scheduledFor",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "InterviewRound",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "InterviewSchedule"
                }
              ],
              "label": "scheduledAs",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Each interviewer should submit an evaluation for the applicant after the interview.",
    "PlantUML": "class Evaluation {\n  -score: Float\n  -comments: String\n  -recommendation: String\n}\n\nInterviewSchedule \"1\" --> \"*\" Evaluation : resultsIn\nInterviewer \"1\" --> \"*\" Evaluation : submits\n",
    "Model": "V18",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Evaluation",
          "children": [
            {
              "type": "attribute",
              "value": "score",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "attribute",
              "value": "comments",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "recommendation",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "InterviewSchedule",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Evaluation"
                }
              ],
              "label": "resultsIn",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Interviewer",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Evaluation"
                }
              ],
              "label": "submits",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system should generate a final result for each applicant based on evaluations across rounds.",
    "PlantUML": "class FinalResult {\n  -overallScore: Float\n  -decision: String\n}\n\nApplicant \"1\" --> \"1\" FinalResult : hasResult\n",
    "Model": "V18",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "FinalResult",
          "children": [
            {
              "type": "attribute",
              "value": "overallScore",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "attribute",
              "value": "decision",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Applicant",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "FinalResult"
                }
              ],
              "label": "hasResult",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Admin users should be able to create job positions, assign interviewers, and oversee scheduling.",
    "PlantUML": "class Admin {\n  -username: String\n  -password: String\n  -role: String\n}\n\nAdmin \"1\" --> \"*\" JobPosition : manages\nAdmin \"1\" --> \"*\" InterviewSchedule : oversees\n",
    "Model": "V18",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Admin",
          "children": [
            {
              "type": "attribute",
              "value": "username",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "role",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "JobPosition"
                }
              ],
              "label": "manages",
              "multiplicity1": "1",
              "multiplicity2": "*"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "InterviewSchedule"
                }
              ],
              "label": "oversees",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "JobPosition",
          "children": []
        },
        {
          "type": "class",
          "value": "InterviewSchedule",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Notifications (email or system) should be sent to applicants and interviewers upon scheduling.",
    "PlantUML": "class Notification {\n  -message: String\n  -recipient: String\n  -sentAt: DateTime\n}\n\nInterviewSchedule \"1\" --> \"*\" Notification : triggers\n",
    "Model": "V18",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Notification",
          "children": [
            {
              "type": "attribute",
              "value": "message",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "recipient",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "sentAt",
              "visibility": "-",
              "data_type": "DateTime"
            }
          ]
        },
        {
          "type": "class",
          "value": "InterviewSchedule",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Notification"
                }
              ],
              "label": "triggers",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The Health Tracker App allow each user to register and log in securely using email and password.",
    "PlantUML": "class User {\n  - userId: String\n  - name: String\n  - email: String\n  - password: String\n  + register()\n  + login()\n}\n",
    "Model": "V19",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "register()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "login()",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Each user should be able to log daily health metrics such as weight, sleep hours, steps walked, and calories consumed.",
    "PlantUML": "class HealthMetric {\n  - metricId: String\n  - date: Date\n  - weight: Float\n  - sleepHours: Float\n  - steps: Int\n  - calories: Int\n  + addEntry()\n  + updateEntry()\n}\n\nUser \"1\" o-- \"*\" HealthMetric : logs\n",
    "Model": "V19",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "HealthMetric",
          "children": [
            {
              "type": "attribute",
              "value": "metricId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "date",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "weight",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "attribute",
              "value": "sleepHours",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "attribute",
              "value": "steps",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "calories",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "method",
              "value": "addEntry()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "updateEntry()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "HealthMetric"
                }
              ],
              "label": "logs",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": " The system should allow users to set personal health goals such as daily step count or target weight.",
    "PlantUML": "class HealthGoal {\n  - goalId: String\n  - goalType: String\n  - targetValue: Float\n  - startDate: Date\n  - endDate: Date\n  + createGoal()\n  + updateGoal()\n}\n\nUser \"1\" o-- \"*\" HealthGoal : sets\n",
    "Model": "V19",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "HealthGoal",
          "children": [
            {
              "type": "attribute",
              "value": "goalId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "goalType",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "targetValue",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "attribute",
              "value": "startDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "endDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "method",
              "value": "createGoal()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "updateGoal()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "HealthGoal"
                }
              ],
              "label": "sets",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Users should be able to track their water intake by logging the number of glasses of water consumed each day.",
    "PlantUML": "class WaterIntake {\n  - intakeId: String\n  - date: Date\n  - glasses: Int\n  + logIntake()\n  + updateIntake()\n}\n\nUser \"1\" o-- \"*\" WaterIntake : tracks\n",
    "Model": "V19",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "WaterIntake",
          "children": [
            {
              "type": "attribute",
              "value": "intakeId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "date",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "glasses",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "method",
              "value": "logIntake()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "updateIntake()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "WaterIntake"
                }
              ],
              "label": "tracks",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The app should provide weekly and monthly health progress summaries in the form of reports.",
    "PlantUML": "class HealthReport {\n  - reportId: String\n  - generatedDate: Date\n  - reportType: String\n  + generateSummary()\n}\n\nUser \"1\" o-- \"*\" HealthReport : receives\nHealthReport ..> HealthMetric : aggregates\nHealthReport ..> HealthGoal : compares with\n",
    "Model": "V19",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "HealthReport",
          "children": [
            {
              "type": "attribute",
              "value": "reportId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "generatedDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "reportType",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "generateSummary()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "..>",
              "children": [
                {
                  "type": "class",
                  "value": "HealthMetric"
                }
              ],
              "label": "aggregates"
            },
            {
              "type": "relation",
              "value": "..>",
              "children": [
                {
                  "type": "class",
                  "value": "HealthGoal"
                }
              ],
              "label": "compares with"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "HealthReport"
                }
              ],
              "label": "receives",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "HealthMetric",
          "children": []
        },
        {
          "type": "class",
          "value": "HealthGoal",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Users can set reminders for activities such as drinking water, taking medicine, or doing workouts.",
    "PlantUML": "class Reminder {\n  - reminderId: String\n  - type: String\n  - message: String\n  - time: DateTime\n  + schedule()\n  + cancel()\n}\n\nUser \"1\" o-- \"*\" Reminder : sets\n",
    "Model": "V19",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Reminder",
          "children": [
            {
              "type": "attribute",
              "value": "reminderId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "type",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "message",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "time",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "method",
              "value": "schedule()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "cancel()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "Reminder"
                }
              ],
              "label": "sets",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The app should notify users when a health goal is achieved or when they miss a daily target.",
    "PlantUML": "class Notification {\n  - notificationId: String\n  - message: String\n  - dateTime: DateTime\n  + send()\n}\n\nUser \"1\" o-- \"*\" Notification : receives\nNotification ..> HealthGoal : refers to\n",
    "Model": "V19",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Notification",
          "children": [
            {
              "type": "attribute",
              "value": "notificationId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "message",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "dateTime",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "method",
              "value": "send()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "..>",
              "children": [
                {
                  "type": "class",
                  "value": "HealthGoal"
                }
              ],
              "label": "refers to"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "Notification"
                }
              ],
              "label": "receives",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "HealthGoal",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The system should support syncing with wearable devices to automatically fetch step count and sleep data.",
    "PlantUML": "class WearableDevice {\n  - deviceId: String\n  - deviceType: String\n  - lastSyncTime: DateTime\n  + syncData()\n}\n\nUser \"1\" o-- \"*\" WearableDevice : connects\nWearableDevice --> HealthMetric : updates\n",
    "Model": "V19",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "WearableDevice",
          "children": [
            {
              "type": "attribute",
              "value": "deviceId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "deviceType",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "lastSyncTime",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "method",
              "value": "syncData()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "HealthMetric"
                }
              ],
              "label": "updates"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "WearableDevice"
                }
              ],
              "label": "connects",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "HealthMetric",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": " Admin users should be able to view system analytics and manage user accounts.",
    "PlantUML": "class AdminUser {\n  - adminId: String\n  - name: String\n  - email: String\n  + viewAnalytics()\n  + manageUsers()\n}\n\nAdminUser --|> User\n",
    "Model": "V19",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AdminUser",
          "children": [
            {
              "type": "attribute",
              "value": "adminId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "viewAnalytics()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "manageUsers()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "--|>",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Resume Builder System is a web-based application that allow users to register with a unique email and password.",
    "PlantUML": "class User {\n  -userID: String\n  -email: String\n  -password: String\n  +register(): void\n  +login(): boolean\n}\n",
    "Model": "V20",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "register()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "login()",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Each user can create multiple resumes and manage them (add, update, delete).\n",
    "PlantUML": "class Resume {\n  -resumeID: String\n  -title: String\n  -creationDate: Date\n  +create(): void\n  +update(): void\n  +delete(): void\n}\n\nUser \"1\" -- \"*\" Resume : owns \n",
    "Model": "V20",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Resume",
          "children": [
            {
              "type": "attribute",
              "value": "resumeID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "creationDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "method",
              "value": "create()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "update()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "delete()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Resume"
                }
              ],
              "label": "owns",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Each resume consists of multiple sections like personal info, education, experience, skills, etc.",
    "PlantUML": "class Section {\n  -sectionID: String\n  -type: String\n  -content: String\n  +edit(): void\n}\n\nResume \"1\" -- \"*\" Section : contains \n",
    "Model": "V20",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Section",
          "children": [
            {
              "type": "attribute",
              "value": "sectionID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "type",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "content",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "edit()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Resume",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Section"
                }
              ],
              "label": "contains",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Personal Info section should include name, phone number, address, and a profile summary.",
    "PlantUML": "class PersonalInfo {\n  -name: String\n  -phone: String\n  -address: String\n  -summary: String\n}\n\nSection <|-- PersonalInfo\n",
    "Model": "V20",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "PersonalInfo",
          "children": [
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "phone",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "address",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "summary",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Section",
          "children": [
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "PersonalInfo"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Education section should allow multiple entries with degree, institution, start and end dates.",
    "PlantUML": "class Education {\n  -degree: String\n  -institution: String\n  -startDate: Date\n  -endDate: Date\n}\n\nSection <|-- Education\n",
    "Model": "V20",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Education",
          "children": [
            {
              "type": "attribute",
              "value": "degree",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "institution",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "startDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "endDate",
              "visibility": "-",
              "data_type": "Date"
            }
          ]
        },
        {
          "type": "class",
          "value": "Section",
          "children": [
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Education"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Experience section should include job title, company, responsibilities, and duration.",
    "PlantUML": "class Experience {\n  -jobTitle: String\n  -company: String\n  -responsibilities: String\n  -startDate: Date\n  -endDate: Date\n}\n\nSection <|-- Experience\n",
    "Model": "V20",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Experience",
          "children": [
            {
              "type": "attribute",
              "value": "jobTitle",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "company",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "responsibilities",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "startDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "endDate",
              "visibility": "-",
              "data_type": "Date"
            }
          ]
        },
        {
          "type": "class",
          "value": "Section",
          "children": [
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Experience"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Skills section should store a list of technical and soft skills.",
    "PlantUML": "class Skill {\n  -name: String\n  -type: String  \n}\n\nSection <|-- Skill\n",
    "Model": "V20",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Skill",
          "children": [
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "type",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Section",
          "children": [
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Skill"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The user should be able to preview and download the resume in PDF format.",
    "PlantUML": "class PDFExporter {\n  +export(resume: Resume): File\n}\n\nResume --> PDFExporter : uses\n",
    "Model": "V20",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "PDFExporter",
          "children": [
            {
              "type": "method",
              "value": "export(resume: Resume)",
              "visibility": "+",
              "data_type": "File"
            }
          ]
        },
        {
          "type": "class",
          "value": "Resume",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "PDFExporter"
                }
              ],
              "label": "uses"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system should allow resume templates to format the output design.",
    "PlantUML": "class Template {\n  -templateID: String\n  -name: String\n  -layout: String\n  +apply(): void\n}\n\nResume --> Template :  uses\n",
    "Model": "V20",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Template",
          "children": [
            {
              "type": "attribute",
              "value": "templateID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "layout",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "apply()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Resume",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Template"
                }
              ],
              "label": "uses"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Admins should be able to manage available templates",
    "PlantUML": "class Admin {\n  -adminID: String\n  -username: String\n  -password: String\n  +manageTemplates(): void\n}\n\nAdmin \"1\" -- \"*\" Template : manages \n",
    "Model": "V20",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Admin",
          "children": [
            {
              "type": "attribute",
              "value": "adminID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "username",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "manageTemplates()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Template"
                }
              ],
              "label": "manages",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Template",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Users should be able to set one resume as default for quick sharing or download.",
    "PlantUML": "class Resume { \n+isDefault: boolean\n}\n\nUser --> Resume : has default",
    "Model": "V20",
    "RequirementIndex": "10",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Resume",
          "children": [
            {
              "type": "attribute",
              "value": "isDefault",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Resume"
                }
              ],
              "label": "has default"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": " Each section in a resume must maintain its order of appearance.",
    "PlantUML": "class Section { \n+order: int \n}\n\nResume --> Section : ordered\n",
    "Model": "V20",
    "RequirementIndex": "11",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Section",
          "children": [
            {
              "type": "attribute",
              "value": "order",
              "visibility": "+",
              "data_type": "int"
            }
          ]
        },
        {
          "type": "class",
          "value": "Resume",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Section"
                }
              ],
              "label": "ordered"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Users must be able to register as students or tutors and securely log in using email/password.",
    "PlantUML": "class User {\n  -userID: String\n  -email: String\n  -password: String\n  +register(): void\n  +login(): boolean\n}\n\nclass Student {\n}\nclass Tutor{\n}\n\nUser <|-- Student\nUser <|-- Tutor",
    "Model": "V21",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "register()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "login()",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Student"
                }
              ]
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Tutor"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Student",
          "children": []
        },
        {
          "type": "class",
          "value": "Tutor",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Tutors can update their profile, including bio, subjects, and availability.",
    "PlantUML": "class TutorProfile {\n  -bio: String\n  -subjects: List<String>\n  -availability: Schedule\n  +updateProfile(): void\n}\n\nTutor \"1\" -- \"1\" TutorProfile\n",
    "Model": "V21",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "TutorProfile",
          "children": [
            {
              "type": "attribute",
              "value": "bio",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "subjects",
              "visibility": "-",
              "data_type": "List<String>"
            },
            {
              "type": "attribute",
              "value": "availability",
              "visibility": "-",
              "data_type": "Schedule"
            },
            {
              "type": "method",
              "value": "updateProfile()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Tutor",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "TutorProfile"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Students can view and update their personal information and learning preferences.",
    "PlantUML": "class StudentProfile {\n  -learningGoals: String\n  -preferredSubjects: List<String>\n  +editProfile(): void\n}\n\nStudent \"1\" -- \"1\" StudentProfile",
    "Model": "V21",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "StudentProfile",
          "children": [
            {
              "type": "attribute",
              "value": "learningGoals",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "preferredSubjects",
              "visibility": "-",
              "data_type": "List<String>"
            },
            {
              "type": "method",
              "value": "editProfile()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Student",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "StudentProfile"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Students can search for tutors by subject, availability, and rating.",
    "PlantUML": "class Student {\n+search()\n}\n\nclass SearchService {\n  +searchTutors(criteria: Map): List<Tutor>\n}",
    "Model": "V21",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Student",
          "children": [
            {
              "type": "method",
              "value": "search()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "SearchService",
          "children": [
            {
              "type": "method",
              "value": "searchTutors(criteria: Map)",
              "visibility": "+",
              "data_type": "List<Tutor>"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Students can book tutoring sessions based on tutor availability.",
    "PlantUML": "class Session {\n  -sessionID: String\n  -dateTime: DateTime\n  -status: String\n  +bookSession(): boolean\n}\n\nStudent \"1\" -- \"0..*\" Session\nTutor \"1\" -- \"0..*\" Session",
    "Model": "V21",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Session",
          "children": [
            {
              "type": "attribute",
              "value": "sessionID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "dateTime",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "bookSession()",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        },
        {
          "type": "class",
          "value": "Student",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Session"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Tutor",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Session"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Tutors and students can view upcoming and past sessions in calendar format.",
    "PlantUML": "class Calendar {\n  -sessions: List<Session>\n  +viewSchedule(): List<Session>\n}\n\nUser \"1\" -- \"1\" Calendar",
    "Model": "V21",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Calendar",
          "children": [
            {
              "type": "attribute",
              "value": "sessions",
              "visibility": "-",
              "data_type": "List<Session>"
            },
            {
              "type": "method",
              "value": "viewSchedule()",
              "visibility": "+",
              "data_type": "List<Session>"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Calendar"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "System sends reminders for upcoming sessions and booking confirmations.",
    "PlantUML": "class Notification {\n  -message: String\n  -timestamp: DateTime\n  +send(): void\n}\n\nUser \"1\" -- \"0..*\" Notification",
    "Model": "V21",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Notification",
          "children": [
            {
              "type": "attribute",
              "value": "message",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "method",
              "value": "send()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Notification"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "After sessions, students can rate tutors and leave feedback.",
    "PlantUML": "class Review {\n  -rating: int\n  -comment: String\n  -date: Date\n}\n\nStudent \"1\" -- \"0..*\" Review\nTutor \"1\" -- \"0..*\" Review",
    "Model": "V21",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Review",
          "children": [
            {
              "type": "attribute",
              "value": "rating",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "comment",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "date",
              "visibility": "-",
              "data_type": "Date"
            }
          ]
        },
        {
          "type": "class",
          "value": "Student",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Review"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Tutor",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Review"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Admins can manage users, sessions, and reported content.",
    "PlantUML": "class Admin {\n  -adminID: String\n  +manageUsers(): void\n  +moderateContent(): void\n}",
    "Model": "V21",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Admin",
          "children": [
            {
              "type": "attribute",
              "value": "adminID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "manageUsers()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "moderateContent()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Students must pay for sessions; the system manages tutor payments.",
    "PlantUML": "class Payment {\n  -paymentID: String\n  -amount: Double\n  -status: String\n  +process(): boolean\n}\n\nStudent \"1\" -- \"0..*\" Payment\nTutor \"1\" -- \"0..*\" Payment\nSession \"1\" -- \"1\" Payment",
    "Model": "V21",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Payment",
          "children": [
            {
              "type": "attribute",
              "value": "paymentID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "amount",
              "visibility": "-",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "process()",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        },
        {
          "type": "class",
          "value": "Student",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Payment"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Tutor",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Payment"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Session",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Payment"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "News platform shall allow users to register and log in using email and password. User data must be securely stored.",
    "PlantUML": "class User {\n  +userId: String\n  +email: String\n  +passwordHash: String\n  +register()\n  +login()\n}\n",
    "Model": "V22",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "passwordHash",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "register()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "login()",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Users can update their profile including name, preferences, and subscription status.",
    "PlantUML": "\nclass Profile {\n  +fullName: String\n  +preferences: List<String>\n  +isSubscribed: Boolean\n  +updateProfile()\n}\nUser --> Profile",
    "Model": "V22",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Profile",
          "children": [
            {
              "type": "attribute",
              "value": "fullName",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "preferences",
              "visibility": "+",
              "data_type": "List<String>"
            },
            {
              "type": "attribute",
              "value": "isSubscribed",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "method",
              "value": "updateProfile()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Profile"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "All users can browse and view headlines. Only subscribed users can read full articles.",
    "PlantUML": "class NewsArticle {\n  +articleId: String\n  +title: String\n  +content: String\n  +publishedDate: Date\n  +getSummary()\n  +getFullContent()\n}\n\nUser --> NewsArticle : views\n",
    "Model": "V22",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "NewsArticle",
          "children": [
            {
              "type": "attribute",
              "value": "articleId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "content",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "publishedDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "method",
              "value": "getSummary()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "getFullContent()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "NewsArticle"
                }
              ],
              "label": "views"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Users can subscribe or cancel plans. The system tracks start and end dates.",
    "PlantUML": "class Subscription {\n  +planType: String\n  +startDate: Date\n  +endDate: Date\n  +cancel()\n  +renew()\n}\nUser --> Subscription : owns",
    "Model": "V22",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Subscription",
          "children": [
            {
              "type": "attribute",
              "value": "planType",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "startDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "endDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "method",
              "value": "cancel()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "renew()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Subscription"
                }
              ],
              "label": "owns"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Subscription payments are processed using third-party payment gateways.\n",
    "PlantUML": "class Payment {\n  +paymentId: String\n  +amount: Double\n  +status: String\n  +processPayment()\n}\n\nSubscription --> Payment",
    "Model": "V22",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Payment",
          "children": [
            {
              "type": "attribute",
              "value": "paymentId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "amount",
              "visibility": "+",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "processPayment()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Subscription",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Payment"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Articles are categorized into topics such as politics, sports, tech, etc.",
    "PlantUML": "class Category {\n  +name: String\n  +description: String\n}\n\nNewsArticle --> Category",
    "Model": "V22",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Category",
          "children": [
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "NewsArticle",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Category"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Admins can create, edit, and delete news articles.",
    "PlantUML": "class Admin {\n  +adminId: String\n  +email: String\n  +manageArticles()\n}\nAdmin --> NewsArticle : manages\n",
    "Model": "V22",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Admin",
          "children": [
            {
              "type": "attribute",
              "value": "adminId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "manageArticles()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "NewsArticle"
                }
              ],
              "label": "manages"
            }
          ]
        },
        {
          "type": "class",
          "value": "NewsArticle",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Subscribed users can post and delete comments under articles.",
    "PlantUML": "class Comment {\n  +commentId: String\n  +content: String\n  +timestamp: Date\n  +delete()\n}\nUser --> Comment : writes\nNewsArticle --> Comment : has",
    "Model": "V22",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Comment",
          "children": [
            {
              "type": "attribute",
              "value": "commentId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "content",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "method",
              "value": "delete()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Comment"
                }
              ],
              "label": "writes"
            }
          ]
        },
        {
          "type": "class",
          "value": "NewsArticle",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Comment"
                }
              ],
              "label": "has"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Users can search articles using keywords or filters.",
    "PlantUML": "class SearchEngine {\n  +search(query: String): List<NewsArticle>\n}\n\nUser --> SearchEngine : uses",
    "Model": "V22",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "SearchEngine",
          "children": [
            {
              "type": "method",
              "value": "search(query: String)",
              "visibility": "+",
              "data_type": "List<NewsArticle>"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "SearchEngine"
                }
              ],
              "label": "uses"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Users receive email notifications for subscriptions, updates, or newsletters.",
    "PlantUML": "class Notification {\n  +notificationId: String\n  +type: String\n  +message: String\n  +send()\n}\n\nUser --> Notification : receives",
    "Model": "V22",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Notification",
          "children": [
            {
              "type": "attribute",
              "value": "notificationId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "type",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "message",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "send()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Notification"
                }
              ],
              "label": "receives"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The Parking Space Finder App helps users locate, reserve for nearby parking spaces by allowing users to register and log in using email and password.",
    "PlantUML": "class User {\n  -userID: String\n  -email: String\n  -password: String\n  +register(): bool\n  +login(): bool\n}\n",
    "Model": "V23",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "register()",
              "visibility": "+",
              "data_type": "bool"
            },
            {
              "type": "method",
              "value": "login()",
              "visibility": "+",
              "data_type": "bool"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system shall enable users to search for nearby parking spaces using location.",
    "PlantUML": "class SearchService {\n  +searchByLocation(location: String): List<ParkingSpace>\n}\n\nUser --> SearchService : uses\n",
    "Model": "V23",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "SearchService",
          "children": [
            {
              "type": "method",
              "value": "searchByLocation(location: String)",
              "visibility": "+",
              "data_type": "List<ParkingSpace>"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "SearchService"
                }
              ],
              "label": "uses"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system shall store and manage parking space data including location, availability, and pricing.",
    "PlantUML": "class ParkingSpace {\n  -spaceID: String\n  -location: String\n  -price: double\n  -isAvailable: bool\n}\n",
    "Model": "V23",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ParkingSpace",
          "children": [
            {
              "type": "attribute",
              "value": "spaceID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "location",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "price",
              "visibility": "-",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "isAvailable",
              "visibility": "-",
              "data_type": "bool"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system shall allow parking space owners to list and update their available spaces.",
    "PlantUML": "class Owner {\n  -ownerID: String\n  -name: String\n  +listSpace(ps: ParkingSpace): void\n  +updateSpace(ps: ParkingSpace): void\n}\n\nOwner --> ParkingSpace : manages\n",
    "Model": "V23",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Owner",
          "children": [
            {
              "type": "attribute",
              "value": "ownerID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "listSpace(ps: ParkingSpace)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "updateSpace(ps: ParkingSpace)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "ParkingSpace"
                }
              ],
              "label": "manages"
            }
          ]
        },
        {
          "type": "class",
          "value": "ParkingSpace",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The system shall enable users to book a parking space for a selected time.",
    "PlantUML": "class Booking {\n  -bookingID: String\n  -startTime: DateTime\n  -endTime: DateTime\n  -status: String\n  +confirmBooking(): bool\n}\n\nUser --> Booking : creates\nBooking --> ParkingSpace : reserves\n",
    "Model": "V23",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Booking",
          "children": [
            {
              "type": "attribute",
              "value": "bookingID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "startTime",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "endTime",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "confirmBooking()",
              "visibility": "+",
              "data_type": "bool"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "ParkingSpace"
                }
              ],
              "label": "reserves"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Booking"
                }
              ],
              "label": "creates"
            }
          ]
        },
        {
          "type": "class",
          "value": "ParkingSpace",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The system shall allow users to make payments for booked spaces.",
    "PlantUML": "class Payment {\n  -paymentID: String\n  -amount: double\n  -method: String\n  +processPayment(): bool\n}\n\nBooking --> Payment : initiates\n",
    "Model": "V23",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Payment",
          "children": [
            {
              "type": "attribute",
              "value": "paymentID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "amount",
              "visibility": "-",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "method",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "processPayment()",
              "visibility": "+",
              "data_type": "bool"
            }
          ]
        },
        {
          "type": "class",
          "value": "Booking",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Payment"
                }
              ],
              "label": "initiates"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system shall notify users with booking confirmation and reminders.",
    "PlantUML": "class Notification {\n  +sendConfirmation(user: User): void\n  +sendReminder(user: User): void\n}\n\nUser --> Notification : receives\n",
    "Model": "V23",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Notification",
          "children": [
            {
              "type": "method",
              "value": "sendConfirmation(user: User)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "sendReminder(user: User)",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Notification"
                }
              ],
              "label": "receives"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system shall store user history of bookings and payments.",
    "PlantUML": "User --> Booking : has\nUser --> Payment : has\n",
    "Model": "V23",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Booking"
                }
              ],
              "label": "has"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Payment"
                }
              ],
              "label": "has"
            }
          ]
        },
        {
          "type": "class",
          "value": "Booking",
          "children": []
        },
        {
          "type": "class",
          "value": "Payment",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The system shall allow admins to monitor overall activity and manage reports.",
    "PlantUML": "class Admin {\n  -adminID: String\n  +viewReports(): Report\n  +manageUsers(): void\n}\n",
    "Model": "V23",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Admin",
          "children": [
            {
              "type": "attribute",
              "value": "adminID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "viewReports()",
              "visibility": "+",
              "data_type": "Report"
            },
            {
              "type": "method",
              "value": "manageUsers()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system shall maintain security with authentication and data encryption.",
    "PlantUML": "class SecurityManager {\n  +authenticate(user: User): bool\n  +encrypt(data: String): String\n}\n\nUser --> SecurityManager : \"authenticated by\"\n",
    "Model": "V23",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "SecurityManager",
          "children": [
            {
              "type": "method",
              "value": "authenticate(user: User)",
              "visibility": "+",
              "data_type": "bool"
            },
            {
              "type": "method",
              "value": "encrypt(data: String)",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "SecurityManager"
                }
              ],
              "label": "\"authenticated by\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The Online Mental Health System provides users with remote access to therapy sessions, assessments, and resource management, allowing them to securely create and update accounts by submitting personal details such as name, email, and contact information.\n",
    "PlantUML": "class User {\n  - userID: String\n  - name: String\n  - email: String\n  - password: String\n  - contactInfo: String\n  + register()\n  + updateProfile()\n}\n",
    "Model": "V24",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "contactInfo",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "register()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "updateProfile()",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system shall maintain detailed therapist profiles including qualifications, specialties, availability, and contact information. Therapists can update their profiles and manage their schedules.",
    "PlantUML": "class Therapist {\n  - therapistID: String\n  - name: String\n  - qualifications: String\n  - specialties: List<String>\n  - availability: Schedule\n  + updateProfile()\n  + manageSchedule()\n}\n\n",
    "Model": "V24",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Therapist",
          "children": [
            {
              "type": "attribute",
              "value": "therapistID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "qualifications",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "specialties",
              "visibility": "-",
              "data_type": "List<String>"
            },
            {
              "type": "attribute",
              "value": "availability",
              "visibility": "-",
              "data_type": "Schedule"
            },
            {
              "type": "method",
              "value": "updateProfile()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "manageSchedule()",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Users must be able to schedule, reschedule, or cancel appointments with therapists based on therapist availability. The system should notify users and therapists of any changes.",
    "PlantUML": "class Appointment {\n  - appointmentID: String\n  - userID: String\n  - therapistID: String\n  - dateTime: DateTime\n  - status: String\n  + schedule()\n  + reschedule()\n  + cancel()\n}\nUser \"1\" -- \"0..*\" Appointment : schedules\nTherapist \"1\" -- \"0..*\" Appointment : receives ",
    "Model": "V24",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Appointment",
          "children": [
            {
              "type": "attribute",
              "value": "appointmentID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "userID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "therapistID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "dateTime",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "schedule()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "reschedule()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "cancel()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Appointment"
                }
              ],
              "label": "schedules",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Therapist",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Appointment"
                }
              ],
              "label": "receives",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system shall support online therapy sessions via video or chat and record session details including duration and notes taken by therapists.",
    "PlantUML": "class TherapySession {\n  - sessionID: String\n  - appointmentID: String\n  - sessionType: String\n  - duration: int\n  - notes: String\n  + startSession()\n  + endSession()\n  + addNotes()\n}\nAppointment \"1\" -- \"1\" TherapySession : generates ",
    "Model": "V24",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "TherapySession",
          "children": [
            {
              "type": "attribute",
              "value": "sessionID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "appointmentID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "sessionType",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "duration",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "notes",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "startSession()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "endSession()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "addNotes()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Appointment",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "TherapySession"
                }
              ],
              "label": "generates",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Users can take standardized mental health assessments. The system records assessment responses and calculates scores to help therapists evaluate user conditions.",
    "PlantUML": "class Assessment {\n  - assessmentID: String\n  - userID: String\n  - questions: List<String>\n  - responses: List<String>\n  - score: float\n  + takeAssessment()\n  + calculateScore()\n}\nUser \"1\" -- \"0..*\" Assessment : takes ",
    "Model": "V24",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Assessment",
          "children": [
            {
              "type": "attribute",
              "value": "assessmentID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "userID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "questions",
              "visibility": "-",
              "data_type": "List<String>"
            },
            {
              "type": "attribute",
              "value": "responses",
              "visibility": "-",
              "data_type": "List<String>"
            },
            {
              "type": "attribute",
              "value": "score",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "method",
              "value": "takeAssessment()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "calculateScore()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Assessment"
                }
              ],
              "label": "takes",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system shall provide a library of mental health resources such as articles, videos, and exercises. Users can browse, search, and bookmark resources.",
    "PlantUML": "class Resource {\n  - resourceID: String\n  - title: String\n  - type: String\n  - contentURL: String\n  + browse()\n  + search()\n  + bookmark()\n}\nResource \"0..*\" -- \"*\" User : \"bookmarked by\"",
    "Model": "V24",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Resource",
          "children": [
            {
              "type": "attribute",
              "value": "resourceID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "type",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "contentURL",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "browse()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "search()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "bookmark()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "\"bookmarked by\"",
              "multiplicity1": "0..*",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The system must send notifications and reminders to users and therapists for upcoming appointments, session feedback requests, or new resources available.",
    "PlantUML": "class Notification {\n  - notificationID: String\n  - recipientID: String\n  - message: String\n  - dateTime: DateTime\n  + send()\n}\nUser \"1\" -- \"0..*\" Notification : receives\nTherapist \"1\" -- \"0..*\" Notification : receives ",
    "Model": "V24",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Notification",
          "children": [
            {
              "type": "attribute",
              "value": "notificationID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "recipientID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "message",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "dateTime",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "method",
              "value": "send()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Notification"
                }
              ],
              "label": "receives",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Therapist",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Notification"
                }
              ],
              "label": "receives",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "A Project Management Tool that helps teams plan, track, and collaborate on tasks, timelines, and resources efficiently, while supporting secure user registration, login, and authentication, as well as role-based access control for Admins, Managers, and Members.",
    "PlantUML": "class User {\n  + id : String\n  + name : String\n  + email : String\n  + password : String\n  + role : Role\n}\n",
    "Model": "V25",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "role",
              "visibility": "+",
              "data_type": "Role"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Managers can create, update, archive, and delete projects, each of which includes essential information such as title, description, status, and deadlines.",
    "PlantUML": "class Project {\n  + id : String\n  + title : String\n  + description : String\n  + startDate : Date\n  + endDate : Date\n  + status : ProjectStatus\n}\n\n\nUser \"1\" --> \"*\" Project : manages",
    "Model": "V25",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Project",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "startDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "endDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "+",
              "data_type": "ProjectStatus"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Project"
                }
              ],
              "label": "manages",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Each project can have multiple tasks with deadlines, priorities, and status tracking, where tasks are assigned to specific users and support comments and attachments for effective collaboration.",
    "PlantUML": "class Task {\n  + id : String\n  + title : String\n  + description : String\n  + priority : Priority\n  + status : TaskStatus\n  + dueDate : Date\n}\n\n\n\nProject \"1\" --> \"*\" Task : contains\nUser \"1\" --> \"*\" Task : assignedTo\n",
    "Model": "V25",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Task",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "priority",
              "visibility": "+",
              "data_type": "Priority"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "+",
              "data_type": "TaskStatus"
            },
            {
              "type": "attribute",
              "value": "dueDate",
              "visibility": "+",
              "data_type": "Date"
            }
          ]
        },
        {
          "type": "class",
          "value": "Project",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Task"
                }
              ],
              "label": "contains",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Task"
                }
              ],
              "label": "assignedTo",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Users can comment on tasks to facilitate discussion and feedback, with each comment storing a timestamp and the author's identity for clear communication tracking.",
    "PlantUML": "class Comment {\n  + id : String\n  + message : String\n  + timestamp : Date\n}\n\n\nTask \"1\" --> \"*\" Comment : has\nUser \"1\" --> \"*\" Comment : authored\n",
    "Model": "V25",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Comment",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "message",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "+",
              "data_type": "Date"
            }
          ]
        },
        {
          "type": "class",
          "value": "Task",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Comment"
                }
              ],
              "label": "has",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Comment"
                }
              ],
              "label": "authored",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Tasks may include file uploads such as documents or screenshots, with each file stored along with metadata including its name, type, and upload time.\n",
    "PlantUML": "class Attachment {\n  + id : String\n  + fileName : String\n  + fileType : String\n  + uploadedAt : Date\n}\n\n\nTask \"1\" --> \"*\" Attachment : includes\n",
    "Model": "V25",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Attachment",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "fileName",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "fileType",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "uploadedAt",
              "visibility": "+",
              "data_type": "Date"
            }
          ]
        },
        {
          "type": "class",
          "value": "Task",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Attachment"
                }
              ],
              "label": "includes",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Each project can have a dedicated team with specific users assigned to it, and Managers have the ability to invite or remove users from the team.",
    "PlantUML": "class Team {\n  + id : String\n  + name : String\n}\n\n\nTeam \"1\" --> \"*\" User : hasMembers\nProject \"1\" --> \"1\" Team : belongsTo\n",
    "Model": "V25",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Team",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "hasMembers",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        },
        {
          "type": "class",
          "value": "Project",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Team"
                }
              ],
              "label": "belongsTo",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Users receive notifications when assigned to tasks, mentioned in comments, or when project status changes, with each notification containing a type, message, and read/unread status.\n",
    "PlantUML": "class Notification {\n  + id : String\n  + message : String\n  + type : NotificationType\n  + isRead : Boolean\n}\n\n\nUser \"1\" --> \"*\" Notification : receives\n",
    "Model": "V25",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Notification",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "message",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "type",
              "visibility": "+",
              "data_type": "NotificationType"
            },
            {
              "type": "attribute",
              "value": "isRead",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Notification"
                }
              ],
              "label": "receives",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Logs record the action type, user, timestamp, and affected object, ensuring that every important action—such as creating or deleting tasks, changing statuses, or assigning users—is tracked for accountability.\n",
    "PlantUML": "class AuditLog {\n  + id : String\n  + action : String\n  + targetId : String\n  + timestamp : Date\n}\n\n\nUser \"1\" --> \"*\" AuditLog : created\n",
    "Model": "V25",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AuditLog",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "action",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "targetId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "+",
              "data_type": "Date"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "AuditLog"
                }
              ],
              "label": "created",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "An Online Appointment Booking System enables users to register with basic credentials, log in, update their profiles, and conveniently schedule, manage, or cancel appointments with service providers through a web-based interface.\n",
    "PlantUML": "class User {\n  -userId: String\n  -username: String\n  -password: String\n  -name: String\n  -email: String\n  -phone: String\n  +register()\n  +login()\n  +logout()\n  +updateProfile()\n}\n",
    "Model": "V26",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "username",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "phone",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "register()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "login()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "logout()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "updateProfile()",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Each user must have a role assigned: either Customer, Admin, or 'ServiceProvider'.\nRoles determine the set of features accessible to a user in the system.",
    "PlantUML": "class Role {\n  -roleId: String\n  -roleName: String\n}\nUser --> Role : has\n",
    "Model": "V26",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Role",
          "children": [
            {
              "type": "attribute",
              "value": "roleId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "roleName",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Role"
                }
              ],
              "label": "has"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Service providers must be able to define their offered services with titles, descriptions, and durations.\nEach service should be linked to one provider and can have many appointments.",
    "PlantUML": "class Service {\n  -serviceId: String\n  -title: String\n  -description: String\n  -durationInMinutes: int\n  +createService()\n  +updateService()\n}\nService --> User : offeredBy\n",
    "Model": "V26",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Service",
          "children": [
            {
              "type": "attribute",
              "value": "serviceId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "durationInMinutes",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "method",
              "value": "createService()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "updateService()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "offeredBy"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Customers must be able to book appointments for available services and time slots, with each appointment containing details such as time, status (pending, confirmed, canceled), and optional notes.\n",
    "PlantUML": "class Appointment {\n  -appointmentId: String\n  -appointmentTime: DateTime\n  -status: String\n  -notes: String\n  +book()\n  +cancel()\n  +updateStatus()\n}\nAppointment --> Service : for\nAppointment --> User : bookedBy\n",
    "Model": "V26",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Appointment",
          "children": [
            {
              "type": "attribute",
              "value": "appointmentId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "appointmentTime",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "notes",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "book()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "cancel()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "updateStatus()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Service"
                }
              ],
              "label": "for"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "bookedBy"
            }
          ]
        },
        {
          "type": "class",
          "value": "Service",
          "children": []
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Service providers can set and update their availability through time slots, each specifying the date, time, and maximum number of appointments.\n",
    "PlantUML": "class TimeSlot {\n  -slotId: String\n  -date: Date\n  -startTime: Time\n  -endTime: Time\n  -maxAppointments: int\n  +setAvailability()\n}\nTimeSlot --> User : belongsTo\nAppointment --> TimeSlot : scheduledIn\n",
    "Model": "V26",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "TimeSlot",
          "children": [
            {
              "type": "attribute",
              "value": "slotId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "date",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "startTime",
              "visibility": "-",
              "data_type": "Time"
            },
            {
              "type": "attribute",
              "value": "endTime",
              "visibility": "-",
              "data_type": "Time"
            },
            {
              "type": "attribute",
              "value": "maxAppointments",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "method",
              "value": "setAvailability()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "belongsTo"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        },
        {
          "type": "class",
          "value": "Appointment",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "TimeSlot"
                }
              ],
              "label": "scheduledIn"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system should notify users via email/SMS upon appointment creation, confirmation, or cancellation.\nNotifications must log time and type.\n",
    "PlantUML": "class Notification {\n  -notificationId: String\n  -message: String\n  -sentTime: DateTime\n  -type: String\n  +send()\n}\nNotification --> User : sentTo\n",
    "Model": "V26",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Notification",
          "children": [
            {
              "type": "attribute",
              "value": "notificationId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "message",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "sentTime",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "type",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "send()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "sentTo"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Customers can leave feedback and ratings after appointments, with each review linked to a specific service and containing a rating score and comment.\n",
    "PlantUML": "class Review {\n  -reviewId: String\n  -rating: int\n  -comment: String\n  +submitReview()\n}\nReview --> Service : for\nReview --> User : by\n",
    "Model": "V26",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Review",
          "children": [
            {
              "type": "attribute",
              "value": "reviewId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "rating",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "comment",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "submitReview()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Service"
                }
              ],
              "label": "for"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "by"
            }
          ]
        },
        {
          "type": "class",
          "value": "Service",
          "children": []
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Admins can view and manage users, services, appointments, and reviews, as well as generate reports on usage statistics.\n",
    "PlantUML": "class AdminDashboard {\n  +viewUsers()\n  +manageServices()\n  +generateReports()\n}\nUser <|-- Admin\n",
    "Model": "V26",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AdminDashboard",
          "children": [
            {
              "type": "method",
              "value": "viewUsers()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "manageServices()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "generateReports()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Admin"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Admin",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "An Electronic Medical Records (EMR) system is designed to digitally collect, manage, and store patients’ medical information and treatment history, while allowing healthcare staff to register new patients with basic details such as name, date of birth, gender, and contact information.\n",
    "PlantUML": "class Patient {\n  + patientID : String;\n  + name : String;\n  + dateOfBirth : Date;\n  + gender : String;\n  + contactInfo : String;\n}\n\n",
    "Model": "V27",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Patient",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Each patient shall have a unique medical record containing past diagnoses, treatments, and doctor notes.",
    "PlantUML": "class MedicalRecord {\n  + recordID : String\n  + patientID : String\n  + createdAt : Date\n  + diagnosis : String\n  + treatment : String\n  + doctorNotes : String\n}\n\nPatient \"1\" -- \"*\" MedicalRecord : has >\n",
    "Model": "V27",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "MedicalRecord",
          "children": [
            {
              "type": "attribute",
              "value": "recordID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "patientID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "createdAt",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "diagnosis",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "treatment",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "doctorNotes",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Patient",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "MedicalRecord"
                }
              ],
              "label": "has >",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Doctors shall be able to access a patient’s medical record and append new notes, diagnoses, or treatment history.",
    "PlantUML": "class Doctor {\n  + doctorID : String\n  + name : String\n  + specialty : String\n}\n\nDoctor \"1\" -- \"*\" MedicalRecord : updates",
    "Model": "V27",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Doctor",
          "children": [
            {
              "type": "attribute",
              "value": "doctorID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "specialty",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "MedicalRecord"
                }
              ],
              "label": "updates",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "MedicalRecord",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The system shall enable patients to schedule appointments with available doctors based on time slots.",
    "PlantUML": "class Appointment {\n  + appointmentID : String\n  + time : DateTime\n  + patientID : String\n  + doctorID : String\n  + status : String\n}\n\nPatient \"1\" -- \"*\" Appointment : books \nDoctor \"1\" -- \"*\" Appointment : attends \n",
    "Model": "V27",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Appointment",
          "children": [
            {
              "type": "attribute",
              "value": "appointmentID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "time",
              "visibility": "+",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "patientID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "doctorID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Patient",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Appointment"
                }
              ],
              "label": "books",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Doctor",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Appointment"
                }
              ],
              "label": "attends",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system shall manage access through roles with defined privileges for admins, doctors, nurses, and receptionists.",
    "PlantUML": "class User {\n  + userID : String\n  + username : String\n  + passwordHash : String\n  + role : UserRole\n}\n\n\n",
    "Model": "V27",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "username",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "passwordHash",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "role",
              "visibility": "+",
              "data_type": "UserRole"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Nurses shall be allowed to enter vital signs such as blood pressure and temperature into patient records.",
    "PlantUML": "class Vitals {\n  + vitalsID : String\n  + patientID : String\n  + measuredAt : Date\n  + bloodPressure : String\n  + temperature : Float\n}\n\nPatient \"1\" -- \"*\" Vitals : has >\nUser \"1\" -- \"*\" Vitals : enteredBy >\n",
    "Model": "V27",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Vitals",
          "children": [
            {
              "type": "attribute",
              "value": "vitalsID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "patientID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "measuredAt",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "bloodPressure",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "temperature",
              "visibility": "+",
              "data_type": "float"
            }
          ]
        },
        {
          "type": "class",
          "value": "Patient",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Vitals"
                }
              ],
              "label": "has >",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Vitals"
                }
              ],
              "label": "enteredBy >",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Doctors shall be able to create and assign prescriptions linked to patient records.",
    "PlantUML": "class Prescription {\n  + prescriptionID : String\n  + medication : String\n  + dosage : String\n  + durationDays : Int\n  + doctorID : String\n  + patientID : String\n}\n\nDoctor \"1\" -- \"*\" Prescription : issues \nPatient \"1\" -- \"*\" Prescription : receives \n",
    "Model": "V27",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Prescription",
          "children": [
            {
              "type": "attribute",
              "value": "prescriptionID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "medication",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "dosage",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "durationDays",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "doctorID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "patientID",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Doctor",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Prescription"
                }
              ],
              "label": "issues",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Patient",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Prescription"
                }
              ],
              "label": "receives",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system shall log all activities (create, update, delete) performed on records with user and timestamp details.",
    "PlantUML": "class AuditLog {\n  + logID : String\n  + userID : String\n  + action : String\n  + targetEntity : String\n  + timestamp : DateTime\n}\n\nUser \"1\" -- \"*\" AuditLog : performs ",
    "Model": "V27",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AuditLog",
          "children": [
            {
              "type": "attribute",
              "value": "logID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "userID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "action",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "targetEntity",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "+",
              "data_type": "DateTime"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "AuditLog"
                }
              ],
              "label": "performs",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Lab results should be uploaded and tied to corresponding medical records.",
    "PlantUML": "class LabResult {\n  + resultID : String\n  + recordID : String\n  + dateOfTest : Date\n  + resultSummary : String\n  + attachedFiles : String\n}\n\nMedicalRecord \"1\" -- \"*\" LabResult : includes \n",
    "Model": "V27",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "LabResult",
          "children": [
            {
              "type": "attribute",
              "value": "resultID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "recordID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "dateOfTest",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "resultSummary",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "attachedFiles",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "MedicalRecord",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "LabResult"
                }
              ],
              "label": "includes",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system shall generate invoices for appointments, prescriptions, and lab tests.",
    "PlantUML": "class Invoice {\n  + invoiceID : String\n  + patientID : String\n  + totalAmount : Float\n  + issuedAt : Date\n  + paymentStatus : String\n}\n\nPatient \"1\" -- \"*\" Invoice : billed ",
    "Model": "V27",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Invoice",
          "children": [
            {
              "type": "attribute",
              "value": "invoiceID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "patientID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "totalAmount",
              "visibility": "+",
              "data_type": "float"
            },
            {
              "type": "attribute",
              "value": "issuedAt",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "paymentStatus",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Patient",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Invoice"
                }
              ],
              "label": "billed",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The Online Examination System enables students to take exams remotely while allowing teachers to create, manage, and evaluate exams electronically, supporting registration and login for multiple user roles—including Students, Teachers, and Administrators—each with a unique profile containing personal details and authentication credentials.\n",
    "PlantUML": "class User {\n  - userID: String\n  - username: String\n  - password: String\n  - email: String\n  + login()\n  + logout()\n}\n\nclass Student {\n  - studentID: String\n  + viewExam()\n  + takeExam()\n}\n\nclass Teacher {\n  - teacherID: String\n  + createExam()\n  + gradeExam()\n}\n\nclass Administrator {\n  + manageUsers()\n  + generateReports()\n}\n\nUser <|-- Student\nUser <|-- Teacher\nUser <|-- Administrator",
    "Model": "V28",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "username",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "login()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "logout()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Student"
                }
              ]
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Teacher"
                }
              ]
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Administrator"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Student",
          "children": [
            {
              "type": "attribute",
              "value": "studentID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "viewExam()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "takeExam()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Teacher",
          "children": [
            {
              "type": "attribute",
              "value": "teacherID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "createExam()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "gradeExam()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Administrator",
          "children": [
            {
              "type": "method",
              "value": "manageUsers()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "generateReports()",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Teachers must be able to create exams with various question types such as multiple-choice, true/false, and descriptive questions. Each exam can have a time limit, total marks, and be associated with specific courses or subjects.",
    "PlantUML": "class Exam {\n  - examID: String\n  - title: String\n  - duration: int\n  - totalMarks: int\n  + addQuestion(Question)\n  + removeQuestion(Question)\n}\n\nclass Question {\n  - questionID: String\n  - questionType: String\n  - text: String\n  - marks: int\n  + display()\n}\n\n\nTeacher \"1\" -- \"0..*\" Exam : creates\nExam \"1\" -- \"0..*\" Question : contains",
    "Model": "V28",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Exam",
          "children": [
            {
              "type": "attribute",
              "value": "examID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "duration",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "totalMarks",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "method",
              "value": "addQuestion(Question)",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "removeQuestion(Question)",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Question"
                }
              ],
              "label": "contains",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Question",
          "children": [
            {
              "type": "attribute",
              "value": "questionID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "questionType",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "text",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "marks",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "method",
              "value": "display()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Teacher",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Exam"
                }
              ],
              "label": "creates",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Students should be able to enroll in exams, attempt questions within the allocated time, and submit answers electronically. The system should automatically handle exam start and end times.",
    "PlantUML": "class Enrollment {\n  - enrollmentID: String\n  - enrollmentDate: Date\n  + enrollStudent(Student, Exam)\n}\n\nStudent \"1\" -- \"0..*\" Enrollment : enrolls\nExam \"1\" -- \"0..*\" Enrollment : includes\nEnrollment \"1\" -- \"1\" Student\nEnrollment \"1\" -- \"1\" Exam",
    "Model": "V28",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Enrollment",
          "children": [
            {
              "type": "attribute",
              "value": "enrollmentID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "enrollmentDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "method",
              "value": "enrollStudent(Student, Exam)",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Student"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "1"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Exam"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Student",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Enrollment"
                }
              ],
              "label": "enrolls",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Exam",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Enrollment"
                }
              ],
              "label": "includes",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system should automatically grade objective questions (e.g., multiple-choice, true/false) and allow teachers to manually grade descriptive answers. Grades must be stored and accessible by students and administrators.",
    "PlantUML": "class Grade {\n  - gradeID: String\n  - marksObtained: float\n  + calculateTotal()\n}\n\nTeacher \"1\" -- \"0..*\" Grade : assigns",
    "Model": "V28",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Grade",
          "children": [
            {
              "type": "attribute",
              "value": "gradeID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "marksObtained",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "method",
              "value": "calculateTotal()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Teacher",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Grade"
                }
              ],
              "label": "assigns",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Administrators must generate reports on exam performance, participation rates, and average scores. The system should allow filtering reports by exam, course, or date.\n\nplantuml\nCopy\nEdit\n",
    "PlantUML": "class Report {\n  - reportID: String\n  - reportType: String\n  - generatedOn: Date\n  + generateReport()\n}\n\nclass Administrator {\n  + generateReports()\n}\n\nAdministrator \"1\" -- \"0..*\" Report : generates\nExam \"1\" -- \"0..*\" Report : analyzedIn\n",
    "Model": "V28",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Report",
          "children": [
            {
              "type": "attribute",
              "value": "reportID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "reportType",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "generatedOn",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "method",
              "value": "generateReport()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Administrator",
          "children": [
            {
              "type": "method",
              "value": "generateReports()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Report"
                }
              ],
              "label": "generates",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Exam",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Report"
                }
              ],
              "label": "analyzedIn",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The Inventory Management System helps businesses efficiently track, manage, and control inventory levels, orders, sales, and deliveries by allowing users to add, update, and delete uniquely identifiable product details—such as name, description, SKU, price, and quantity in stock—while maintaining accurate, real-time stock levels that update with each transaction.\n",
    "PlantUML": "class Product {\n  + productId : String\n  + name : String\n  + description : String\n  + SKU : String\n  + price : double\n  + quantityInStock : int\n  + updateStock(amount : int)\n}\n\n",
    "Model": "V29",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Product",
          "children": [
            {
              "type": "attribute",
              "value": "productId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "SKU",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "price",
              "visibility": "+",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "quantityInStock",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "method",
              "value": "updateStock(amount : int)",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system shall store and manage supplier information, including supplier name and contact details, while maintaining the relationship between each supplier and the multiple products they supply.\n",
    "PlantUML": "\nclass Supplier {\n  +supplierId : String\n  +name : String\n  +contactInfo : String\n}\n\n\nSupplier \"1\" -- \"0..*\" Product : supplies \n",
    "Model": "V29",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Supplier",
          "children": [
            {
              "type": "attribute",
              "value": "supplierId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "contactInfo",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Product"
                }
              ],
              "label": "supplies",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Product",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The system shall record inventory transactions, including stock additions (purchases) and reductions (sales or disposals), capturing details such as date, product, quantity, and transaction type.\n",
    "PlantUML": "class InventoryTransaction {\n  + transactionId : String\n  + date : Date\n  + transactionType : String\n  + quantity : int\n}\n\n\nInventoryTransaction \"1\" --> \"1\" Product\n",
    "Model": "V29",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "InventoryTransaction",
          "children": [
            {
              "type": "attribute",
              "value": "transactionId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "date",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "transactionType",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "quantity",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Product"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Product",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The system shall support order creation for purchasing products from suppliers and fulfilling customer orders from inventory, while tracking order status (e.g., Pending, Completed), order date, and related products with their quantities.\n",
    "PlantUML": "class Order {\n  + orderId : String\n  + orderDate : Date\n  + status : String\n\n  + placeOrder() : void\n  + updateStatus(newStatus : String) : void\n}\n\nOrder \"1\" --> \"1..*\" Product : contains \nOrder \"1\" --> \"1\" Supplier : placedFrom \n",
    "Model": "V29",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Order",
          "children": [
            {
              "type": "attribute",
              "value": "orderId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "orderDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "placeOrder()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "updateStatus(newStatus : String)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Product"
                }
              ],
              "label": "contains",
              "multiplicity1": "1",
              "multiplicity2": "1..*"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Supplier"
                }
              ],
              "label": "placedFrom",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Product",
          "children": []
        },
        {
          "type": "class",
          "value": "Supplier",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The system shall manage users with roles such as Admin, Warehouse Manager, and Salesperson, each having different permissions like managing products, processing orders, or viewing reports.\n",
    "PlantUML": "class User {\n  + userId : String\n  + username : String\n  + role : String\n\n  + login()\n  + logout()\n}\n\n\nUser <|-- Admin\nUser <|-- WarehouseManager\nUser <|-- Salesperson\n",
    "Model": "V29",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "username",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "role",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "login()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "logout()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Admin"
                }
              ]
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "WarehouseManager"
                }
              ]
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Salesperson"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Admin",
          "children": []
        },
        {
          "type": "class",
          "value": "WarehouseManager",
          "children": []
        },
        {
          "type": "class",
          "value": "Salesperson",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The system shall generate reports on inventory levels, sales, and purchase history, and alert users when stock levels fall below predefined thresholds to avoid stockouts.\n",
    "PlantUML": "class Report {\n  + reportId : String\n  + reportType : String\n  + generate()\n}\n\n\nclass Alert {\n  + alertId : String\n  + message : String\n  + alertDate : Date\n}\n\n\nAlert \"1\" --> \"1\" Product : concerns\n",
    "Model": "V29",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Report",
          "children": [
            {
              "type": "attribute",
              "value": "reportId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "reportType",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "generate()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Alert",
          "children": [
            {
              "type": "attribute",
              "value": "alertId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "message",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "alertDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Product"
                }
              ],
              "label": "concerns",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Product",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The system shall allow organizing products into categories for better inventory grouping and searching, where each product belongs to one category and each category can contain multiple products.\n",
    "PlantUML": "class Category {\n  + categoryId : String\n  + name : String\n  + description : String\n}\n\n\nCategory \"1\" -- \"0..*\" Product : includes\n",
    "Model": "V29",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Category",
          "children": [
            {
              "type": "attribute",
              "value": "categoryId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Product"
                }
              ],
              "label": "includes",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Product",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The BackupSchedule class dictates when and how often data backups occur, holding details like scheduleId, backupTime, frequency, and lastBackupDate, and offering methods to startBackup() and updateSchedule().",
    "PlantUML": "class BackupSchedule {\n    - scheduleId : String\n    - backupTime : Time\n    - frequency : String\n    - lastBackupDate : Date\n    + startBackup() : void\n    + updateSchedule(newTime: Time, newFrequency: String) : void\n}\n",
    "Model": "H1",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "BackupSchedule",
          "children": [
            {
              "type": "attribute",
              "value": "scheduleId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "backupTime",
              "visibility": "-",
              "data_type": "Time"
            },
            {
              "type": "attribute",
              "value": "frequency",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "lastBackupDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "method",
              "value": "startBackup()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "updateSchedule(newTime: Time, newFrequency: String)",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "A BackupJob instance represents a single backup operation, defined by its jobId, status, startTime, endTime, and dataSize, and includes functions to execute() or cancel() the backup.",
    "PlantUML": "class BackupJob {\n    - jobId : String\n    - status : String\n    - startTime : DateTime\n    - endTime : DateTime\n    - dataSize : long\n    + execute() : void\n    + cancel() : void\n}\n",
    "Model": "H1",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "BackupJob",
          "children": [
            {
              "type": "attribute",
              "value": "jobId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "startTime",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "endTime",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "dataSize",
              "visibility": "-",
              "data_type": "long"
            },
            {
              "type": "method",
              "value": "execute()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "cancel()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The BackupStorage class specifies where backups are saved, with attributes such as storageId, storageType, capacity, and usedSpace, and provides methods to allocateSpace(size) or releaseSpace(size).",
    "PlantUML": "class BackupStorage {\n    - storageId : String\n    - storageType : String\n    - capacity : long\n    - usedSpace : long\n    + allocateSpace(size: long) : boolean\n    + releaseSpace(size: long) : void\n}\n",
    "Model": "H1",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "BackupStorage",
          "children": [
            {
              "type": "attribute",
              "value": "storageId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "storageType",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "capacity",
              "visibility": "-",
              "data_type": "long"
            },
            {
              "type": "attribute",
              "value": "usedSpace",
              "visibility": "-",
              "data_type": "long"
            },
            {
              "type": "method",
              "value": "allocateSpace(size: long)",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "method",
              "value": "releaseSpace(size: long)",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The DisasterRecoveryPlan class outlines steps for restoring data and systems after a disaster, encompassing planId, planName, description, and lastTestDate, and features methods to activatePlan() and testPlan().",
    "PlantUML": "class DisasterRecoveryPlan {\n    - planId : String\n    - planName : String\n    - description : String\n    - lastTestDate : Date\n    + activatePlan() : void\n    + testPlan() : boolean\n}\n",
    "Model": "H1",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "DisasterRecoveryPlan",
          "children": [
            {
              "type": "attribute",
              "value": "planId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "planName",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "lastTestDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "method",
              "value": "activatePlan()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "testPlan()",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "A RecoveryPoint class captures a specific data snapshot for restoration, containing pointId, timestamp, and description, and offers methods to validate() data integrity or restore() from that point.",
    "PlantUML": "class RecoveryPoint {\n    - pointId : String\n    - timestamp : DateTime\n    - description : String\n    + validate() : boolean\n    + restore() : void\n}\n",
    "Model": "H1",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "RecoveryPoint",
          "children": [
            {
              "type": "attribute",
              "value": "pointId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "validate()",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "method",
              "value": "restore()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The BackupManager orchestrates the entire backup process, overseeing collections of BackupSchedule, BackupJob, and BackupStorage objects, and providing methods like createBackupSchedule(), startBackupJob(), and manageStorage().",
    "PlantUML": "class BackupManager {\n    + createBackupSchedule(schedule: BackupSchedule) : void\n    + startBackupJob(job: BackupJob) : void\n    + manageStorage(storage: BackupStorage) : void\n}\nBackupManager \"1\" -- \"*\" BackupSchedule\nBackupManager \"1\" -- \"*\" BackupJob\nBackupManager \"1\" -- \"*\" BackupStorage\n",
    "Model": "H1",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "BackupManager",
          "children": [
            {
              "type": "method",
              "value": "createBackupSchedule(schedule: BackupSchedule)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "startBackupJob(job: BackupJob)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "manageStorage(storage: BackupStorage)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "BackupSchedule"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "*"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "BackupJob"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "*"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "BackupStorage"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "BackupSchedule",
          "children": []
        },
        {
          "type": "class",
          "value": "BackupJob",
          "children": []
        },
        {
          "type": "class",
          "value": "BackupStorage",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The DisasterRecoveryCoordinator manages disaster recovery plans and recovery points, linking to multiple DisasterRecoveryPlan and RecoveryPoint objects, and offering functions like initiateRecovery() and schedulePlanTest().",
    "PlantUML": "class DisasterRecoveryCoordinator {\n    + initiateRecovery(plan: DisasterRecoveryPlan) : void\n    + schedulePlanTest(plan: DisasterRecoveryPlan) : void\n}\nDisasterRecoveryCoordinator \"1\" -- \"*\" DisasterRecoveryPlan\nDisasterRecoveryCoordinator \"1\" -- \"*\" RecoveryPoint\n",
    "Model": "H1",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "DisasterRecoveryCoordinator",
          "children": [
            {
              "type": "method",
              "value": "initiateRecovery(plan: DisasterRecoveryPlan)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "schedulePlanTest(plan: DisasterRecoveryPlan)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "DisasterRecoveryPlan"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "*"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "RecoveryPoint"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "DisasterRecoveryPlan",
          "children": []
        },
        {
          "type": "class",
          "value": "RecoveryPoint",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The Alert class signifies notifications generated during backup or recovery, with attributes such as alertId, alertType, message, and timestamp, and methods to send() or acknowledge().",
    "PlantUML": "class Alert {\n    - alertId : String\n    - alertType : String\n    - message : String\n    - timestamp : DateTime\n    + send() : void\n    + acknowledge() : void\n}\n",
    "Model": "H1",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Alert",
          "children": [
            {
              "type": "attribute",
              "value": "alertId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "alertType",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "message",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "method",
              "value": "send()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "acknowledge()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Alerts can be linked to either a BackupJob or a DisasterRecoveryPlan for error reporting.",
    "PlantUML": "BackupJob \"0..*\" -- \"0..*\" Alert\nDisasterRecoveryPlan \"0..*\" -- \"0..*\" Alert\n",
    "Model": "H1",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "BackupJob",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Alert"
                }
              ],
              "multiplicity1": "0..*",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Alert",
          "children": []
        },
        {
          "type": "class",
          "value": "DisasterRecoveryPlan",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Alert"
                }
              ],
              "multiplicity1": "0..*",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system includes a Bank class that manages multiple Account objects, each with an account number and balance, and linked to a customer.",
    "PlantUML": "class Bank {\n    - name: String\n    - address: String\n    + addAccount(account: Account): void\n    + removeAccount(accountNumber: String): void\n}\n\nclass Account {\n    - accountNumber: String\n    - balance: double\n    + deposit(amount: double): void\n    + withdraw(amount: double): boolean\n    + getBalance(): double\n}\n\nBank \"1\" --> \"*\" Account : manages \n",
    "Model": "H2",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Bank",
          "children": [
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "address",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "addAccount(account: Account)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "removeAccount(accountNumber: String)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Account"
                }
              ],
              "label": "manages",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Account",
          "children": [
            {
              "type": "attribute",
              "value": "accountNumber",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "balance",
              "visibility": "-",
              "data_type": "double"
            },
            {
              "type": "method",
              "value": "deposit(amount: double)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "withdraw(amount: double)",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "method",
              "value": "getBalance()",
              "visibility": "+",
              "data_type": "double"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Each Customer has a unique ID, name, and contact information, and can maintain several accounts.",
    "PlantUML": "class Customer {\n    - customerId: String\n    - name: String\n    - email: String\n    - phoneNumber: String\n    + getDetails(): String\n}\n\nCustomer \"1\" --> \"*\" Account : owns >\n",
    "Model": "H2",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Customer",
          "children": [
            {
              "type": "attribute",
              "value": "customerId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "phoneNumber",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "getDetails()",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Account"
                }
              ],
              "label": "owns >",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Account",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Different types of accounts exist: SavingsAccount and CheckingAccount, both inheriting from the base Account class; SavingsAccount has an interest rate, while CheckingAccount has an overdraft limit.",
    "PlantUML": "class SavingsAccount {\n    - interestRate: double\n    + addInterest(): void\n}\n\nclass CheckingAccount {\n    - overdraftLimit: double\n    + checkOverdraft(): boolean\n}\n\nAccount <|-- SavingsAccount\nAccount <|-- CheckingAccount\n",
    "Model": "H2",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "SavingsAccount",
          "children": [
            {
              "type": "attribute",
              "value": "interestRate",
              "visibility": "-",
              "data_type": "double"
            },
            {
              "type": "method",
              "value": "addInterest()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "CheckingAccount",
          "children": [
            {
              "type": "attribute",
              "value": "overdraftLimit",
              "visibility": "-",
              "data_type": "double"
            },
            {
              "type": "method",
              "value": "checkOverdraft()",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        },
        {
          "type": "class",
          "value": "Account",
          "children": [
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "SavingsAccount"
                }
              ]
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "CheckingAccount"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system logs every Transaction, detailing a transaction ID, date, amount, and type (deposit, withdrawal, transfer), with each transaction associated with one account.",
    "PlantUML": "class Transaction {\n    - transactionId: String\n    - date: Date\n    - amount: double\n    - type: String\n    + execute(): boolean\n}\n\nAccount \"1\" --> \"*\" Transaction : records \n",
    "Model": "H2",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Transaction",
          "children": [
            {
              "type": "attribute",
              "value": "transactionId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "date",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "amount",
              "visibility": "-",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "type",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "execute()",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        },
        {
          "type": "class",
          "value": "Account",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Transaction"
                }
              ],
              "label": "records",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The BankEmployee class represents bank staff, identified by an employee ID, name, and role; these employees manage bank operations but are not directly tied to accounts.",
    "PlantUML": "class BankEmployee {\n    - employeeId: String\n    - name: String\n    - role: String\n    + performOperation(): void\n}\n\nBank \"1\" --> \"*\" BankEmployee : employs \n",
    "Model": "H2",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "BankEmployee",
          "children": [
            {
              "type": "attribute",
              "value": "employeeId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "role",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "performOperation()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Bank",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "BankEmployee"
                }
              ],
              "label": "employs",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Customers can apply for Loans; each Loan has an ID, amount, interest rate, and status, and is associated with a single customer.",
    "PlantUML": "class Loan {\n    - loanId: String\n    - amount: double\n    - interestRate: double\n    - status: String\n    + approve(): void\n    + reject(): void\n}\n\nCustomer \"1\" --> \"*\" Loan : applies >\n",
    "Model": "H2",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Loan",
          "children": [
            {
              "type": "attribute",
              "value": "loanId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "amount",
              "visibility": "-",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "interestRate",
              "visibility": "-",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "approve()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "reject()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Customer",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Loan"
                }
              ],
              "label": "applies >",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Each customer has one or more addresses, which are defined in a separate Address class containing street, city, postal code, and country, representing a composition relationship.",
    "PlantUML": "class Address {\n    - street: String\n    - city: String\n    - postalCode: String\n    - country: String\n}\n\nCustomer \"1\" *-- \"*\" Address : has \n",
    "Model": "H2",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Address",
          "children": [
            {
              "type": "attribute",
              "value": "street",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "city",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "postalCode",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "country",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Customer",
          "children": [
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Address"
                }
              ],
              "label": "has",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system offers an OnlineBankingService that enables customers to log in and conduct transactions online.",
    "PlantUML": "class OnlineBankingService {\n    + login(customerId: String, password: String): boolean\n    + performTransaction(transaction: Transaction): boolean\n}\n\nCustomer \"1\" --> \"1\" OnlineBankingService : uses \n",
    "Model": "H2",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "OnlineBankingService",
          "children": [
            {
              "type": "method",
              "value": "login(customerId: String, password: String)",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "method",
              "value": "performTransaction(transaction: Transaction)",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        },
        {
          "type": "class",
          "value": "Customer",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "OnlineBankingService"
                }
              ],
              "label": "uses",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system needs to track customers visiting the restaurant; each customer has an ID, name, phone number, and email, and can place multiple orders.",
    "PlantUML": "class Customer {\n    - customerID: int\n    - name: String\n    - phoneNumber: String\n    - email: String\n    + placeOrder(order: Order): void\n}\n\nclass Order {\n}\n\nCustomer \"1\" -- \"*\" Order : places\n\n",
    "Model": "H3",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Customer",
          "children": [
            {
              "type": "attribute",
              "value": "customerID",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "phoneNumber",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "placeOrder(order: Order)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Order"
                }
              ],
              "label": "places",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Order",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The order includes an orderID, orderDate, and status.",
    "PlantUML": "class Order {\n    - orderID: int\n    - orderDate: Date\n    - status: String\n}",
    "Model": "H3",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Order",
          "children": [
            {
              "type": "attribute",
              "value": "orderID",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "orderDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The restaurant system must manage a menu containing various menu items, each identified by a unique item code, name, description, price, and category.",
    "PlantUML": "class Menu {\n    + getMenuItems(): List<MenuItem>\n}\n\nclass MenuItem {\n    - itemCode: int\n    - name: String\n    - description: String\n    - price: float\n    - category: String\n}\n\n\n",
    "Model": "H3",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Menu",
          "children": [
            {
              "type": "method",
              "value": "getMenuItems()",
              "visibility": "+",
              "data_type": "List<MenuItem>"
            }
          ]
        },
        {
          "type": "class",
          "value": "MenuItem",
          "children": [
            {
              "type": "attribute",
              "value": "itemCode",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "price",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "attribute",
              "value": "category",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The menu can feature multiple items.",
    "PlantUML": "Menu \"1\" -- \"*\" MenuItem : contains",
    "Model": "H3",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Menu",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "MenuItem"
                }
              ],
              "label": "contains",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "MenuItem",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Each order is comprised of one or more order items.",
    "PlantUML": "Order \"1\" -- \"*\" OrderItem : contains ",
    "Model": "H3",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Order",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "OrderItem"
                }
              ],
              "label": "contains",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "OrderItem",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Each order item records the ordered menu item, its quantity, and the subtotal price for that item; an order can contain multiple order items.",
    "PlantUML": "class Order {\n    - orderID: int\n    - orderDate: Date\n    - status: String\n}\n\nclass OrderItem {\n    - quantity: int\n    - subtotalPrice: float\n}\n\nclass MenuItem {\n    - itemCode: int\n    - name: String\n    - description: String\n    - price: float\n    - category: String\n}\n\nOrderItem \"*\" -- \"1\" MenuItem : refers to ",
    "Model": "H3",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Order",
          "children": [
            {
              "type": "attribute",
              "value": "orderID",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "orderDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "OrderItem",
          "children": [
            {
              "type": "attribute",
              "value": "quantity",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "subtotalPrice",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "MenuItem"
                }
              ],
              "label": "refers to",
              "multiplicity1": "*",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "MenuItem",
          "children": [
            {
              "type": "attribute",
              "value": "itemCode",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "price",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "attribute",
              "value": "category",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system should process payments for orders; each payment has a payment ID, payment date, payment amount, and payment method.",
    "PlantUML": "class Payment {\n    - paymentID: int\n    - paymentDate: Date\n    - amount: float\n    - method: String\n}\n\nclass Order {\n    - orderID: int\n    - orderDate: Date\n    - status: String\n}",
    "Model": "H3",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Payment",
          "children": [
            {
              "type": "attribute",
              "value": "paymentID",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "paymentDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "amount",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "attribute",
              "value": "method",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Order",
          "children": [
            {
              "type": "attribute",
              "value": "orderID",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "orderDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Every order is linked to a single payment.",
    "PlantUML": "Order \"1\" -- \"1\" Payment : paid by ",
    "Model": "H3",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Order",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Payment"
                }
              ],
              "label": "paid by",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Payment",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The restaurant employs staff members, each with a staff ID, name, role, and contact information; staff members can handle multiple orders.",
    "PlantUML": "class Staff {\n    - staffID: int\n    - name: String\n    - role: String\n    - contactInfo: String\n    + handleOrder(order: Order): void\n}\n\nclass Order {\n    - orderID: int\n    - orderDate: Date\n    - status: String\n}\n\nStaff \"1\" -- \"*\" Order : handles\n",
    "Model": "H3",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Staff",
          "children": [
            {
              "type": "attribute",
              "value": "staffID",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "role",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "contactInfo",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "handleOrder(order: Order)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Order"
                }
              ],
              "label": "handles",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Order",
          "children": [
            {
              "type": "attribute",
              "value": "orderID",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "orderDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Customers can reserve tables at the restaurant; each reservation includes a reservation ID, date and time, number of guests, and status, and is linked to one customer and one table.",
    "PlantUML": "class Reservation {\n    - reservationID: int\n    - reservationDateTime: DateTime\n    - numberOfGuests: int\n    - status: String\n}\n\nclass Customer{ \n}\nclass Table {\n    - tableID: int\n    - tableNumber: int\n    - seats: int\n}\n\nReservation \"1\" -- \"1\" Customer : made by \nReservation \"1\" -- \"1\" Table : reserves \n",
    "Model": "H3",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Reservation",
          "children": [
            {
              "type": "attribute",
              "value": "reservationID",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "reservationDateTime",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "numberOfGuests",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Customer"
                }
              ],
              "label": "made by",
              "multiplicity1": "1",
              "multiplicity2": "1"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Table"
                }
              ],
              "label": "reserves",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Customer",
          "children": []
        },
        {
          "type": "class",
          "value": "Table",
          "children": [
            {
              "type": "attribute",
              "value": "tableID",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "tableNumber",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "seats",
              "visibility": "-",
              "data_type": "int"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The CDN structure incorporates the distributeContent method and depends on an EdgeServer, which notably features a storeContent method.",
    "PlantUML": "class CDN {\n  +distributeContent(content: Content)\n}\n\nclass EdgeServer {\n  +storeContent(content: Content)\n}\n\nCDN --> EdgeServer : \"distributes\"\n",
    "Model": "H4",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "CDN",
          "children": [
            {
              "type": "method",
              "value": "distributeContent(content: Content)",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "EdgeServer"
                }
              ],
              "label": "\"distributes\""
            }
          ]
        },
        {
          "type": "class",
          "value": "EdgeServer",
          "children": [
            {
              "type": "method",
              "value": "storeContent(content: Content)",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The RequestRouter contains the routeRequest function and interacts with the EdgeServer.",
    "PlantUML": "class RequestRouter {\n  +routeRequest(userLocation: Location): EdgeServer\n}\n\nRequestRouter ..> EdgeServer : \"routes\"\n",
    "Model": "H4",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "RequestRouter",
          "children": [
            {
              "type": "method",
              "value": "routeRequest(userLocation: Location)",
              "visibility": "+",
              "data_type": "EdgeServer"
            },
            {
              "type": "relation",
              "value": "..>",
              "children": [
                {
                  "type": "class",
                  "value": "EdgeServer"
                }
              ],
              "label": "\"routes\""
            }
          ]
        },
        {
          "type": "class",
          "value": "EdgeServer",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The Cache class, used by EdgeServer, includes methods to store and retrieve data.",
    "PlantUML": "\"class Cache {\\n    +store(content: Content)\\n    +retrieve(contentId: String): Content\\n}\\n\\nEdgeServer ..> Cache : \\\"uses\\\"\\n\",\n ",
    "Model": "H4",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Cache",
          "children": []
        },
        {
          "type": "class",
          "value": "nEdgeServer",
          "children": [
            {
              "type": "relation",
              "value": "..>",
              "children": [
                {
                  "type": "class",
                  "value": "Cache"
                }
              ],
              "label": "\\\"uses\\\"\\n\","
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Analytics defines generateReport, and the EdgeServer relies on Analytics.",
    "PlantUML": "class Analytics {\n  + generateReport(): Report\n}\n\nEdgeServer --> Analytics : \"sends\"\n",
    "Model": "H4",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Analytics",
          "children": [
            {
              "type": "method",
              "value": "generateReport()",
              "visibility": "+",
              "data_type": "Report"
            }
          ]
        },
        {
          "type": "class",
          "value": "EdgeServer",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Analytics"
                }
              ],
              "label": "\"sends\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Purger provides a purge method, which is utilized by the EdgeServer.",
    "PlantUML": "class Purger {\n  +purge(contentId: String)\n}\n\nEdgeServer ..> Purger : \"requests\"\n",
    "Model": "H4",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Purger",
          "children": [
            {
              "type": "method",
              "value": "purge(contentId: String)",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "EdgeServer",
          "children": [
            {
              "type": "relation",
              "value": "..>",
              "children": [
                {
                  "type": "class",
                  "value": "Purger"
                }
              ],
              "label": "\"requests\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The EdgeServer depends on the API, which offers the fetchDynamicContent method.",
    "PlantUML": "class API {\n  +fetchDynamicContent(userId: String): Content\n}\n\nEdgeServer --> API : \"fetches\"\n",
    "Model": "H4",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "API",
          "children": [
            {
              "type": "method",
              "value": "fetchDynamicContent(userId: String)",
              "visibility": "+",
              "data_type": "Content"
            }
          ]
        },
        {
          "type": "class",
          "value": "EdgeServer",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "API"
                }
              ],
              "label": "\"fetches\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Security, which is essential for the CDN, includes methods to detectDDoS attacks and encryptData.",
    "PlantUML": "class Security {\n  + detectDDoS(): Boolean\n  + encryptData(data: Data): Data\n}\n\nCDN --> Security : \"integrates\"\n",
    "Model": "H4",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Security",
          "children": [
            {
              "type": "method",
              "value": "detectDDoS()",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "method",
              "value": "encryptData(data: Data)",
              "visibility": "+",
              "data_type": "Data"
            }
          ]
        },
        {
          "type": "class",
          "value": "CDN",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Security"
                }
              ],
              "label": "\"integrates\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The OriginServer provides the provideContent method, which is a requirement for the EdgeServer.",
    "PlantUML": "class OriginServer {\n  + provideContent(contentId: String): Content\n}\n\nEdgeServer --> OriginServer : fetches\n",
    "Model": "H4",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "OriginServer",
          "children": [
            {
              "type": "method",
              "value": "provideContent(contentId: String)",
              "visibility": "+",
              "data_type": "Content"
            }
          ]
        },
        {
          "type": "class",
          "value": "EdgeServer",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "OriginServer"
                }
              ],
              "label": "fetches"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The LoadBalancer is characterized by its balanceLoad method, and the CDN relies on it.",
    "PlantUML": "class LoadBalancer {\n    +balanceLoad(edgeServers: List<EdgeServer>)\n}\n\nCDN --> LoadBalancer : uses\n",
    "Model": "H4",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "LoadBalancer",
          "children": [
            {
              "type": "method",
              "value": "balanceLoad(edgeServers: List<EdgeServer>)",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "CDN",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "LoadBalancer"
                }
              ],
              "label": "uses"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The RuleEngine is built around the applyRules function, and the CDN depends on the RuleEngine.",
    "PlantUML": "class RuleEngine {\n  +applyRules(content: Content, user: User)\n}\n\nCDN --> RuleEngine : configures\n",
    "Model": "H4",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "RuleEngine",
          "children": [
            {
              "type": "method",
              "value": "applyRules(content: Content, user: User)",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "CDN",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "RuleEngine"
                }
              ],
              "label": "configures"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Content is defined by its type and size attributes, and the EdgeServer requires it.",
    "PlantUML": "class Content {\n  +type: String\n  +size: int\n}\n\nEdgeServer --> Content : \"Stores\"\n",
    "Model": "H4",
    "RequirementIndex": "10",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Content",
          "children": [
            {
              "type": "attribute",
              "value": "type",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "size",
              "visibility": "+",
              "data_type": "int"
            }
          ]
        },
        {
          "type": "class",
          "value": "EdgeServer",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Content"
                }
              ],
              "label": "\"Stores\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The Compressor includes a compress method, and the CDN depends on it.",
    "PlantUML": "class Compressor {\n  +compress(content: Content): Content\n}\n\nCDN --> Compressor : \"compresses\"\n",
    "Model": "H4",
    "RequirementIndex": "11",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Compressor",
          "children": [
            {
              "type": "method",
              "value": "compress(content: Content)",
              "visibility": "+",
              "data_type": "Content"
            }
          ]
        },
        {
          "type": "class",
          "value": "CDN",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Compressor"
                }
              ],
              "label": "\"compresses\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The FailoverManager design incorporates methods to detectFailure and rerouteTraffic, and the CDN relies on it.",
    "PlantUML": "class FailoverManager {\n  + detectFailure(edgeServer: EdgeServer)\n  + rerouteTraffic(failedServer: EdgeServer)\n}\n\nCDN --> FailoverManager : \"ensures failover\"\n",
    "Model": "H4",
    "RequirementIndex": "12",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "FailoverManager",
          "children": [
            {
              "type": "method",
              "value": "detectFailure(edgeServer: EdgeServer)",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "rerouteTraffic(failedServer: EdgeServer)",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "CDN",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "FailoverManager"
                }
              ],
              "label": "\"ensures failover\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The Repository design includes a name and URL attribute, along with methods to createRepository, cloneRepository, and deleteRepository; the User class encapsulates accessRepository and username attributes and requires the Repository.",
    "PlantUML": "\nclass Repository {\n  - name: String\n  - url: String\n  + createRepository()\n  + cloneRepository()\n  + deleteRepository()\n}\n\nclass User {\n  - username: String\n  + accessRepository()\n}\n\nUser --> Repository : \"manages\"",
    "Model": "H5",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Repository",
          "children": [
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "url",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "createRepository()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "cloneRepository()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "deleteRepository()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "username",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "accessRepository()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Repository"
                }
              ],
              "label": "\"manages\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The Branch structure includes methods to createBranch, switchBranch, and deleteBranch, and has a name attribute; the Repository depends on Branch.",
    "PlantUML": "class Branch {\n  - name: String\n  + createBranch()\n  + switchBranch()\n  + deleteBranch()\n}\n\nRepository --> Branch : contains",
    "Model": "H5",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Branch",
          "children": [
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "createBranch()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "switchBranch()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "deleteBranch()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Repository",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Branch"
                }
              ],
              "label": "contains"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The Commit component includes methods to stageChanges and commitChanges, as well as hash and message attributes; both the Branch and User components depend on Commit.",
    "PlantUML": "class Commit {\n  - hash: String\n  - message: String\n  + stageChanges()\n  + commitChanges()\n}\n\nBranch --> Commit : \"tracks\"\nUser --> Commit : \"makes\"",
    "Model": "H5",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Commit",
          "children": [
            {
              "type": "attribute",
              "value": "hash",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "message",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "stageChanges()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "commitChanges()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Branch",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Commit"
                }
              ],
              "label": "\"tracks\""
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Commit"
                }
              ],
              "label": "\"makes\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The concept of Merge is represented by two methods: mergeBranches and resolveConflicts; additionally, Branch relies on Merge.",
    "PlantUML": "class Merge {\n  +mergeBranches()\n  +resolveConflicts()\n}\n\nBranch --> Merge : \"merges\"",
    "Model": "H5",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Merge",
          "children": [
            {
              "type": "method",
              "value": "mergeBranches()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "resolveConflicts()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Branch",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Merge"
                }
              ],
              "label": "\"merges\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The History class includes a viewLogs method; both the Commit and Repository components depend on History.",
    "PlantUML": "class History {\n  +viewLogs()\n}\n\nCommit --> History : \"maintains\"\nRepository --> History : \"contains\"\n",
    "Model": "H5",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "History",
          "children": [
            {
              "type": "method",
              "value": "viewLogs()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Commit",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "History"
                }
              ],
              "label": "\"maintains\""
            }
          ]
        },
        {
          "type": "class",
          "value": "Repository",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "History"
                }
              ],
              "label": "\"contains\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Collaboration encompasses the methods pushChanges and pullChanges; both the User and Repository components depend on Collaboration.",
    "PlantUML": "class Collaboration {\n    +pushChanges()\n    +pullChanges()\n}\n\nUser --> Collaboration : \"participates\"\nRepository --> Collaboration : \"facilitates\"",
    "Model": "H5",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Collaboration",
          "children": [
            {
              "type": "method",
              "value": "pushChanges()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "pullChanges()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Collaboration"
                }
              ],
              "label": "\"participates\""
            }
          ]
        },
        {
          "type": "class",
          "value": "Repository",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Collaboration"
                }
              ],
              "label": "\"facilitates\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "AccessControl contains a permissions attribute and two methods: assignRole and checkPermission; both the User and Repository rely on AccessControl.",
    "PlantUML": "class AccessControl {\n  - permissions: String\n  + assignRole()\n  + checkPermission()\n}\n\nUser --> AccessControl : \"uses\"\nRepository --> AccessControl : \"enforces\"",
    "Model": "H5",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AccessControl",
          "children": [
            {
              "type": "attribute",
              "value": "permissions",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "assignRole()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "checkPermission()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "AccessControl"
                }
              ],
              "label": "\"uses\""
            }
          ]
        },
        {
          "type": "class",
          "value": "Repository",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "AccessControl"
                }
              ],
              "label": "\"enforces\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The Tag contains a name attribute and two methods: createTag and deleteTag; the Commit relies on the Tag.",
    "PlantUML": "class Tag {\n  - name: String\n  + createTag()\n  + deleteTag()\n}\n\nCommit --> Tag : \"associates\"",
    "Model": "H5",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Tag",
          "children": [
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "createTag()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "deleteTag()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Commit",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Tag"
                }
              ],
              "label": "\"associates\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The Conflict class includes methods to detectConflict and resolveConflict; both the Merge and File classes rely on Conflict.",
    "PlantUML": "class Conflict {\n  +detectConflict()\n  +resolveConflict()\n}\n\nMerge --> Conflict : \"handles\"\nFile --> Conflict : \"detects\"\n",
    "Model": "H5",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Conflict",
          "children": [
            {
              "type": "method",
              "value": "detectConflict()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "resolveConflict()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Merge",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Conflict"
                }
              ],
              "label": "\"handles\""
            }
          ]
        },
        {
          "type": "class",
          "value": "File",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Conflict"
                }
              ],
              "label": "\"detects\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The Backup module provides methods to createBackup and restoreBackup.",
    "PlantUML": "class Backup {\n  +createBackup()\n  +restoreBackup()\n}\n\n",
    "Model": "H5",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Backup",
          "children": [
            {
              "type": "method",
              "value": "createBackup()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "restoreBackup()",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The Repository relies on the Backup module.",
    "PlantUML": "Repository --> Backup : \"supports\"",
    "Model": "H5",
    "RequirementIndex": "10",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Repository",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Backup"
                }
              ],
              "label": "\"supports\""
            }
          ]
        },
        {
          "type": "class",
          "value": "Backup",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The system will enable teachers to create classes and generate unique class codes.",
    "PlantUML": "class Teacher {\n  -teacherId: String\n  -name: String\n  +createClass(name: String): Class\n}\n\nclass Class {\n  -classId: String\n  -name: String\n  -code: String\n  -teacherId: String\n}\nTeacher --> Class : creates",
    "Model": "H6",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Teacher",
          "children": [
            {
              "type": "attribute",
              "value": "teacherId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "createClass(name: String)",
              "visibility": "+",
              "data_type": "Class"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Class"
                }
              ],
              "label": "creates"
            }
          ]
        },
        {
          "type": "class",
          "value": "Class",
          "children": [
            {
              "type": "attribute",
              "value": "classId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "code",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "teacherId",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Teachers will be able to generate a QR code for each class session through the system.",
    "PlantUML": "class QRCode {\n  -qrId: String\n  -classId: String\n  -sessionDate: Date\n  -content: String\n  +generate(): void\n}\n\nClass --> QRCode : generates",
    "Model": "H6",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "QRCode",
          "children": [
            {
              "type": "attribute",
              "value": "qrId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "classId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "sessionDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "content",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "generate()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Class",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "QRCode"
                }
              ],
              "label": "generates"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Students will be able to mark their attendance by scanning a QR code using the system.",
    "PlantUML": "class Student {\n  -studentId: String\n  -name: String\n  +scanQRCode(code: String): void\n}\n\nclass Attendance {\n  -attendanceId: String\n  -studentId: String\n  -classId: String\n  -sessionDate: Date\n  -status: String\n}\n\nStudent --> Attendance : scans",
    "Model": "H6",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Student",
          "children": [
            {
              "type": "attribute",
              "value": "studentId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "scanQRCode(code: String)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Attendance"
                }
              ],
              "label": "scans"
            }
          ]
        },
        {
          "type": "class",
          "value": "Attendance",
          "children": [
            {
              "type": "attribute",
              "value": "attendanceId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "studentId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "classId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "sessionDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system will validate the scanned QR code against the correct class and session date.",
    "PlantUML": "class QRValidator {\n  +validate(code: String): Boolean\n}\n\nQRCode --> QRValidator : validates",
    "Model": "H6",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "QRValidator",
          "children": [
            {
              "type": "method",
              "value": "validate(code: String)",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        },
        {
          "type": "class",
          "value": "QRCode",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "QRValidator"
                }
              ],
              "label": "validates"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Attendance records will be stored in the database by the system.",
    "PlantUML": "class Database {\n  +saveAttendance(attendance: Attendance): void\n  +getAttendanceByStudent(studentId: String): List<Attendance>\n}\n\nAttendance --> Database : storedIn",
    "Model": "H6",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Database",
          "children": [
            {
              "type": "method",
              "value": "saveAttendance(attendance: Attendance)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "getAttendanceByStudent(studentId: String)",
              "visibility": "+",
              "data_type": "List<Attendance>"
            }
          ]
        },
        {
          "type": "class",
          "value": "Attendance",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Database"
                }
              ],
              "label": "storedIn"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Teachers will be able to view attendance reports for their classes within the system.",
    "PlantUML": "Teacher --> Attendance : views",
    "Model": "H6",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Teacher",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Attendance"
                }
              ],
              "label": "views"
            }
          ]
        },
        {
          "type": "class",
          "value": "Attendance",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Students will be able to access their personal attendance records through the system.",
    "PlantUML": "Student --> Attendance : views ",
    "Model": "H6",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Student",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Attendance"
                }
              ],
              "label": "views"
            }
          ]
        },
        {
          "type": "class",
          "value": "Attendance",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The system will prevent duplicate attendance entries for the same session.",
    "PlantUML": "class AttendanceManager {\n  +markAttendance(studentId: String, classId: String, sessionDate: Date): String\n}\n\nAttendanceManager --> Attendance : prevents",
    "Model": "H6",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AttendanceManager",
          "children": [
            {
              "type": "method",
              "value": "markAttendance(studentId: String, classId: String, sessionDate: Date)",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Attendance"
                }
              ],
              "label": "prevents"
            }
          ]
        },
        {
          "type": "class",
          "value": "Attendance",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "In the Online Ticket Booking System for Events, users are required to register, log in, and manage their accounts securely using their email and password.",
    "PlantUML": "class User {\n  - userId: String\n  - name: String\n  - email: String\n  - password: String\n  + register(): void\n  + login(): boolean\n}\n",
    "Model": "H7",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "register()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "login()",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Event organizers have the capability to create, update, and delete events, including details such as name, date, venue, and description.",
    "PlantUML": "class Event {\n  - eventId: String\n  - title: String\n  - date: Date\n  - venue: String\n  - description: String\n  + createEvent(): void\n  + updateEvent(): void\n  + deleteEvent(): void\n}\n",
    "Model": "H7",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Event",
          "children": [
            {
              "type": "attribute",
              "value": "eventId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "date",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "venue",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "createEvent()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "updateEvent()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "deleteEvent()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Users can browse events and purchase tickets by selecting the number of seats and completing an online payment; each user can make multiple bookings.",
    "PlantUML": "class Booking {\n  - bookingId: String\n  - userId: String\n  - eventId: String\n  - ticketCount: int\n  - bookingDate: Date\n  + makeBooking(): boolean\n}\nUser \"1\" -- \"0..*\" Booking : makes ",
    "Model": "H7",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Booking",
          "children": [
            {
              "type": "attribute",
              "value": "bookingId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "userId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "eventId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "ticketCount",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "bookingDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "method",
              "value": "makeBooking()",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Booking"
                }
              ],
              "label": "makes",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system integrates with a payment gateway to securely process ticket payments and confirm bookings.",
    "PlantUML": "class Payment {\n  - paymentId: String\n  - bookingId: String\n  - amount: double\n  - status: String\n  + processPayment(): boolean\n}\nBooking \"1\" -- \"1\" Payment : paid",
    "Model": "H7",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Payment",
          "children": [
            {
              "type": "attribute",
              "value": "paymentId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "bookingId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "amount",
              "visibility": "-",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "processPayment()",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        },
        {
          "type": "class",
          "value": "Booking",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Payment"
                }
              ],
              "label": "paid",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Each successful booking leads to the creation of an e-ticket, which includes a QR code and is sent to the user.",
    "PlantUML": "class ETicket {\n  - ticketId: String\n  - bookingId: String\n  - qrCode: String\n  + generateTicket(): void\n  + sendToEmail(): void\n}\nBooking \"1\" -- \"1\" Eticket",
    "Model": "H7",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ETicket",
          "children": [
            {
              "type": "attribute",
              "value": "ticketId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "bookingId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "qrCode",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "generateTicket()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "sendToEmail()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Booking",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Eticket"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Eticket",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Users can search for events using keywords and refine their results by applying filters based on category, date, or location.",
    "PlantUML": "class EventSearch {\n  + searchByKeyword(keyword: String): List<Event>\n  + filterByDate(date: Date): List<Event>\n  + filterByLocation(location: String): List<Event>\n}\n",
    "Model": "H7",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "EventSearch",
          "children": [
            {
              "type": "method",
              "value": "searchByKeyword(keyword: String)",
              "visibility": "+",
              "data_type": "List<Event>"
            },
            {
              "type": "method",
              "value": "filterByDate(date: Date)",
              "visibility": "+",
              "data_type": "List<Event>"
            },
            {
              "type": "method",
              "value": "filterByLocation(location: String)",
              "visibility": "+",
              "data_type": "List<Event>"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Administrators can manage users, view system reports, and remove inappropriate events or block users.",
    "PlantUML": "class Admin {\n  - adminId: String\n  - name: String\n  + manageUsers(): void\n  + moderateEvents(): void\n  + viewReports(): void\n}\nAdmin \"1\" -- \"*\" User : manages\nAdmin \"1\" -- \"*\" Event : moderates",
    "Model": "H7",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Admin",
          "children": [
            {
              "type": "attribute",
              "value": "adminId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "manageUsers()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "moderateEvents()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "viewReports()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "manages",
              "multiplicity1": "1",
              "multiplicity2": "*"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Event"
                }
              ],
              "label": "moderates",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        },
        {
          "type": "class",
          "value": "Event",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Users receive email/SMS notifications for booking confirmations, cancellations, and event updates.",
    "PlantUML": "class Notification {\n  - notificationId: String\n  - userId: String\n  - message: String\n  + sendEmail(): void\n  + sendSMS(): void\n}\nUser \"1\" -- \"0..*\" Notification",
    "Model": "H7",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Notification",
          "children": [
            {
              "type": "attribute",
              "value": "notificationId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "userId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "message",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "sendEmail()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "sendSMS()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Notification"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Each event can specify the number of available seats and manage seat availability during the booking process.",
    "PlantUML": "class Seat {\n  - seatId: String\n  - eventId: String\n  - isAvailable: boolean\n  + reserveSeat(): boolean\n  + releaseSeat(): void\n}\n",
    "Model": "H7",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Seat",
          "children": [
            {
              "type": "attribute",
              "value": "seatId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "eventId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "isAvailable",
              "visibility": "-",
              "data_type": "boolean"
            },
            {
              "type": "method",
              "value": "reserveSeat()",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "method",
              "value": "releaseSeat()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Users are able to cancel bookings within a defined period, and the system will process a refund if applicable.",
    "PlantUML": "class Cancellation {\n  - cancellationId: String\n  - bookingId: String\n  - refundAmount: double\n  + cancelBooking(): boolean\n  + processRefund(): boolean\n}\n",
    "Model": "H7",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Cancellation",
          "children": [
            {
              "type": "attribute",
              "value": "cancellationId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "bookingId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "refundAmount",
              "visibility": "-",
              "data_type": "double"
            },
            {
              "type": "method",
              "value": "cancelBooking()",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "method",
              "value": "processRefund()",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Event organizers are responsible for managing events; an organizer is a specialized type of user with privileges to create events.",
    "PlantUML": "class Organizer {\n  + createEvent(): void\n  + updateEvent(): void\n  + deleteEvent(): void\n}\n\nOrganizer \"1\" -- \"0..*\" Event : organizes\nOrganizer --|> User",
    "Model": "H7",
    "RequirementIndex": "10",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Organizer",
          "children": [
            {
              "type": "method",
              "value": "createEvent()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "updateEvent()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "deleteEvent()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Event"
                }
              ],
              "label": "organizes",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            },
            {
              "type": "relation",
              "value": "--|>",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Event",
          "children": []
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Users have the option to book one or more tickets for a particular event.",
    "PlantUML": "Booking \"1\" -- \"1\" Event",
    "Model": "H7",
    "RequirementIndex": "11",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Booking",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Event"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Event",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The virtual classroom platform requires users (students and teachers) to securely register, log in, and manage their profiles, with authentication involving password encryption and role-based access.",
    "PlantUML": "class User {\n  -id: String\n  -username: String\n  -password: String\n  -email: String\n  -role: UserRole\n  +login(): boolean\n  +logout(): void\n}",
    "Model": "H8",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "username",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "role",
              "visibility": "-",
              "data_type": "UserRole"
            },
            {
              "type": "method",
              "value": "login()",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "method",
              "value": "logout()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Students and teachers should have extended profiles with specific attributes, such as enrolled courses for students and created courses for teachers.",
    "PlantUML": "class Student {\n  -enrolledCourses: List<Course>\n}\n\nclass Teacher {\n  -teachingCourses: List<Course>\n}\n\nUser <|-- Student\nUser <|-- Teacher\n",
    "Model": "H8",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Student",
          "children": [
            {
              "type": "attribute",
              "value": "enrolledCourses",
              "visibility": "-",
              "data_type": "List<Course>"
            }
          ]
        },
        {
          "type": "class",
          "value": "Teacher",
          "children": [
            {
              "type": "attribute",
              "value": "teachingCourses",
              "visibility": "-",
              "data_type": "List<Course>"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Student"
                }
              ]
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Teacher"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Teachers can create, modify, and delete courses, with each course comprising a title, description, and a list of enrolled students.",
    "PlantUML": "class Course {\n  -courseId: String\n  -title: String\n  -description: String\n  -teacher: Teacher\n  -students: List<Student>\n  +addStudent(s: Student): void\n}\n\nTeacher \"1\" -- \"0..*\" Course : creates \nStudent \"0..*\" -- \"0..*\" Course : enrolls \n",
    "Model": "H8",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Course",
          "children": [
            {
              "type": "attribute",
              "value": "courseId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "teacher",
              "visibility": "-",
              "data_type": "Teacher"
            },
            {
              "type": "attribute",
              "value": "students",
              "visibility": "-",
              "data_type": "List<Student>"
            },
            {
              "type": "method",
              "value": "addStudent(s: Student)",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Teacher",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Course"
                }
              ],
              "label": "creates",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Student",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Course"
                }
              ],
              "label": "enrolls",
              "multiplicity1": "0..*",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Teachers can schedule live sessions, each detailing a start time, duration, and associated course.",
    "PlantUML": "class VirtualSession {\n  -sessionId: String\n  -startTime: DateTime\n  -durationMinutes: int\n  -course: Course\n  +join(): void\n}\n\nCourse \"1\" -- \"0..*\" VirtualSession : contains ",
    "Model": "H8",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "VirtualSession",
          "children": [
            {
              "type": "attribute",
              "value": "sessionId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "startTime",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "durationMinutes",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "course",
              "visibility": "-",
              "data_type": "Course"
            },
            {
              "type": "method",
              "value": "join()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Course",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "VirtualSession"
                }
              ],
              "label": "contains",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Teachers can upload assignments and set deadlines, allowing students to submit their work before these deadlines.",
    "PlantUML": "class Assignment {\n  -assignmentId: String\n  -title: String\n  -description: String\n  -deadline: DateTime\n  -course: Course\n}\n\nclass Submission {\n  -submissionId: String\n  -student: Student\n  -fileLink: String\n  -submittedAt: DateTime\n}\n\nAssignment \"1\" -- \"0..*\" Submission : receives \nStudent \"1\" -- \"0..*\" Submission : submits \nCourse \"1\" -- \"0..*\" Assignment : assigns \n",
    "Model": "H8",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Assignment",
          "children": [
            {
              "type": "attribute",
              "value": "assignmentId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "deadline",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "course",
              "visibility": "-",
              "data_type": "Course"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Submission"
                }
              ],
              "label": "receives",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Submission",
          "children": [
            {
              "type": "attribute",
              "value": "submissionId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "student",
              "visibility": "-",
              "data_type": "Student"
            },
            {
              "type": "attribute",
              "value": "fileLink",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "submittedAt",
              "visibility": "-",
              "data_type": "DateTime"
            }
          ]
        },
        {
          "type": "class",
          "value": "Student",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Submission"
                }
              ],
              "label": "submits",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Course",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Assignment"
                }
              ],
              "label": "assigns",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Real-time communication between students and teachers should be available for each session or course.",
    "PlantUML": "class Message {\n  -messageId: String\n  -sender: User\n  -content: String\n  -timestamp: DateTime\n}\n\nclass ChatRoom {\n  -roomId: String\n  -participants: List<User>\n  -messages: List<Message>\n}\n\nChatRoom \"1\" -- \"0..*\" Message : contains \nUser \"0..*\" -- \"0..*\" ChatRoom : participates \n",
    "Model": "H8",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Message",
          "children": [
            {
              "type": "attribute",
              "value": "messageId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "sender",
              "visibility": "-",
              "data_type": "User"
            },
            {
              "type": "attribute",
              "value": "content",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "-",
              "data_type": "DateTime"
            }
          ]
        },
        {
          "type": "class",
          "value": "ChatRoom",
          "children": [
            {
              "type": "attribute",
              "value": "roomId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "participants",
              "visibility": "-",
              "data_type": "List<User>"
            },
            {
              "type": "attribute",
              "value": "messages",
              "visibility": "-",
              "data_type": "List<Message>"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Message"
                }
              ],
              "label": "contains",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "ChatRoom"
                }
              ],
              "label": "participates",
              "multiplicity1": "0..*",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Teachers should be able to upload materials to their courses, which are accessible to enrolled students.",
    "PlantUML": "class Material {\n  -materialId: String\n  -title: String\n  -type: MaterialType\n  -linkOrFile: String\n}\n\nCourse \"1\" -- \"0..*\" Material : provides \n",
    "Model": "H8",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Material",
          "children": [
            {
              "type": "attribute",
              "value": "materialId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "type",
              "visibility": "-",
              "data_type": "MaterialType"
            },
            {
              "type": "attribute",
              "value": "linkOrFile",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Course",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Material"
                }
              ],
              "label": "provides",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Teachers can grade student submissions, and these grades are stored for future viewing and analytics.",
    "PlantUML": "class Grade {\n  -gradeId: String\n  -score: float\n  -feedback: String\n  -submission: Submission\n}\n\nSubmission \"1\" -- \"0..1\" Grade : evaluatedBy ",
    "Model": "H8",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Grade",
          "children": [
            {
              "type": "attribute",
              "value": "gradeId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "score",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "attribute",
              "value": "feedback",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "submission",
              "visibility": "-",
              "data_type": "Submission"
            }
          ]
        },
        {
          "type": "class",
          "value": "Submission",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Grade"
                }
              ],
              "label": "evaluatedBy",
              "multiplicity1": "1",
              "multiplicity2": "0..1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system should notify users about upcoming sessions, assignment deadlines, or messages.",
    "PlantUML": "class Notification {\n  -notificationId: String\n  -content: String\n  -timestamp: DateTime\n  -user: User\n  -isRead: boolean\n}\n\nUser \"1\" -- \"0..*\" Notification : receives",
    "Model": "H8",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Notification",
          "children": [
            {
              "type": "attribute",
              "value": "notificationId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "content",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "user",
              "visibility": "-",
              "data_type": "User"
            },
            {
              "type": "attribute",
              "value": "isRead",
              "visibility": "-",
              "data_type": "boolean"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Notification"
                }
              ],
              "label": "receives",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Attendance for each virtual session a student joins must be automatically tracked.",
    "PlantUML": "class Attendance {\n  -attendanceId: String\n  -student: Student\n  -session: VirtualSession\n  -status: AttendanceStatus\n}\n\nStudent \"1\" -- \"0..*\" Attendance : has >\nVirtualSession \"1\" -- \"0..*\" Attendance : records >\n",
    "Model": "H8",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Attendance",
          "children": [
            {
              "type": "attribute",
              "value": "attendanceId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "student",
              "visibility": "-",
              "data_type": "Student"
            },
            {
              "type": "attribute",
              "value": "session",
              "visibility": "-",
              "data_type": "VirtualSession"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "AttendanceStatus"
            }
          ]
        },
        {
          "type": "class",
          "value": "Student",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Attendance"
                }
              ],
              "label": "has >",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "VirtualSession",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Attendance"
                }
              ],
              "label": "records >",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The Clinic Appointment & Prescription System will support patients, doctors, and administrators, each with specific attributes and roles, and each user must be able to log in and manage their profile.",
    "PlantUML": "class User {\n  -userID: String\n  -name: String\n  -email: String\n  -password: String\n  +login(): void\n  +updateProfile(): void\n}\n\nUser <|-- Patient\nUser <|-- Doctor\nUser <|-- Admin\n\n",
    "Model": "H9",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "login()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "updateProfile()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Patient"
                }
              ]
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Doctor"
                }
              ]
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Admin"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Patient",
          "children": []
        },
        {
          "type": "class",
          "value": "Doctor",
          "children": []
        },
        {
          "type": "class",
          "value": "Admin",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Doctors must have a profile detailing their specialization, available timings, and credentials for patients to view and use for booking appointments.",
    "PlantUML": "class DoctorProfile {\n  -specialization: String\n  -availability: String\n  -experienceYears: int\n  +updateAvailability(): void\n}\n\nDoctor o-- DoctorProfile\n",
    "Model": "H9",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "DoctorProfile",
          "children": [
            {
              "type": "attribute",
              "value": "specialization",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "availability",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "experienceYears",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "method",
              "value": "updateAvailability()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Doctor",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "DoctorProfile"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Patients can view available time slots and schedule appointments with doctors, and the system prevents overlapping appointments.",
    "PlantUML": "class Appointment {\n  -appointmentID: String\n  -dateTime: DateTime\n  -status: String\n  +book(): void\n  +cancel(): void\n}\n\nPatient --> Appointment\nDoctor --> Appointment\n",
    "Model": "H9",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Appointment",
          "children": [
            {
              "type": "attribute",
              "value": "appointmentID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "dateTime",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "book()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "cancel()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Patient",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Appointment"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Doctor",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Appointment"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Doctors can issue electronic prescriptions linked to appointments, with prescriptions containing details on medicines, dosage, and notes.",
    "PlantUML": "class Prescription {\n  -prescriptionID: String\n  -dateIssued: Date\n  -notes: String\n  +generatePDF(): void\n}\n\nclass Medicine {\n  -name: String\n  -dosage: String\n  -duration: String\n}\n\nPrescription \"1\" --> \"1..*\" Medicine\nAppointment \"1\" --> Prescription\n",
    "Model": "H9",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Prescription",
          "children": [
            {
              "type": "attribute",
              "value": "prescriptionID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "dateIssued",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "notes",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "generatePDF()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Medicine"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "1..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Medicine",
          "children": [
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "dosage",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "duration",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Appointment",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Prescription"
                }
              ],
              "multiplicity1": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system maintains a record of a patient's past appointments and prescriptions for easy reference by doctors.",
    "PlantUML": "class MedicalHistory {\n  -historyID: String\n  +getHistory(): void\n}\n\nPatient --> MedicalHistory\nMedicalHistory \"1\" --> \"0..*\" Appointment\nMedicalHistory \"1\" --> \"0..*\" Prescription\n",
    "Model": "H9",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "MedicalHistory",
          "children": [
            {
              "type": "attribute",
              "value": "historyID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "getHistory()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Appointment"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Prescription"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Patient",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "MedicalHistory"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Appointment",
          "children": []
        },
        {
          "type": "class",
          "value": "Prescription",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The system sends reminders to patients for upcoming appointments and prescription refills via email or SMS.",
    "PlantUML": "class Notification {\n  -notificationID: String\n  -type: String\n  -message: String\n  +send(): void\n}\n\nUser --> \"0..*\" Notification\nAppointment --> Notification : \"Reminder\"\nPrescription --> Notification : \"Refill Alert\"\n",
    "Model": "H9",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Notification",
          "children": [
            {
              "type": "attribute",
              "value": "notificationID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "type",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "message",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "send()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Notification"
                }
              ],
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Appointment",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Notification"
                }
              ],
              "label": "\"Reminder\""
            }
          ]
        },
        {
          "type": "class",
          "value": "Prescription",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Notification"
                }
              ],
              "label": "\"Refill Alert\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Administrators can manage users, view reports, and oversee system operations, including approving doctor registrations.",
    "PlantUML": "class AdminPanel {\n  +manageUsers(): void\n  +viewReports(): void\n  +approveDoctor(): void\n}\n\nAdmin --> AdminPanel\n",
    "Model": "H9",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AdminPanel",
          "children": [
            {
              "type": "method",
              "value": "manageUsers()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "viewReports()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "approveDoctor()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Admin",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "AdminPanel"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Each completed appointment generates an invoice, which includes consultation charges and medicine costs.",
    "PlantUML": "class Invoice {\n  -invoiceID: String\n  -amount: Float\n  -dateIssued: Date\n  +generateInvoice(): void\n}\n\nAppointment --> Invoice\nPrescription --> Invoice\nPatient --> Invoice\n",
    "Model": "H9",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Invoice",
          "children": [
            {
              "type": "attribute",
              "value": "invoiceID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "amount",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "attribute",
              "value": "dateIssued",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "method",
              "value": "generateInvoice()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Appointment",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Invoice"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Prescription",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Invoice"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Patient",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Invoice"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Patients have the ability to search for doctors by name, specialization, and availability.",
    "PlantUML": "class SearchEngine {\n  +searchByName(name: String): List<Doctor>\n  +searchBySpecialization(spec: String): List<Doctor>\n  +filterByAvailability(): List<Doctor>\n}\n\nPatient --> SearchEngine\n",
    "Model": "H9",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "SearchEngine",
          "children": [
            {
              "type": "method",
              "value": "searchByName(name: String)",
              "visibility": "+",
              "data_type": "List<Doctor>"
            },
            {
              "type": "method",
              "value": "searchBySpecialization(spec: String)",
              "visibility": "+",
              "data_type": "List<Doctor>"
            },
            {
              "type": "method",
              "value": "filterByAvailability()",
              "visibility": "+",
              "data_type": "List<Doctor>"
            }
          ]
        },
        {
          "type": "class",
          "value": "Patient",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "SearchEngine"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "All critical operations, such as creating appointments or editing prescriptions, are logged for security and auditing purposes.",
    "PlantUML": "class AuditLog {\n  -logID: String\n  -timestamp: DateTime\n  -action: String\n  -performedBy: String\n  +record(): void\n}\n\nUser  \"1\"--> \"0..*\" AuditLog\nAppointment --> AuditLog\nPrescription --> AuditLog\n",
    "Model": "H9",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AuditLog",
          "children": [
            {
              "type": "attribute",
              "value": "logID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "action",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "performedBy",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "record()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "AuditLog"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Appointment",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "AuditLog"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Prescription",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "AuditLog"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The Virtual Reality Content Platform must allow users to securely register, log in, and manage their profiles; authentication is required for content access and personalization.",
    "PlantUML": "class User {\n  +userID: String\n  +username: String\n  +email: String\n  +password: String\n  +login(): boolean\n  +logout(): void\n  +updateProfile(): void\n}",
    "Model": "H10",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "username",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "login()",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "method",
              "value": "logout()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "updateProfile()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Creators can upload 3D/VR content, add metadata, and manage their uploaded content through a dedicated dashboard.",
    "PlantUML": "class Content {\n  +contentID: String\n  +title: String\n  +description: String\n  +uploadDate: Date\n  +upload(): void\n  +edit(): void\n  +delete(): void\n}\n\nUser \"1\" -- \"*\" Content : uploads",
    "Model": "H10",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Content",
          "children": [
            {
              "type": "attribute",
              "value": "contentID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "uploadDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "method",
              "value": "upload()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "edit()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "delete()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Content"
                }
              ],
              "label": "uploads",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Users can stream and interact with VR content using either a VR-compatible viewer or a standard display.",
    "PlantUML": "class VRPlayer {\n  +play(contentID: String): void\n  +pause(): void\n  +stop(): void\n}\n\nContent \"1\" -- \"1\" VRPlayer : \"used by\"",
    "Model": "H10",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "VRPlayer",
          "children": [
            {
              "type": "method",
              "value": "play(contentID: String)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "pause()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "stop()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Content",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "VRPlayer"
                }
              ],
              "label": "\"used by\"",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Users can like, comment on, and rate VR content to boost engagement and improve content recommendations.",
    "PlantUML": "class Feedback {\n  +feedbackID: String\n  +rating: int\n  +comment: String\n  +date: Date\n}\n\nUser \"1\" -- \"*\" Feedback : gives \nContent \"1\" -- \"*\" Feedback : receives ",
    "Model": "H10",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Feedback",
          "children": [
            {
              "type": "attribute",
              "value": "feedbackID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "rating",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "comment",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "date",
              "visibility": "+",
              "data_type": "Date"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Feedback"
                }
              ],
              "label": "gives",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Content",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Feedback"
                }
              ],
              "label": "receives",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system recommends similar or trending VR content based on user preferences and feedback.",
    "PlantUML": "class RecommendationEngine {\n  +generateRecommendations(userID: String): List<Content>\n}\n\nUser \"1\" -- \"1\" RecommendationEngine : \"personalized for\"",
    "Model": "H10",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "RecommendationEngine",
          "children": [
            {
              "type": "method",
              "value": "generateRecommendations(userID: String)",
              "visibility": "+",
              "data_type": "List<Content>"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "RecommendationEngine"
                }
              ],
              "label": "\"personalized for\"",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Each VR content item can be categorized and tagged to improve searchability and recommendation accuracy.",
    "PlantUML": "class Category {\n  +categoryID: String\n  +name: String\n}\n\nclass Tag {\n  +tagID: String\n  +name: String\n}\n\nContent \"*\" -- \"*\" Category : \"belongs to\"\nContent \"*\" -- \"*\" Tag : \"tagged with\"",
    "Model": "H10",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Category",
          "children": [
            {
              "type": "attribute",
              "value": "categoryID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Tag",
          "children": [
            {
              "type": "attribute",
              "value": "tagID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Content",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Category"
                }
              ],
              "label": "\"belongs to\"",
              "multiplicity1": "*",
              "multiplicity2": "*"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Tag"
                }
              ],
              "label": "\"tagged with\"",
              "multiplicity1": "*",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The platform supports premium subscriptions and enables revenue sharing for creators based on content views or purchases.",
    "PlantUML": "class Subscription {\n  +subscriptionID: String\n  +planType: String\n  +startDate: Date\n  +endDate: Date\n}\n\nUser \"1\" -- \"0..1\" Subscription : has\n\nclass Payment {\n  +paymentID: String\n  +amount: double\n  +date: Date\n}\n\nSubscription \"1\" -- \"*\" Payment : generates",
    "Model": "H10",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Subscription",
          "children": [
            {
              "type": "attribute",
              "value": "subscriptionID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "planType",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "startDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "endDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Payment"
                }
              ],
              "label": "generates",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Payment",
          "children": [
            {
              "type": "attribute",
              "value": "paymentID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "amount",
              "visibility": "+",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "date",
              "visibility": "+",
              "data_type": "Date"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Subscription"
                }
              ],
              "label": "has",
              "multiplicity1": "1",
              "multiplicity2": "0..1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Administrators can manage users and content, and access analytics for platform performance and compliance.",
    "PlantUML": "class Admin {\n  +adminID: String\n  +manageUsers(): void\n  +moderateContent(): void\n  +viewAnalytics(): void\n}\n\nAdmin \"1\" -- \"*\" User : manages \nAdmin \"1\" -- \"*\" Content : moderates",
    "Model": "H10",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Admin",
          "children": [
            {
              "type": "attribute",
              "value": "adminID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "manageUsers()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "moderateContent()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "viewAnalytics()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "manages",
              "multiplicity1": "1",
              "multiplicity2": "*"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Content"
                }
              ],
              "label": "moderates",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        },
        {
          "type": "class",
          "value": "Content",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The platform must support various VR headsets and automatically revert to a desktop or mobile view if VR is unavailable.",
    "PlantUML": "class Device {\n  +deviceID: String\n  +type: String\n  +isVRCapable: boolean\n}\n\nUser \"1\" -- \"*\" Device : uses",
    "Model": "H10",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Device",
          "children": [
            {
              "type": "attribute",
              "value": "deviceID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "type",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "isVRCapable",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Device"
                }
              ],
              "label": "uses",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system tracks user viewing sessions for analytics and enables users to resume or rewatch content.",
    "PlantUML": "class Session {\n  +sessionID: String\n  +startTime: Date\n  +endTime: Date\n  +contentID: String\n}\n\nUser \"1\" -- \"*\" Session : watches\nContent \"1\" -- \"*\" Session : viewed in",
    "Model": "H10",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Session",
          "children": [
            {
              "type": "attribute",
              "value": "sessionID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "startTime",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "endTime",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "contentID",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Session"
                }
              ],
              "label": "watches",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Content",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Session"
                }
              ],
              "label": "viewed in",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The auction system will allow users to register using an email and password, and they can log in securely through authentication.",
    "PlantUML": "class User {\n  -userId: String\n  -email: String\n  -password: String\n  +register(): void\n  +login(): boolean\n}\n",
    "Model": "H11",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "register()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "login()",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Users will be able to search for auctions using keywords and view details such as item name, current bid, and the auction's end time.",
    "PlantUML": "class Auction {\n  -auctionId: String\n  -itemName: String\n  -currentBid: double\n  -endTime: DateTime\n  +getDetails(): String\n}\n\nUser --> Auction : searches/views\n",
    "Model": "H11",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Auction",
          "children": [
            {
              "type": "attribute",
              "value": "auctionId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "itemName",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "currentBid",
              "visibility": "-",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "endTime",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "method",
              "value": "getDetails()",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Auction"
                }
              ],
              "label": "searches/views"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Users have the option to configure a snipe, which is an automated bid placed just before an auction ends.",
    "PlantUML": "class Snipe {\n  -snipeId: String\n  -maxBid: double\n  -snipeTime: DateTime\n  +configureSnipe(): void\n}\n\nUser --> Snipe : configures\nSnipe --> Auction : targets\n",
    "Model": "H11",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Snipe",
          "children": [
            {
              "type": "attribute",
              "value": "snipeId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "maxBid",
              "visibility": "-",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "snipeTime",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "method",
              "value": "configureSnipe()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Auction"
                }
              ],
              "label": "targets"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Snipe"
                }
              ],
              "label": "configures"
            }
          ]
        },
        {
          "type": "class",
          "value": "Auction",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The system will automatically execute a snipe, placing a bid milliseconds before the auction concludes.",
    "PlantUML": "class BiddingEngine {\n  +executeSnipe(snipe: Snipe): boolean\n}\n\nBiddingEngine --> Snipe : uses\n",
    "Model": "H11",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "BiddingEngine",
          "children": [
            {
              "type": "method",
              "value": "executeSnipe(snipe: Snipe)",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Snipe"
                }
              ],
              "label": "uses"
            }
          ]
        },
        {
          "type": "class",
          "value": "Snipe",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The system will monitor auction end times and provide real-time notifications to the Bidding Engine.",
    "PlantUML": "class AuctionMonitor {\n  +trackAuction(auction: Auction): void\n  +notifyBiddingEngine(): void\n}\n\nAuctionMonitor --> Auction : monitors\nAuctionMonitor --> BiddingEngine : notifies\n",
    "Model": "H11",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AuctionMonitor",
          "children": [
            {
              "type": "method",
              "value": "trackAuction(auction: Auction)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "notifyBiddingEngine()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Auction"
                }
              ],
              "label": "monitors"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "BiddingEngine"
                }
              ],
              "label": "notifies"
            }
          ]
        },
        {
          "type": "class",
          "value": "Auction",
          "children": []
        },
        {
          "type": "class",
          "value": "BiddingEngine",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "A bid history will be maintained by the system for each user and auction, storing all placed bids.",
    "PlantUML": "class Bid {\n  -bidId: String\n  -amount: double\n  -timestamp: DateTime\n}\n\nUser --> Bid : places\nBid --> Auction : for\n",
    "Model": "H11",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Bid",
          "children": [
            {
              "type": "attribute",
              "value": "bidId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "amount",
              "visibility": "-",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Auction"
                }
              ],
              "label": "for"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Bid"
                }
              ],
              "label": "places"
            }
          ]
        },
        {
          "type": "class",
          "value": "Auction",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Users will receive email notifications regarding the success or failure of their snipes, as well as any changes to an auction.",
    "PlantUML": "class NotificationService {\n  +sendEmail(user: User, message: String): void\n}\n\nNotificationService --> User : notifies\n",
    "Model": "H11",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "NotificationService",
          "children": [
            {
              "type": "method",
              "value": "sendEmail(user: User, message: String)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "notifies"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "To ensure bid timing accuracy, the system will synchronize with an NTP server.",
    "PlantUML": "class TimeSyncService {\n  +syncTime(): DateTime\n}\nBiddingEngine --> TimeSyncService : requests accurate time\n",
    "Model": "H11",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "TimeSyncService",
          "children": [
            {
              "type": "method",
              "value": "syncTime()",
              "visibility": "+",
              "data_type": "DateTime"
            }
          ]
        },
        {
          "type": "class",
          "value": "BiddingEngine",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "TimeSyncService"
                }
              ],
              "label": "requests accurate time"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system will integrate with external auction sites via APIs to retrieve auction data.",
    "PlantUML": "class AuctionAPI {\n  +fetchAuctions(): List<Auction>\n  +placeBid(auctionId: String, amount: double): boolean\n}\n\nAuctionAPI <|.. AuctionMonitor\nAuctionAPI <|.. BiddingEngine\n",
    "Model": "H11",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AuctionAPI",
          "children": [
            {
              "type": "method",
              "value": "fetchAuctions()",
              "visibility": "+",
              "data_type": "List<Auction>"
            },
            {
              "type": "method",
              "value": "placeBid(auctionId: String, amount: double)",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "<|..",
              "children": [
                {
                  "type": "class",
                  "value": "AuctionMonitor"
                }
              ]
            },
            {
              "type": "relation",
              "value": "<|..",
              "children": [
                {
                  "type": "class",
                  "value": "BiddingEngine"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "AuctionMonitor",
          "children": []
        },
        {
          "type": "class",
          "value": "BiddingEngine",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Administrators have the ability to view users, monitor system health, and manually override auction snipes.",
    "PlantUML": "class Admin {\n  -adminId: String\n  +viewUsers(): List<User>\n  +overrideSnipe(snipe: Snipe): void\n}\n\nAdmin --> User : manages\nAdmin --> Snipe : overrides\n",
    "Model": "H11",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Admin",
          "children": [
            {
              "type": "attribute",
              "value": "adminId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "viewUsers()",
              "visibility": "+",
              "data_type": "List<User>"
            },
            {
              "type": "method",
              "value": "overrideSnipe(snipe: Snipe)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "manages"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Snipe"
                }
              ],
              "label": "overrides"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        },
        {
          "type": "class",
          "value": "Snipe",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "In a digital signature verification system, users will be able to upload a document along with its digital signature file.",
    "PlantUML": "class User {\n  +uploadDocument(doc: Document, signature: Signature): void\n}\nclass Document {\n}\nclass Signature {\n}\n\nUser --> Document\nUser --> Signature\n",
    "Model": "H12",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "method",
              "value": "uploadDocument(doc: Document, signature: Signature)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Document"
                }
              ]
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Signature"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Document",
          "children": []
        },
        {
          "type": "class",
          "value": "Signature",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The system will validate the digital signature using the public key associated with the user.",
    "PlantUML": "class Validator {\n  +validateSignature(doc: Document, sig: Signature, key: PublicKey): boolean\n}\nclass PublicKey {\n}\n\nValidator --> Document\nValidator --> Signature\nValidator --> PublicKey\n",
    "Model": "H12",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Validator",
          "children": [
            {
              "type": "method",
              "value": "validateSignature(doc: Document, sig: Signature, key: PublicKey)",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Document"
                }
              ]
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Signature"
                }
              ]
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "PublicKey"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "PublicKey",
          "children": []
        },
        {
          "type": "class",
          "value": "Document",
          "children": []
        },
        {
          "type": "class",
          "value": "Signature",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "User credentials and public keys will be securely stored in a repository.",
    "PlantUML": "class UserRepository {\n  +getUserCredentials(username: String): Credentials\n  +getPublicKey(userId: String): PublicKey\n}\nclass Credentials{\n}\n\nUser --> UserRepository\nUserRepository --> PublicKey\nUserRepository --> Credentials\n",
    "Model": "H12",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "UserRepository",
          "children": [
            {
              "type": "method",
              "value": "getUserCredentials(username: String)",
              "visibility": "+",
              "data_type": "Credentials"
            },
            {
              "type": "method",
              "value": "getPublicKey(userId: String)",
              "visibility": "+",
              "data_type": "PublicKey"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "PublicKey"
                }
              ]
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Credentials"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Credentials",
          "children": []
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "UserRepository"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "PublicKey",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The system will display verification results, including the status, signer identity, and timestamp.",
    "PlantUML": "class VerificationResult {\n  -status: boolean\n  -signer: String\n  -timestamp: DateTime\n  +displayResult(): void\n}\nValidator --> VerificationResult\n",
    "Model": "H12",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "VerificationResult",
          "children": [
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "boolean"
            },
            {
              "type": "attribute",
              "value": "signer",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "method",
              "value": "displayResult()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Validator",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "VerificationResult"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "For auditing purposes, the system will log each verification request.",
    "PlantUML": "class AuditLogger {\n  +logVerification(userId: String, result: VerificationResult): void\n}\n\nValidator --> AuditLogger\nAuditLogger --> VerificationResult\n",
    "Model": "H12",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AuditLogger",
          "children": [
            {
              "type": "method",
              "value": "logVerification(userId: String, result: VerificationResult)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "VerificationResult"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Validator",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "AuditLogger"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "VerificationResult",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The system will support importing certificates in X.509 format for signature validation.",
    "PlantUML": "class Certificate {\n  -format: String\n  +loadCertificate(path: String): void\n}\nCertificate <|-- X509Certificate\n\nValidator --> Certificate\n",
    "Model": "H12",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Certificate",
          "children": [
            {
              "type": "attribute",
              "value": "format",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "loadCertificate(path: String)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "X509Certificate"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "X509Certificate",
          "children": []
        },
        {
          "type": "class",
          "value": "Validator",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Certificate"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Users will be notified if a signature is invalid or if the certificate has expired.",
    "PlantUML": "class NotificationService {\n  +notifyUser(user: User, message: String): void\n}\n\nValidator --> NotificationService\nNotificationService --> User\n",
    "Model": "H12",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "NotificationService",
          "children": [
            {
              "type": "method",
              "value": "notifyUser(user: User, message: String)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Validator",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "NotificationService"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Access to verification features will be restricted to authenticated users only.",
    "PlantUML": "class AuthService {\n  +authenticate(username: String, password: String): boolean\n}\nUser --> AuthService\n",
    "Model": "H12",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AuthService",
          "children": [
            {
              "type": "method",
              "value": "authenticate(username: String, password: String)",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "AuthService"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "If applicable, the system will parse the uploaded document to extract embedded signature data.",
    "PlantUML": "class DocumentParser {\n  +extractSignature(doc: Document): Signature\n}\n\nDocumentParser --> Document\nDocumentParser --> Signature\n",
    "Model": "H12",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "DocumentParser",
          "children": [
            {
              "type": "method",
              "value": "extractSignature(doc: Document)",
              "visibility": "+",
              "data_type": "Signature"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Document"
                }
              ]
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Signature"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Document",
          "children": []
        },
        {
          "type": "class",
          "value": "Signature",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Verification reports, downloadable in PDF format, will be generated by the system.",
    "PlantUML": "class ReportGenerator {\n  +generatePDF(result: VerificationResult): File\n}\nReportGenerator --> VerificationResult\n",
    "Model": "H12",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ReportGenerator",
          "children": [
            {
              "type": "method",
              "value": "generatePDF(result: VerificationResult)",
              "visibility": "+",
              "data_type": "File"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "VerificationResult"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "VerificationResult",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "An email system must allow marketers to create, edit, and delete multiple email campaigns.",
    "PlantUML": "class Campaign {\n  -id: String\n  -name: String\n  -createdDate: Date\n  -status: String\n  +create()\n  +edit()\n  +delete()\n}\n",
    "Model": "H13",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Campaign",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "createdDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "create()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "edit()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "delete()",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Each campaign should consist of multiple emails scheduled to be sent at various times.",
    "PlantUML": "class Email {\n  -id: String\n  -subject: String\n  -body: String\n  -sendTime: DateTime\n  +schedule()\n  +edit()\n}\n\nCampaign \"1\" *-- \"0..*\" Email : contains \n",
    "Model": "H13",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Email",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "subject",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "body",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "sendTime",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "method",
              "value": "schedule()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "edit()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Campaign",
          "children": [
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Email"
                }
              ],
              "label": "contains",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Emails must be sent to a specific contact list selected by the marketer.",
    "PlantUML": "class ContactList {\n  -id: String\n  -name: String\n  +addContact()\n  +removeContact()\n}\n\nEmail \"1\" --> \"1\" ContactList : targets \n",
    "Model": "H13",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ContactList",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "addContact()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "removeContact()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Email",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "ContactList"
                }
              ],
              "label": "targets",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Each contact list includes numerous individual contacts with personal details.",
    "PlantUML": "class Contact {\n  -id: String\n  -email: String\n  -firstName: String\n  -lastName: String\n  +updateInfo()\n}\n\nContactList \"1\" *-- \"0..*\" Contact : includes \n",
    "Model": "H13",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Contact",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "firstName",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "lastName",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "updateInfo()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "ContactList",
          "children": [
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Contact"
                }
              ],
              "label": "includes",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system must track the delivery status of each email (sent, failed, opened) for each recipient.",
    "PlantUML": "class DeliveryStatus {\n  -status: String\n  -timestamp: DateTime\n}\n\nContact \"1\" --> \"0..*\" DeliveryStatus : has \nEmail \"1\" --> \"0..*\" DeliveryStatus : results in \n",
    "Model": "H13",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "DeliveryStatus",
          "children": [
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "-",
              "data_type": "DateTime"
            }
          ]
        },
        {
          "type": "class",
          "value": "Contact",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "DeliveryStatus"
                }
              ],
              "label": "has",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Email",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "DeliveryStatus"
                }
              ],
              "label": "results in",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Users should have the ability to segment contacts based on criteria such as location or activity.",
    "PlantUML": "class Segment {\n  -id: String\n  -criteria: String\n  +applyFilter()\n}\n\nSegment \"1\" --> \"0..*\" Contact : filters \n",
    "Model": "H13",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Segment",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "criteria",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "applyFilter()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Contact"
                }
              ],
              "label": "filters",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Contact",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The system must support scheduling campaigns with specified start and end dates.",
    "PlantUML": "Campaign --> Email : schedules \nCampaign --> Segment : targets ",
    "Model": "H13",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Campaign",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Email"
                }
              ],
              "label": "schedules"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Segment"
                }
              ],
              "label": "targets"
            }
          ]
        },
        {
          "type": "class",
          "value": "Email",
          "children": []
        },
        {
          "type": "class",
          "value": "Segment",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "User authentication and different roles (e.g., admin, marketer) must be supported by the system.",
    "PlantUML": "class User {\n  -id: String\n  -username: String\n  -role: String\n  +login()\n  +logout()\n}\n\nUser \"0..*\" --> \"0..*\" Campaign : manages\n",
    "Model": "H13",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "username",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "role",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "login()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "logout()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Campaign"
                }
              ],
              "label": "manages",
              "multiplicity1": "0..*",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Campaign",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Campaign performance metrics (open rate, click rate) should be stored and accessible.",
    "PlantUML": "class CampaignMetrics {\n  -openRate: Float\n  -clickRate: Float\n  +calculate()\n}\n\nCampaign \"1\" --> \"1\" CampaignMetrics : generates ",
    "Model": "H13",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "CampaignMetrics",
          "children": [
            {
              "type": "attribute",
              "value": "openRate",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "attribute",
              "value": "clickRate",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "method",
              "value": "calculate()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Campaign",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "CampaignMetrics"
                }
              ],
              "label": "generates",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "System administrators must have the ability to audit user actions, such as campaign creation and email sending.",
    "PlantUML": "class AuditLog {\n  -action: String\n  -timestamp: DateTime\n  -userId: String\n}\n\nUser \"1\" --> \"0..*\" AuditLog : logs \n",
    "Model": "H13",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AuditLog",
          "children": [
            {
              "type": "attribute",
              "value": "action",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "userId",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "AuditLog"
                }
              ],
              "label": "logs",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "For a Customer Feedback and Survey Tool, users can register and authenticate using their email and password; a distinction will be made between admins and regular users.",
    "PlantUML": "class User {\n  +userId: String\n  +email: String\n  +password: String\n  +role: String\n}\n\nclass AuthService {\n  +registerUser(email, password)\n  +authenticateUser(email, password)\n}\n\nUser --> AuthService : uses\n",
    "Model": "H14",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "role",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "AuthService"
                }
              ],
              "label": "uses"
            }
          ]
        },
        {
          "type": "class",
          "value": "AuthService",
          "children": [
            {
              "type": "method",
              "value": "registerUser(email, password)",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "authenticateUser(email, password)",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Users can create surveys by adding a title, description, and selecting question types (MCQ, text, rating).",
    "PlantUML": "class Survey {\n  +surveyId: String\n  +title: String\n  +description: String\n  +createdDate: Date\n}\n\nclass Question {\n  +questionId: String\n  +text: String\n  +type: String\n}\n\nSurvey \"1\" *-- \"*\" Question : contains\nUser \"1\" --> \"*\" Survey : creates\n",
    "Model": "H14",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Survey",
          "children": [
            {
              "type": "attribute",
              "value": "surveyId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "createdDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Question"
                }
              ],
              "label": "contains",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Question",
          "children": [
            {
              "type": "attribute",
              "value": "questionId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "text",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "type",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Survey"
                }
              ],
              "label": "creates",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Surveys can be scheduled for a future date and distributed via a link or email to target respondents.",
    "PlantUML": "class Scheduler {\n  +scheduleSurvey(surveyId, dateTime)\n}\n\nclass Distribution {\n  +sendLink(surveyId)\n  +sendEmail(surveyId, recipients)\n}\n\nSurvey --> Scheduler : \"scheduled by\"\nSurvey --> Distribution : \"distributed via\"\n",
    "Model": "H14",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Scheduler",
          "children": [
            {
              "type": "method",
              "value": "scheduleSurvey(surveyId, dateTime)",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Distribution",
          "children": [
            {
              "type": "method",
              "value": "sendLink(surveyId)",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "sendEmail(surveyId, recipients)",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Survey",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Scheduler"
                }
              ],
              "label": "\"scheduled by\""
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Distribution"
                }
              ],
              "label": "\"distributed via\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Respondents can provide feedback by answering survey questions without needing to log in.",
    "PlantUML": "class Response {\n  +responseId: String\n  +submittedAt: Date\n}\n\nclass Answer {\n  +answerId: String\n  +value: String\n}\n\nResponse \"1\" *-- \"*\" Answer : contains\nQuestion \"1\" <-- \"*\" Answer : \"answered by\"\nSurvey \"1\" <-- \"*\" Response : receives\n",
    "Model": "H14",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Response",
          "children": [
            {
              "type": "attribute",
              "value": "responseId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "submittedAt",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Answer"
                }
              ],
              "label": "contains",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Answer",
          "children": [
            {
              "type": "attribute",
              "value": "answerId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "value",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Question",
          "children": [
            {
              "type": "relation",
              "value": "<--",
              "children": [
                {
                  "type": "class",
                  "value": "Answer"
                }
              ],
              "label": "\"answered by\"",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Survey",
          "children": [
            {
              "type": "relation",
              "value": "<--",
              "children": [
                {
                  "type": "class",
                  "value": "Response"
                }
              ],
              "label": "receives",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Administrators can view aggregated statistics such as average ratings, response rates, and charts.",
    "PlantUML": "class AnalysisService {\n  +generateStats(surveyId)\n  +generateCharts(surveyId)\n}\n\nSurvey --> AnalysisService : analyzed by\n",
    "Model": "H14",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AnalysisService",
          "children": [
            {
              "type": "method",
              "value": "generateStats(surveyId)",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "generateCharts(surveyId)",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Survey",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "AnalysisService"
                }
              ],
              "label": "analyzed by"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Users can export results as CSV or PDF reports for offline analysis or presentation.",
    "PlantUML": "class ExportService {\n  +exportToCSV(surveyId)\n  +exportToPDF(surveyId)\n}\n\nSurvey --> ExportService : exported by\n",
    "Model": "H14",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ExportService",
          "children": [
            {
              "type": "method",
              "value": "exportToCSV(surveyId)",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "exportToPDF(surveyId)",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Survey",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "ExportService"
                }
              ],
              "label": "exported by"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "A dashboard will be provided by the system, displaying created surveys, participation rates, and overall feedback scores.",
    "PlantUML": "class Dashboard {\n  +showUserSurveys(userId)\n  +showMetrics(surveyId)\n}\n\nUser --> Dashboard : views\nDashboard --> Survey : shows summary\nDashboard --> AnalysisService : \"uses data\"\n",
    "Model": "H14",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Dashboard",
          "children": [
            {
              "type": "method",
              "value": "showUserSurveys(userId)",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "showMetrics(surveyId)",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Survey"
                }
              ],
              "label": "shows summary"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "AnalysisService"
                }
              ],
              "label": "\"uses data\""
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Dashboard"
                }
              ],
              "label": "views"
            }
          ]
        },
        {
          "type": "class",
          "value": "Survey",
          "children": []
        },
        {
          "type": "class",
          "value": "AnalysisService",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Users will receive notifications about new responses, survey completion, or any scheduling issues.",
    "PlantUML": "class NotificationService {\n  +notifyNewResponse(surveyId)\n  +notifyCompletion(surveyId)\n  +notifyError(errorMsg)\n}\n\nUser --> NotificationService : receives\nSurvey --> NotificationService : triggers\n",
    "Model": "H14",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "NotificationService",
          "children": [
            {
              "type": "method",
              "value": "notifyNewResponse(surveyId)",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "notifyCompletion(surveyId)",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "notifyError(errorMsg)",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "NotificationService"
                }
              ],
              "label": "receives"
            }
          ]
        },
        {
          "type": "class",
          "value": "Survey",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "NotificationService"
                }
              ],
              "label": "triggers"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Depending on their roles (admin, creator), only authorized users can edit, view, or delete surveys.",
    "PlantUML": "class Permission {\n  +canEdit: Boolean\n  +canView: Boolean\n  +canDelete: Boolean\n}\n\nUser --> Permission : has\nPermission --> Survey : \"applies to\"\n",
    "Model": "H14",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Permission",
          "children": [
            {
              "type": "attribute",
              "value": "canEdit",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "attribute",
              "value": "canView",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "attribute",
              "value": "canDelete",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Survey"
                }
              ],
              "label": "\"applies to\""
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Permission"
                }
              ],
              "label": "has"
            }
          ]
        },
        {
          "type": "class",
          "value": "Survey",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Survey creators can enable anonymous feedback, which hides user identities.",
    "PlantUML": "Survey {\n  +isAnonymous: Boolean\n}\n\nResponse {\n  +respondentId: String\n}\nSurvey --> Response : collects\n",
    "Model": "H14",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Survey",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Response"
                }
              ],
              "label": "collects"
            }
          ]
        },
        {
          "type": "class",
          "value": "Response",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "In a Freelance Marketplace Platform, users can register as either freelancers or clients and log into the system securely.",
    "PlantUML": "class User {\n  -id: int\n  -username: string\n  -email: string\n  -password: string\n}\n\nclass Freelancer{\n}\n\nclass Client{\n}\n\nUser <|-- Freelancer\nUser <|-- Client\n\n",
    "Model": "H15",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "username",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Freelancer"
                }
              ]
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Client"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Freelancer",
          "children": []
        },
        {
          "type": "class",
          "value": "Client",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Users are able to manage their profiles, including their bio, profile photo, and contact information.",
    "PlantUML": "User \"1\" o-- \"1\" Profile\n\nclass Profile {\n  -bio: string\n  -profilePhoto: string\n  -contactInfo: string\n}\n",
    "Model": "H15",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Profile",
          "children": [
            {
              "type": "attribute",
              "value": "bio",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "profilePhoto",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "contactInfo",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "Profile"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Clients can post new job listings that include details such as a description, budget, and deadline.",
    "PlantUML": "Client \"1\" o-- \"0..*\" Job\n\nclass Job {\n  -jobId: int\n  -title: string\n  -description: string\n  -budget: float\n  -deadline: Date\n}\n",
    "Model": "H15",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Job",
          "children": [
            {
              "type": "attribute",
              "value": "jobId",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "budget",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "attribute",
              "value": "deadline",
              "visibility": "-",
              "data_type": "Date"
            }
          ]
        },
        {
          "type": "class",
          "value": "Client",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "Job"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Freelancers can browse and filter job listings based on category, budget, and date.",
    "PlantUML": "Freelancer \"1\" --> \"0..*\" Job : browse\n",
    "Model": "H15",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Freelancer",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Job"
                }
              ],
              "label": "browse",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Job",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Freelancers have the ability to submit proposals for job posts, including their offer and timeline.",
    "PlantUML": "Freelancer \"1\" o-- \"0..*\" Proposal\nJob \"1\" o-- \"0..*\" Proposal\n\nclass Proposal {\n  -proposalId: int\n  -description: string\n  -proposedAmount: float\n  -timeline: string\n}\n",
    "Model": "H15",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Proposal",
          "children": [
            {
              "type": "attribute",
              "value": "proposalId",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "proposedAmount",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "attribute",
              "value": "timeline",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Freelancer",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "Proposal"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Job",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "Proposal"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Clients are able to review proposals and assign a job to a specific freelancer.",
    "PlantUML": "Job \"1\" --> \"1\" Proposal : accepted\nProposal --> Freelancer\n",
    "Model": "H15",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Job",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Proposal"
                }
              ],
              "label": "accepted",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Proposal",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Freelancer"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Freelancer",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "A built-in messaging system allows freelancers and clients to communicate.",
    "PlantUML": "User \"1\" o-- \"0..*\" Message\n\nclass Message {\n  -messageId: int\n  -senderId: int\n  -receiverId: int\n  -content: string\n  -timestamp: Date\n}\n",
    "Model": "H15",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Message",
          "children": [
            {
              "type": "attribute",
              "value": "messageId",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "senderId",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "receiverId",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "content",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "-",
              "data_type": "Date"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "Message"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Freelancers submit completed work, which clients can review and either approve or request changes to.",
    "PlantUML": "Job \"1\" o-- \"0..1\" Submission\n\nclass Submission {\n  -submissionId: int\n  -contentURL: string\n  -submittedAt: Date\n  -status: string\n}\n",
    "Model": "H15",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Submission",
          "children": [
            {
              "type": "attribute",
              "value": "submissionId",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "contentURL",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "submittedAt",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Job",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "Submission"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Payments are held in escrow by the platform and released upon job approval.",
    "PlantUML": "Job \"1\" o-- \"1\" Escrow\n\nclass Escrow {\n  -escrowId: int\n  -amount: float\n  -status: string\n  -releasedAt: Date\n}\n",
    "Model": "H15",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Escrow",
          "children": [
            {
              "type": "attribute",
              "value": "escrowId",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "amount",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "releasedAt",
              "visibility": "-",
              "data_type": "Date"
            }
          ]
        },
        {
          "type": "class",
          "value": "Job",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "Escrow"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Upon completion, both freelancers and clients can leave reviews and ratings.",
    "PlantUML": "User \"1\" o-- \"0..*\" Review\n\nclass Review {\n  -reviewId: int\n  -rating: int\n  -comment: string\n  -reviewedUserId: int\n}\n",
    "Model": "H15",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Review",
          "children": [
            {
              "type": "attribute",
              "value": "reviewId",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "rating",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "comment",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "reviewedUserId",
              "visibility": "-",
              "data_type": "int"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "Review"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "For better matching, jobs and freelancers are tagged with categories and skills.",
    "PlantUML": "Job \"0..*\" o-- \"0..*\" Category\nFreelancer \"0..*\" o-- \"0..*\" Skill\n\nclass Category {\n  -categoryId: int\n  -name: string\n}\n\nclass Skill {\n  -skillId: int\n  -name: string\n}\n",
    "Model": "H15",
    "RequirementIndex": "10",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Category",
          "children": [
            {
              "type": "attribute",
              "value": "categoryId",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Skill",
          "children": [
            {
              "type": "attribute",
              "value": "skillId",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Job",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "Category"
                }
              ],
              "multiplicity1": "0..*",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Freelancer",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "Skill"
                }
              ],
              "multiplicity1": "0..*",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Each chatbot project has a unique name and is associated with multiple chatbot modules.",
    "PlantUML": "class ChatbotProject {\n  - projectId: String\n  - name: String\n  - createdDate: Date\n}\nChatbotProject \"1\" *-- \"*\" ChatbotModule\n",
    "Model": "H16",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ChatbotProject",
          "children": [
            {
              "type": "attribute",
              "value": "projectId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "createdDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "ChatbotModule"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "ChatbotModule",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Modules provide logical groupings of functionalities and can be reused across multiple projects.",
    "PlantUML": "class ChatbotModule {\n  - moduleId: String\n  - moduleName: String\n}\nChatbotModule \"1\" *-- \"*\" Intent\nChatbotModule \"1\" *-- \"*\" Entity\nChatbotModule \"1\" *-- \"*\" DialogFlow\n",
    "Model": "H16",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ChatbotModule",
          "children": [
            {
              "type": "attribute",
              "value": "moduleId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "moduleName",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Intent"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "*"
            },
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Entity"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "*"
            },
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "DialogFlow"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Intent",
          "children": []
        },
        {
          "type": "class",
          "value": "Entity",
          "children": []
        },
        {
          "type": "class",
          "value": "DialogFlow",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Each intent is linked to one or more responses and a set of training phrases.",
    "PlantUML": "class Intent {\n  - intentId: String\n  - name: String\n}\nIntent \"1\" *-- \"*\" TrainingPhrase\nIntent \"1\" *-- \"*\" Response\n",
    "Model": "H16",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Intent",
          "children": [
            {
              "type": "attribute",
              "value": "intentId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "TrainingPhrase"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "*"
            },
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Response"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "TrainingPhrase",
          "children": []
        },
        {
          "type": "class",
          "value": "Response",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Each phrase belongs to exactly one intent.",
    "PlantUML": "class TrainingPhrase {\n  - phraseId: String\n  - text: String\n}\n",
    "Model": "H16",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "TrainingPhrase",
          "children": [
            {
              "type": "attribute",
              "value": "phraseId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "text",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "A response can include text, images, or structured cards.",
    "PlantUML": "class Response {\n  - responseId: String\n  - contentType: String\n  - content: String\n}\n",
    "Model": "H16",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Response",
          "children": [
            {
              "type": "attribute",
              "value": "responseId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "contentType",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "content",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Entities include a name, type, and sample values.",
    "PlantUML": "class Entity {\n  - entityId: String\n  - name: String\n  - type: String\n}\nEntity \"1\" *-- \"*\" EntityValue\n",
    "Model": "H16",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Entity",
          "children": [
            {
              "type": "attribute",
              "value": "entityId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "type",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "EntityValue"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "EntityValue",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Each value belongs to a specific entity.",
    "PlantUML": "class EntityValue {\n  - valueId: String\n  - value: String\n}\n",
    "Model": "H16",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "EntityValue",
          "children": [
            {
              "type": "attribute",
              "value": "valueId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "value",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "It models transitions between steps based on user input or context.",
    "PlantUML": "class DialogFlow {\n  - flowId: String\n  - name: String\n}\nDialogFlow \"1\" *-- \"*\" DialogNode\n",
    "Model": "H16",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "DialogFlow",
          "children": [
            {
              "type": "attribute",
              "value": "flowId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "DialogNode"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "DialogNode",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Nodes can have conditions, actions, and links to other nodes.",
    "PlantUML": "class DialogNode {\n  - nodeId: String\n  - prompt: String\n  - condition: String\n}\nDialogNode \"1\" --> \"*\" DialogNode : next\n",
    "Model": "H16",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "DialogNode",
          "children": [
            {
              "type": "attribute",
              "value": "nodeId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "prompt",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "condition",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "DialogNode"
                }
              ],
              "label": "next",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Users can be developers, testers, or admins with different access levels.",
    "PlantUML": "class User {\n  - userId: String\n  - username: String\n  - role: String\n}\nUser \"1\" *-- \"*\" ChatbotProject\n",
    "Model": "H16",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "username",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "role",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "ChatbotProject"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "ChatbotProject",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Logs store user messages, matched intents, and response timestamps.",
    "PlantUML": "class InteractionLog {\n  - logId: String\n  - timestamp: Date\n  - userMessage: String\n  - matchedIntent: String\n}\nChatbotProject \"1\" *-- \"*\" InteractionLog\n",
    "Model": "H16",
    "RequirementIndex": "10",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "InteractionLog",
          "children": [
            {
              "type": "attribute",
              "value": "logId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "userMessage",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "matchedIntent",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "ChatbotProject",
          "children": [
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "InteractionLog"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "In a Language Learning Platform, the system will allow users to register, log in, and manage their profiles securely using an email and password.",
    "PlantUML": "class User {\n  -userId: String\n  -email: String\n  -password: String\n  -name: String\n  -role: UserRole\n  +register(): void\n  +login(): void\n  +logout(): void\n}",
    "Model": "H17",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "role",
              "visibility": "-",
              "data_type": "UserRole"
            },
            {
              "type": "method",
              "value": "register()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "login()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "logout()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Teachers will have the ability to create, update, and delete language courses, including metadata such as the title, level, and description.",
    "PlantUML": "class Course {\n  -courseId: String\n  -title: String\n  -description: String\n  -level: String\n  +createCourse(): void\n  +updateCourse(): void\n  +deleteCourse(): void\n}\nUser \"1\" -- \"0..*\" Course : creates ",
    "Model": "H17",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Course",
          "children": [
            {
              "type": "attribute",
              "value": "courseId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "level",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "createCourse()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "updateCourse()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "deleteCourse()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Course"
                }
              ],
              "label": "creates",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Each course will consist of multiple structured lessons that include content, media, and quizzes.",
    "PlantUML": "class Lesson {\n  -lessonId: String\n  -title: String\n  -content: String\n  -videoUrl: String\n  +viewLesson(): void\n}\nCourse \"1\" *-- \"0..*\" Lesson : contains ",
    "Model": "H17",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Lesson",
          "children": [
            {
              "type": "attribute",
              "value": "lessonId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "content",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "videoUrl",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "viewLesson()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Course",
          "children": [
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Lesson"
                }
              ],
              "label": "contains",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Lessons may include interactive quizzes that allow learners to practice and test their knowledge.",
    "PlantUML": "class Quiz {\n  -quizId: String\n  -question: String\n  -options: List<String>\n  -correctAnswer: String\n  +submitAnswer(): bool\n}\nLesson \"1\" *-- \"0..*\" Quiz : includes ",
    "Model": "H17",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Quiz",
          "children": [
            {
              "type": "attribute",
              "value": "quizId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "question",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "options",
              "visibility": "-",
              "data_type": "List<String>"
            },
            {
              "type": "attribute",
              "value": "correctAnswer",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "submitAnswer()",
              "visibility": "+",
              "data_type": "bool"
            }
          ]
        },
        {
          "type": "class",
          "value": "Lesson",
          "children": [
            {
              "type": "relation",
              "value": "*--",
              "children": [
                {
                  "type": "class",
                  "value": "Quiz"
                }
              ],
              "label": "includes",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system should track student progress by logging completed lessons and quiz scores.",
    "PlantUML": "class Progress {\n  -progressId: String\n  -userId: String\n  -lessonId: String\n  -completionStatus: bool\n  -score: float\n  +updateProgress(): void\n}\nUser \"1\" -- \"0..*\" Progress\nLesson \"1\" -- \"0..*\" Progress\n",
    "Model": "H17",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Progress",
          "children": [
            {
              "type": "attribute",
              "value": "progressId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "userId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "lessonId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "completionStatus",
              "visibility": "-",
              "data_type": "bool"
            },
            {
              "type": "attribute",
              "value": "score",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "method",
              "value": "updateProgress()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Progress"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Lesson",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Progress"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Teachers can schedule live classes, which students can view and join.",
    "PlantUML": "class LiveClass {\n  -classId: String\n  -schedule: DateTime\n  -meetingLink: String\n  +joinClass(): void\n}\nUser \"1\" -- \"0..*\" LiveClass : teaches \nLiveClass \"1\" -- \"0..*\" User : attends ",
    "Model": "H17",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "LiveClass",
          "children": [
            {
              "type": "attribute",
              "value": "classId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "schedule",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "meetingLink",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "joinClass()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "attends",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "LiveClass"
                }
              ],
              "label": "teaches",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Students who complete all lessons in a course should receive completion certificates generated by the platform.",
    "PlantUML": "class Certificate {\n  -certificateId: String\n  -issueDate: Date\n  -courseTitle: String\n  +download(): PDF\n}\nUser \"1\" -- \"0..*\" Certificate\nCourse \"1\" -- \"0..*\" Certificate\n",
    "Model": "H17",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Certificate",
          "children": [
            {
              "type": "attribute",
              "value": "certificateId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "issueDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "courseTitle",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "download()",
              "visibility": "+",
              "data_type": "PDF"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Certificate"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Course",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Certificate"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Students can provide feedback and rate courses after they have completed them.",
    "PlantUML": "class Feedback {\n  -feedbackId: String\n  -rating: int\n  -comments: String\n  +submit(): void\n}\nUser \"1\" -- \"0..*\" Feedback\nCourse \"1\" -- \"0..*\" Feedback\n",
    "Model": "H17",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Feedback",
          "children": [
            {
              "type": "attribute",
              "value": "feedbackId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "rating",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "comments",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "submit()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Feedback"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Course",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Feedback"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Administrators can manage users, monitor activity, and remove inappropriate content.",
    "PlantUML": "class AdminTools {\n  +banUser(userId: String): void\n  +removeCourse(courseId: String): void\n  +viewReports(): void\n}\nUser <|-- Admin\nAdmin \"1\" -- \"1\" AdminTools\n",
    "Model": "H17",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AdminTools",
          "children": [
            {
              "type": "method",
              "value": "banUser(userId: String)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "removeCourse(courseId: String)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "viewReports()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Admin"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Admin",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "AdminTools"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The platform interface and course materials should support multiple languages.",
    "PlantUML": "class Language {\n  -languageCode: String\n  -name: String\n}\nCourse \"1\" -- \"1\" Language\nLesson \"1\" -- \"1\" Language\n",
    "Model": "H17",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Language",
          "children": [
            {
              "type": "attribute",
              "value": "languageCode",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Course",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Language"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Lesson",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Language"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "A Job Interview Scheduling system should manage multiple job applicants, including their personal details such as name, email, phone number, and resume.",
    "PlantUML": "class Applicant {\n  -name: String\n  -email: String\n  -phone: String\n  -resume: File\n}\n",
    "Model": "H18",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Applicant",
          "children": [
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "phone",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "resume",
              "visibility": "-",
              "data_type": "File"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Applicants should have the option to apply for one or more job positions.",
    "PlantUML": "class JobPosition {\n  -title: String\n  -description: String\n  -requirements: String\n}\n\nApplicant \"1\" --> \"*\" JobPosition : appliesTo\n",
    "Model": "H18",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "JobPosition",
          "children": [
            {
              "type": "attribute",
              "value": "title",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "requirements",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Applicant",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "JobPosition"
                }
              ],
              "label": "appliesTo",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Each job position can include multiple interview rounds (e.g., HR, Technical, Managerial).",
    "PlantUML": "class InterviewRound {\n  -type: String\n  -scheduledDate: DateTime\n  -status: String\n}\n\nJobPosition \"1\" --> \"*\" InterviewRound : hasRound\n",
    "Model": "H18",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "InterviewRound",
          "children": [
            {
              "type": "attribute",
              "value": "type",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "scheduledDate",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "JobPosition",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "InterviewRound"
                }
              ],
              "label": "hasRound",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Each interview round should be assigned to one or more interviewers.",
    "PlantUML": "class Interviewer {\n  -name: String\n  -department: String\n  -email: String\n}\n\nInterviewRound \"*\" --> \"*\" Interviewer : conductedBy\n",
    "Model": "H18",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Interviewer",
          "children": [
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "department",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "InterviewRound",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Interviewer"
                }
              ],
              "label": "conductedBy",
              "multiplicity1": "*",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system should store interview schedules, including details of the applicant, round, and timing.",
    "PlantUML": "class InterviewSchedule {\n  -dateTime: DateTime\n  -location: String\n  -status: String\n}\n\nApplicant \"1\" --> \"*\" InterviewSchedule : scheduledFor\nInterviewRound \"1\" --> \"*\" InterviewSchedule : scheduledAs\n",
    "Model": "H18",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "InterviewSchedule",
          "children": [
            {
              "type": "attribute",
              "value": "dateTime",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "location",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Applicant",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "InterviewSchedule"
                }
              ],
              "label": "scheduledFor",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "InterviewRound",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "InterviewSchedule"
                }
              ],
              "label": "scheduledAs",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Following the interview, each interviewer should submit an evaluation for the applicant.",
    "PlantUML": "class Evaluation {\n  -score: Float\n  -comments: String\n  -recommendation: String\n}\n\nInterviewSchedule \"1\" --> \"*\" Evaluation : resultsIn\nInterviewer \"1\" --> \"*\" Evaluation : submits\n",
    "Model": "H18",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Evaluation",
          "children": [
            {
              "type": "attribute",
              "value": "score",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "attribute",
              "value": "comments",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "recommendation",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "InterviewSchedule",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Evaluation"
                }
              ],
              "label": "resultsIn",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Interviewer",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Evaluation"
                }
              ],
              "label": "submits",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Based on evaluations from all rounds, the system should generate a final result for each applicant.",
    "PlantUML": "class FinalResult {\n  -overallScore: Float\n  -decision: String\n}\n\nApplicant \"1\" --> \"1\" FinalResult : hasResult\n",
    "Model": "H18",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "FinalResult",
          "children": [
            {
              "type": "attribute",
              "value": "overallScore",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "attribute",
              "value": "decision",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Applicant",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "FinalResult"
                }
              ],
              "label": "hasResult",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Administrative users should be able to create job positions, assign interviewers, and oversee scheduling.",
    "PlantUML": "class Admin {\n  -username: String\n  -password: String\n  -role: String\n}\n\nAdmin \"1\" --> \"*\" JobPosition : manages\nAdmin \"1\" --> \"*\" InterviewSchedule : oversees\n",
    "Model": "H18",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Admin",
          "children": [
            {
              "type": "attribute",
              "value": "username",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "role",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "JobPosition"
                }
              ],
              "label": "manages",
              "multiplicity1": "1",
              "multiplicity2": "*"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "InterviewSchedule"
                }
              ],
              "label": "oversees",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "JobPosition",
          "children": []
        },
        {
          "type": "class",
          "value": "InterviewSchedule",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Notifications (email or system) should be sent to applicants and interviewers when scheduling occurs.",
    "PlantUML": "class Notification {\n  -message: String\n  -recipient: String\n  -sentAt: DateTime\n}\n\nInterviewSchedule \"1\" --> \"*\" Notification : triggers\n",
    "Model": "H18",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Notification",
          "children": [
            {
              "type": "attribute",
              "value": "message",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "recipient",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "sentAt",
              "visibility": "-",
              "data_type": "DateTime"
            }
          ]
        },
        {
          "type": "class",
          "value": "InterviewSchedule",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Notification"
                }
              ],
              "label": "triggers",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "In a Health Tracker App, each user will be able to register and log in securely using an email and password.",
    "PlantUML": "class User {\n  - userId: String\n  - name: String\n  - email: String\n  - password: String\n  + register()\n  + login()\n}\n",
    "Model": "H19",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "register()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "login()",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Users should have the ability to log daily health metrics, such as weight, sleep hours, steps walked, and calories consumed.",
    "PlantUML": "class HealthMetric {\n  - metricId: String\n  - date: Date\n  - weight: Float\n  - sleepHours: Float\n  - steps: Int\n  - calories: Int\n  + addEntry()\n  + updateEntry()\n}\n\nUser \"1\" o-- \"*\" HealthMetric : logs\n",
    "Model": "H19",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "HealthMetric",
          "children": [
            {
              "type": "attribute",
              "value": "metricId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "date",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "weight",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "attribute",
              "value": "sleepHours",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "attribute",
              "value": "steps",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "calories",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "method",
              "value": "addEntry()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "updateEntry()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "HealthMetric"
                }
              ],
              "label": "logs",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system should allow users to set personal health goals, such as a daily step count or target weight.",
    "PlantUML": "class HealthGoal {\n  - goalId: String\n  - goalType: String\n  - targetValue: Float\n  - startDate: Date\n  - endDate: Date\n  + createGoal()\n  + updateGoal()\n}\n\nUser \"1\" o-- \"*\" HealthGoal : sets\n",
    "Model": "H19",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "HealthGoal",
          "children": [
            {
              "type": "attribute",
              "value": "goalId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "goalType",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "targetValue",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "attribute",
              "value": "startDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "endDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "method",
              "value": "createGoal()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "updateGoal()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "HealthGoal"
                }
              ],
              "label": "sets",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Users should be able to track their water intake by logging the number of glasses of water they consume each day.",
    "PlantUML": "class WaterIntake {\n  - intakeId: String\n  - date: Date\n  - glasses: Int\n  + logIntake()\n  + updateIntake()\n}\n\nUser \"1\" o-- \"*\" WaterIntake : tracks\n",
    "Model": "H19",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "WaterIntake",
          "children": [
            {
              "type": "attribute",
              "value": "intakeId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "date",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "glasses",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "method",
              "value": "logIntake()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "updateIntake()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "WaterIntake"
                }
              ],
              "label": "tracks",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The app should provide weekly and monthly health progress summaries in the form of reports.",
    "PlantUML": "class HealthReport {\n  - reportId: String\n  - generatedDate: Date\n  - reportType: String\n  + generateSummary()\n}\n\nUser \"1\" o-- \"*\" HealthReport : receives\nHealthReport ..> HealthMetric : aggregates\nHealthReport ..> HealthGoal : compares with\n",
    "Model": "H19",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "HealthReport",
          "children": [
            {
              "type": "attribute",
              "value": "reportId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "generatedDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "reportType",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "generateSummary()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "..>",
              "children": [
                {
                  "type": "class",
                  "value": "HealthMetric"
                }
              ],
              "label": "aggregates"
            },
            {
              "type": "relation",
              "value": "..>",
              "children": [
                {
                  "type": "class",
                  "value": "HealthGoal"
                }
              ],
              "label": "compares with"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "HealthReport"
                }
              ],
              "label": "receives",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "HealthMetric",
          "children": []
        },
        {
          "type": "class",
          "value": "HealthGoal",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Users can set reminders for activities such as drinking water, taking medicine, or doing workouts.",
    "PlantUML": "class Reminder {\n  - reminderId: String\n  - type: String\n  - message: String\n  - time: DateTime\n  + schedule()\n  + cancel()\n}\n\nUser \"1\" o-- \"*\" Reminder : sets\n",
    "Model": "H19",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Reminder",
          "children": [
            {
              "type": "attribute",
              "value": "reminderId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "type",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "message",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "time",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "method",
              "value": "schedule()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "cancel()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "Reminder"
                }
              ],
              "label": "sets",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The app should notify users when they achieve a health goal or when they miss a daily target.",
    "PlantUML": "class Notification {\n  - notificationId: String\n  - message: String\n  - dateTime: DateTime\n  + send()\n}\n\nUser \"1\" o-- \"*\" Notification : receives\nNotification ..> HealthGoal : refers to\n",
    "Model": "H19",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Notification",
          "children": [
            {
              "type": "attribute",
              "value": "notificationId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "message",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "dateTime",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "method",
              "value": "send()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "..>",
              "children": [
                {
                  "type": "class",
                  "value": "HealthGoal"
                }
              ],
              "label": "refers to"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "Notification"
                }
              ],
              "label": "receives",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "HealthGoal",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "To automatically fetch step count and sleep data, the system should support syncing with wearable devices.",
    "PlantUML": "class WearableDevice {\n  - deviceId: String\n  - deviceType: String\n  - lastSyncTime: DateTime\n  + syncData()\n}\n\nUser \"1\" o-- \"*\" WearableDevice : connects\nWearableDevice --> HealthMetric : updates\n",
    "Model": "H19",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "WearableDevice",
          "children": [
            {
              "type": "attribute",
              "value": "deviceId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "deviceType",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "lastSyncTime",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "method",
              "value": "syncData()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "HealthMetric"
                }
              ],
              "label": "updates"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "o--",
              "children": [
                {
                  "type": "class",
                  "value": "WearableDevice"
                }
              ],
              "label": "connects",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "HealthMetric",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Administrative users should have the ability to view system analytics and manage user accounts.",
    "PlantUML": "class AdminUser {\n  - adminId: String\n  - name: String\n  - email: String\n  + viewAnalytics()\n  + manageUsers()\n}\n\nAdminUser --|> User\n",
    "Model": "H19",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AdminUser",
          "children": [
            {
              "type": "attribute",
              "value": "adminId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "viewAnalytics()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "manageUsers()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "--|>",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "A Resume Builder System is a web-based application that allows users to register using a unique email and password.",
    "PlantUML": "class User {\n  -userID: String\n  -email: String\n  -password: String\n  +register(): void\n  +login(): boolean\n}\n",
    "Model": "H20",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "register()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "login()",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Each user can create and manage multiple resumes, with options to add, update, and delete them.",
    "PlantUML": "class Resume {\n  -resumeID: String\n  -title: String\n  -creationDate: Date\n  +create(): void\n  +update(): void\n  +delete(): void\n}\n\nUser \"1\" -- \"*\" Resume : owns \n",
    "Model": "H20",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Resume",
          "children": [
            {
              "type": "attribute",
              "value": "resumeID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "creationDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "method",
              "value": "create()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "update()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "delete()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Resume"
                }
              ],
              "label": "owns",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Each resume consists of multiple sections, such as personal info, education, experience, and skills.",
    "PlantUML": "class Section {\n  -sectionID: String\n  -type: String\n  -content: String\n  +edit(): void\n}\n\nResume \"1\" -- \"*\" Section : contains \n",
    "Model": "H20",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Section",
          "children": [
            {
              "type": "attribute",
              "value": "sectionID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "type",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "content",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "edit()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Resume",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Section"
                }
              ],
              "label": "contains",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The Personal Info section should include the user's name, phone number, address, and a profile summary.",
    "PlantUML": "class PersonalInfo {\n  -name: String\n  -phone: String\n  -address: String\n  -summary: String\n}\n\nSection <|-- PersonalInfo\n",
    "Model": "H20",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "PersonalInfo",
          "children": [
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "phone",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "address",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "summary",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Section",
          "children": [
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "PersonalInfo"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The Education section should allow multiple entries for degrees, institutions, and start and end dates.",
    "PlantUML": "class Education {\n  -degree: String\n  -institution: String\n  -startDate: Date\n  -endDate: Date\n}\n\nSection <|-- Education\n",
    "Model": "H20",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Education",
          "children": [
            {
              "type": "attribute",
              "value": "degree",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "institution",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "startDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "endDate",
              "visibility": "-",
              "data_type": "Date"
            }
          ]
        },
        {
          "type": "class",
          "value": "Section",
          "children": [
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Education"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The Experience section should include the user's job title, company, responsibilities, and duration.",
    "PlantUML": "class Experience {\n  -jobTitle: String\n  -company: String\n  -responsibilities: String\n  -startDate: Date\n  -endDate: Date\n}\n\nSection <|-- Experience\n",
    "Model": "H20",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Experience",
          "children": [
            {
              "type": "attribute",
              "value": "jobTitle",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "company",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "responsibilities",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "startDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "endDate",
              "visibility": "-",
              "data_type": "Date"
            }
          ]
        },
        {
          "type": "class",
          "value": "Section",
          "children": [
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Experience"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The Skills section should store a list of the user's technical and soft skills.",
    "PlantUML": "class Skill {\n  -name: String\n  -type: String  \n}\n\nSection <|-- Skill\n",
    "Model": "H20",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Skill",
          "children": [
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "type",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Section",
          "children": [
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Skill"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Users should be able to preview and download their resumes in PDF format.",
    "PlantUML": "class PDFExporter {\n  +export(resume: Resume): File\n}\n\nResume --> PDFExporter : uses\n",
    "Model": "H20",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "PDFExporter",
          "children": [
            {
              "type": "method",
              "value": "export(resume: Resume)",
              "visibility": "+",
              "data_type": "File"
            }
          ]
        },
        {
          "type": "class",
          "value": "Resume",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "PDFExporter"
                }
              ],
              "label": "uses"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system should provide resume templates to format the output design.",
    "PlantUML": "class Template {\n  -templateID: String\n  -name: String\n  -layout: String\n  +apply(): void\n}\n\nResume --> Template :  uses\n",
    "Model": "H20",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Template",
          "children": [
            {
              "type": "attribute",
              "value": "templateID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "layout",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "apply()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Resume",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Template"
                }
              ],
              "label": "uses"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Administrators should have the ability to manage available templates.",
    "PlantUML": "class Admin {\n  -adminID: String\n  -username: String\n  -password: String\n  +manageTemplates(): void\n}\n\nAdmin \"1\" -- \"*\" Template : manages \n",
    "Model": "H20",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Admin",
          "children": [
            {
              "type": "attribute",
              "value": "adminID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "username",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "manageTemplates()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Template"
                }
              ],
              "label": "manages",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Template",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Users should be able to set one resume as their default for quick sharing or downloading.",
    "PlantUML": "class Resume { \n+isDefault: boolean\n}\n\nUser --> Resume : has default",
    "Model": "H20",
    "RequirementIndex": "10",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Resume",
          "children": [
            {
              "type": "attribute",
              "value": "isDefault",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Resume"
                }
              ],
              "label": "has default"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Each section in a resume must maintain its order of appearance.",
    "PlantUML": "class Section { \n+order: int \n}\n\nResume --> Section : ordered\n",
    "Model": "H20",
    "RequirementIndex": "11",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Section",
          "children": [
            {
              "type": "attribute",
              "value": "order",
              "visibility": "+",
              "data_type": "int"
            }
          ]
        },
        {
          "type": "class",
          "value": "Resume",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Section"
                }
              ],
              "label": "ordered"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Users must be able to register as either students or tutors, and they can securely log in using their email and password.",
    "PlantUML": "class User {\n  -userID: String\n  -email: String\n  -password: String\n  +register(): void\n  +login(): boolean\n}\n\nclass Student {\n}\nclass Tutor{\n}\n\nUser <|-- Student\nUser <|-- Tutor",
    "Model": "H21",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "register()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "login()",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Student"
                }
              ]
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Tutor"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Student",
          "children": []
        },
        {
          "type": "class",
          "value": "Tutor",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Tutors can update their profiles, including their bio, subjects, and availability.",
    "PlantUML": "class TutorProfile {\n  -bio: String\n  -subjects: List<String>\n  -availability: Schedule\n  +updateProfile(): void\n}\n\nTutor \"1\" -- \"1\" TutorProfile\n",
    "Model": "H21",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "TutorProfile",
          "children": [
            {
              "type": "attribute",
              "value": "bio",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "subjects",
              "visibility": "-",
              "data_type": "List<String>"
            },
            {
              "type": "attribute",
              "value": "availability",
              "visibility": "-",
              "data_type": "Schedule"
            },
            {
              "type": "method",
              "value": "updateProfile()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Tutor",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "TutorProfile"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Students can view and update their personal information and learning preferences.",
    "PlantUML": "class StudentProfile {\n  -learningGoals: String\n  -preferredSubjects: List<String>\n  +editProfile(): void\n}\n\nStudent \"1\" -- \"1\" StudentProfile",
    "Model": "H21",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "StudentProfile",
          "children": [
            {
              "type": "attribute",
              "value": "learningGoals",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "preferredSubjects",
              "visibility": "-",
              "data_type": "List<String>"
            },
            {
              "type": "method",
              "value": "editProfile()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "Student",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "StudentProfile"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Students can search for tutors based on subject, availability, and rating.",
    "PlantUML": "class Student {\n+search()\n}\n\nclass SearchService {\n  +searchTutors(criteria: Map): List<Tutor>\n}",
    "Model": "H21",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Student",
          "children": [
            {
              "type": "method",
              "value": "search()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "SearchService",
          "children": [
            {
              "type": "method",
              "value": "searchTutors(criteria: Map)",
              "visibility": "+",
              "data_type": "List<Tutor>"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Based on tutor availability, students can book tutoring sessions.",
    "PlantUML": "class Session {\n  -sessionID: String\n  -dateTime: DateTime\n  -status: String\n  +bookSession(): boolean\n}\n\nStudent \"1\" -- \"0..*\" Session\nTutor \"1\" -- \"0..*\" Session",
    "Model": "H21",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Session",
          "children": [
            {
              "type": "attribute",
              "value": "sessionID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "dateTime",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "bookSession()",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        },
        {
          "type": "class",
          "value": "Student",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Session"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Tutor",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Session"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Both tutors and students can view upcoming and past sessions in a calendar format.",
    "PlantUML": "class Calendar {\n  -sessions: List<Session>\n  +viewSchedule(): List<Session>\n}\n\nUser \"1\" -- \"1\" Calendar",
    "Model": "H21",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Calendar",
          "children": [
            {
              "type": "attribute",
              "value": "sessions",
              "visibility": "-",
              "data_type": "List<Session>"
            },
            {
              "type": "method",
              "value": "viewSchedule()",
              "visibility": "+",
              "data_type": "List<Session>"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Calendar"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system sends reminders for upcoming sessions and booking confirmations.",
    "PlantUML": "class Notification {\n  -message: String\n  -timestamp: DateTime\n  +send(): void\n}\n\nUser \"1\" -- \"0..*\" Notification",
    "Model": "H21",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Notification",
          "children": [
            {
              "type": "attribute",
              "value": "message",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "method",
              "value": "send()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Notification"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Following sessions, students can rate tutors and provide feedback.",
    "PlantUML": "class Review {\n  -rating: int\n  -comment: String\n  -date: Date\n}\n\nStudent \"1\" -- \"0..*\" Review\nTutor \"1\" -- \"0..*\" Review",
    "Model": "H21",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Review",
          "children": [
            {
              "type": "attribute",
              "value": "rating",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "comment",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "date",
              "visibility": "-",
              "data_type": "Date"
            }
          ]
        },
        {
          "type": "class",
          "value": "Student",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Review"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Tutor",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Review"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Administrators can manage users, sessions, and any reported content.",
    "PlantUML": "class Admin {\n  -adminID: String\n  +manageUsers(): void\n  +moderateContent(): void\n}",
    "Model": "H21",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Admin",
          "children": [
            {
              "type": "attribute",
              "value": "adminID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "manageUsers()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "moderateContent()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Students must pay for sessions, and the system manages payments to tutors.",
    "PlantUML": "class Payment {\n  -paymentID: String\n  -amount: Double\n  -status: String\n  +process(): boolean\n}\n\nStudent \"1\" -- \"0..*\" Payment\nTutor \"1\" -- \"0..*\" Payment\nSession \"1\" -- \"1\" Payment",
    "Model": "H21",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Payment",
          "children": [
            {
              "type": "attribute",
              "value": "paymentID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "amount",
              "visibility": "-",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "process()",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        },
        {
          "type": "class",
          "value": "Student",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Payment"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Tutor",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Payment"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Session",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Payment"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "A news platform will allow users to register and log in using an email and password, ensuring secure storage of user data.",
    "PlantUML": "class User {\n  +userId: String\n  +email: String\n  +passwordHash: String\n  +register()\n  +login()\n}\n",
    "Model": "H22",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "passwordHash",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "register()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "login()",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Users can update their profiles, including their name, preferences, and subscription status.",
    "PlantUML": "\nclass Profile {\n  +fullName: String\n  +preferences: List<String>\n  +isSubscribed: Boolean\n  +updateProfile()\n}\nUser --> Profile",
    "Model": "H22",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Profile",
          "children": [
            {
              "type": "attribute",
              "value": "fullName",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "preferences",
              "visibility": "+",
              "data_type": "List<String>"
            },
            {
              "type": "attribute",
              "value": "isSubscribed",
              "visibility": "+",
              "data_type": "boolean"
            },
            {
              "type": "method",
              "value": "updateProfile()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Profile"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "All users can browse and view headlines, but only subscribed users can read full articles.",
    "PlantUML": "class NewsArticle {\n  +articleId: String\n  +title: String\n  +content: String\n  +publishedDate: Date\n  +getSummary()\n  +getFullContent()\n}\n\nUser --> NewsArticle : views\n",
    "Model": "H22",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "NewsArticle",
          "children": [
            {
              "type": "attribute",
              "value": "articleId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "content",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "publishedDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "method",
              "value": "getSummary()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "getFullContent()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "NewsArticle"
                }
              ],
              "label": "views"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Users can subscribe to or cancel plans, and the system tracks the start and end dates of these subscriptions.",
    "PlantUML": "class Subscription {\n  +planType: String\n  +startDate: Date\n  +endDate: Date\n  +cancel()\n  +renew()\n}\nUser --> Subscription : owns",
    "Model": "H22",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Subscription",
          "children": [
            {
              "type": "attribute",
              "value": "planType",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "startDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "endDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "method",
              "value": "cancel()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "renew()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Subscription"
                }
              ],
              "label": "owns"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Subscription payments are processed using third-party payment gateways.",
    "PlantUML": "class Payment {\n  +paymentId: String\n  +amount: Double\n  +status: String\n  +processPayment()\n}\n\nSubscription --> Payment",
    "Model": "H22",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Payment",
          "children": [
            {
              "type": "attribute",
              "value": "paymentId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "amount",
              "visibility": "+",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "processPayment()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Subscription",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Payment"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Articles are categorized into topics such as politics, sports, and tech.",
    "PlantUML": "class Category {\n  +name: String\n  +description: String\n}\n\nNewsArticle --> Category",
    "Model": "H22",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Category",
          "children": [
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "NewsArticle",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Category"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Administrators can create, edit, and delete news articles.",
    "PlantUML": "class Admin {\n  +adminId: String\n  +email: String\n  +manageArticles()\n}\nAdmin --> NewsArticle : manages\n",
    "Model": "H22",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Admin",
          "children": [
            {
              "type": "attribute",
              "value": "adminId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "manageArticles()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "NewsArticle"
                }
              ],
              "label": "manages"
            }
          ]
        },
        {
          "type": "class",
          "value": "NewsArticle",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Subscribed users can post and delete comments under articles.",
    "PlantUML": "class Comment {\n  +commentId: String\n  +content: String\n  +timestamp: Date\n  +delete()\n}\nUser --> Comment : writes\nNewsArticle --> Comment : has",
    "Model": "H22",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Comment",
          "children": [
            {
              "type": "attribute",
              "value": "commentId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "content",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "method",
              "value": "delete()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Comment"
                }
              ],
              "label": "writes"
            }
          ]
        },
        {
          "type": "class",
          "value": "NewsArticle",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Comment"
                }
              ],
              "label": "has"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Users can search for articles using keywords or filters.",
    "PlantUML": "class SearchEngine {\n  +search(query: String): List<NewsArticle>\n}\n\nUser --> SearchEngine : uses",
    "Model": "H22",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "SearchEngine",
          "children": [
            {
              "type": "method",
              "value": "search(query: String)",
              "visibility": "+",
              "data_type": "List<NewsArticle>"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "SearchEngine"
                }
              ],
              "label": "uses"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Users will receive email notifications for subscriptions, updates, or newsletters.",
    "PlantUML": "class Notification {\n  +notificationId: String\n  +type: String\n  +message: String\n  +send()\n}\n\nUser --> Notification : receives",
    "Model": "H22",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Notification",
          "children": [
            {
              "type": "attribute",
              "value": "notificationId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "type",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "message",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "send()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Notification"
                }
              ],
              "label": "receives"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "A Parking Space Finder App helps users locate and reserve nearby parking spaces by allowing them to register and log in using an email and password.",
    "PlantUML": "class User {\n  -userID: String\n  -email: String\n  -password: String\n  +register(): bool\n  +login(): bool\n}\n",
    "Model": "H23",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "register()",
              "visibility": "+",
              "data_type": "bool"
            },
            {
              "type": "method",
              "value": "login()",
              "visibility": "+",
              "data_type": "bool"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system will enable users to search for nearby parking spaces using their location.",
    "PlantUML": "class SearchService {\n  +searchByLocation(location: String): List<ParkingSpace>\n}\n\nUser --> SearchService : uses\n",
    "Model": "H23",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "SearchService",
          "children": [
            {
              "type": "method",
              "value": "searchByLocation(location: String)",
              "visibility": "+",
              "data_type": "List<ParkingSpace>"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "SearchService"
                }
              ],
              "label": "uses"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Parking space data, including location, availability, and pricing, will be stored and managed by the system.",
    "PlantUML": "class ParkingSpace {\n  -spaceID: String\n  -location: String\n  -price: double\n  -isAvailable: bool\n}\n",
    "Model": "H23",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "ParkingSpace",
          "children": [
            {
              "type": "attribute",
              "value": "spaceID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "location",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "price",
              "visibility": "-",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "isAvailable",
              "visibility": "-",
              "data_type": "bool"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Parking space owners will be able to list and update their available spaces.",
    "PlantUML": "class Owner {\n  -ownerID: String\n  -name: String\n  +listSpace(ps: ParkingSpace): void\n  +updateSpace(ps: ParkingSpace): void\n}\n\nOwner --> ParkingSpace : manages\n",
    "Model": "H23",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Owner",
          "children": [
            {
              "type": "attribute",
              "value": "ownerID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "listSpace(ps: ParkingSpace)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "updateSpace(ps: ParkingSpace)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "ParkingSpace"
                }
              ],
              "label": "manages"
            }
          ]
        },
        {
          "type": "class",
          "value": "ParkingSpace",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Users will be able to book a parking space for a selected time.",
    "PlantUML": "class Booking {\n  -bookingID: String\n  -startTime: DateTime\n  -endTime: DateTime\n  -status: String\n  +confirmBooking(): bool\n}\n\nUser --> Booking : creates\nBooking --> ParkingSpace : reserves\n",
    "Model": "H23",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Booking",
          "children": [
            {
              "type": "attribute",
              "value": "bookingID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "startTime",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "endTime",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "confirmBooking()",
              "visibility": "+",
              "data_type": "bool"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "ParkingSpace"
                }
              ],
              "label": "reserves"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Booking"
                }
              ],
              "label": "creates"
            }
          ]
        },
        {
          "type": "class",
          "value": "ParkingSpace",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The system will allow users to make payments for booked spaces.",
    "PlantUML": "class Payment {\n  -paymentID: String\n  -amount: double\n  -method: String\n  +processPayment(): bool\n}\n\nBooking --> Payment : initiates\n",
    "Model": "H23",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Payment",
          "children": [
            {
              "type": "attribute",
              "value": "paymentID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "amount",
              "visibility": "-",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "method",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "processPayment()",
              "visibility": "+",
              "data_type": "bool"
            }
          ]
        },
        {
          "type": "class",
          "value": "Booking",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Payment"
                }
              ],
              "label": "initiates"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Users will receive notifications with booking confirmations and reminders.",
    "PlantUML": "class Notification {\n  +sendConfirmation(user: User): void\n  +sendReminder(user: User): void\n}\n\nUser --> Notification : receives\n",
    "Model": "H23",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Notification",
          "children": [
            {
              "type": "method",
              "value": "sendConfirmation(user: User)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "sendReminder(user: User)",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Notification"
                }
              ],
              "label": "receives"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system will store a user history of bookings and payments.",
    "PlantUML": "User --> Booking : has\nUser --> Payment : has\n",
    "Model": "H23",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Booking"
                }
              ],
              "label": "has"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Payment"
                }
              ],
              "label": "has"
            }
          ]
        },
        {
          "type": "class",
          "value": "Booking",
          "children": []
        },
        {
          "type": "class",
          "value": "Payment",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Administrators will be able to monitor overall activity and manage reports.",
    "PlantUML": "class Admin {\n  -adminID: String\n  +viewReports(): Report\n  +manageUsers(): void\n}\n",
    "Model": "H23",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Admin",
          "children": [
            {
              "type": "attribute",
              "value": "adminID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "viewReports()",
              "visibility": "+",
              "data_type": "Report"
            },
            {
              "type": "method",
              "value": "manageUsers()",
              "visibility": "+",
              "data_type": "void"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Security will be maintained through authentication and data encryption.",
    "PlantUML": "class SecurityManager {\n  +authenticate(user: User): bool\n  +encrypt(data: String): String\n}\n\nUser --> SecurityManager : \"authenticated by\"\n",
    "Model": "H23",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "SecurityManager",
          "children": [
            {
              "type": "method",
              "value": "authenticate(user: User)",
              "visibility": "+",
              "data_type": "bool"
            },
            {
              "type": "method",
              "value": "encrypt(data: String)",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "SecurityManager"
                }
              ],
              "label": "\"authenticated by\""
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "A Mental Health System accessible online lets users access therapy, assessments, and manage resources remotely. They can securely create and update accounts by providing personal info like name, email, and contact details.",
    "PlantUML": "class User {\n  - userID: String\n  - name: String\n  - email: String\n  - password: String\n  - contactInfo: String\n  + register()\n  + updateProfile()\n}\n",
    "Model": "H24",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "contactInfo",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "register()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "updateProfile()",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system will store comprehensive therapist profiles, including qualifications, specialties, availability, and contact information; therapists can update these and manage their schedules.",
    "PlantUML": "class Therapist {\n  - therapistID: String\n  - name: String\n  - qualifications: String\n  - specialties: List<String>\n  - availability: Schedule\n  + updateProfile()\n  + manageSchedule()\n}\n\n",
    "Model": "H24",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Therapist",
          "children": [
            {
              "type": "attribute",
              "value": "therapistID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "qualifications",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "specialties",
              "visibility": "-",
              "data_type": "List<String>"
            },
            {
              "type": "attribute",
              "value": "availability",
              "visibility": "-",
              "data_type": "Schedule"
            },
            {
              "type": "method",
              "value": "updateProfile()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "manageSchedule()",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Users must be able to schedule, reschedule, or cancel appointments with therapists based on their availability; the system should then notify both users and therapists of any changes.",
    "PlantUML": "class Appointment {\n  - appointmentID: String\n  - userID: String\n  - therapistID: String\n  - dateTime: DateTime\n  - status: String\n  + schedule()\n  + reschedule()\n  + cancel()\n}\nUser \"1\" -- \"0..*\" Appointment : schedules\nTherapist \"1\" -- \"0..*\" Appointment : receives ",
    "Model": "H24",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Appointment",
          "children": [
            {
              "type": "attribute",
              "value": "appointmentID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "userID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "therapistID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "dateTime",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "schedule()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "reschedule()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "cancel()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Appointment"
                }
              ],
              "label": "schedules",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Therapist",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Appointment"
                }
              ],
              "label": "receives",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system will facilitate online therapy sessions via video or chat, recording session details such as duration and notes made by therapists.",
    "PlantUML": "class TherapySession {\n  - sessionID: String\n  - appointmentID: String\n  - sessionType: String\n  - duration: int\n  - notes: String\n  + startSession()\n  + endSession()\n  + addNotes()\n}\nAppointment \"1\" -- \"1\" TherapySession : generates ",
    "Model": "H24",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "TherapySession",
          "children": [
            {
              "type": "attribute",
              "value": "sessionID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "appointmentID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "sessionType",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "duration",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "notes",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "startSession()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "endSession()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "addNotes()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Appointment",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "TherapySession"
                }
              ],
              "label": "generates",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Users can take standardized mental health assessments; the system records their responses and calculates scores to help therapists evaluate their condition.",
    "PlantUML": "class Assessment {\n  - assessmentID: String\n  - userID: String\n  - questions: List<String>\n  - responses: List<String>\n  - score: float\n  + takeAssessment()\n  + calculateScore()\n}\nUser \"1\" -- \"0..*\" Assessment : takes ",
    "Model": "H24",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Assessment",
          "children": [
            {
              "type": "attribute",
              "value": "assessmentID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "userID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "questions",
              "visibility": "-",
              "data_type": "List<String>"
            },
            {
              "type": "attribute",
              "value": "responses",
              "visibility": "-",
              "data_type": "List<String>"
            },
            {
              "type": "attribute",
              "value": "score",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "method",
              "value": "takeAssessment()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "calculateScore()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Assessment"
                }
              ],
              "label": "takes",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "A library of mental health resources, including articles, videos, and exercises, will be available through the system; users can browse, search, and bookmark these resources.",
    "PlantUML": "class Resource {\n  - resourceID: String\n  - title: String\n  - type: String\n  - contentURL: String\n  + browse()\n  + search()\n  + bookmark()\n}\nResource \"0..*\" -- \"*\" User : \"bookmarked by\"",
    "Model": "H24",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Resource",
          "children": [
            {
              "type": "attribute",
              "value": "resourceID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "type",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "contentURL",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "browse()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "search()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "bookmark()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "\"bookmarked by\"",
              "multiplicity1": "0..*",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The system must send notifications and reminders to both users and therapists for upcoming appointments, requests for session feedback, or when new resources become available.",
    "PlantUML": "class Notification {\n  - notificationID: String\n  - recipientID: String\n  - message: String\n  - dateTime: DateTime\n  + send()\n}\nUser \"1\" -- \"0..*\" Notification : receives\nTherapist \"1\" -- \"0..*\" Notification : receives ",
    "Model": "H24",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Notification",
          "children": [
            {
              "type": "attribute",
              "value": "notificationID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "recipientID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "message",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "dateTime",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "method",
              "value": "send()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Notification"
                }
              ],
              "label": "receives",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Therapist",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Notification"
                }
              ],
              "label": "receives",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "A Project Management Tool helps teams efficiently plan, track, and collaborate on tasks, timelines, and resources, while offering secure user registration, login, and authentication, plus role-based access for Admins, Managers, and and Members.",
    "PlantUML": "class User {\n  + id : String\n  + name : String\n  + email : String\n  + password : String\n  + role : Role\n}\n",
    "Model": "H25",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "role",
              "visibility": "+",
              "data_type": "Role"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Managers have the ability to create, update, archive, and delete projects, each containing essential information like its title, description, status, and deadlines.",
    "PlantUML": "class Project {\n  + id : String\n  + title : String\n  + description : String\n  + startDate : Date\n  + endDate : Date\n  + status : ProjectStatus\n}\n\n\nUser \"1\" --> \"*\" Project : manages",
    "Model": "H25",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Project",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "startDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "endDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "+",
              "data_type": "ProjectStatus"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Project"
                }
              ],
              "label": "manages",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Each project can include multiple tasks with deadlines, priorities, and status tracking; tasks are assigned to specific users and support comments and attachments for effective collaboration.",
    "PlantUML": "class Task {\n  + id : String\n  + title : String\n  + description : String\n  + priority : Priority\n  + status : TaskStatus\n  + dueDate : Date\n}\n\n\n\nProject \"1\" --> \"*\" Task : contains\nUser \"1\" --> \"*\" Task : assignedTo\n",
    "Model": "H25",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Task",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "priority",
              "visibility": "+",
              "data_type": "Priority"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "+",
              "data_type": "TaskStatus"
            },
            {
              "type": "attribute",
              "value": "dueDate",
              "visibility": "+",
              "data_type": "Date"
            }
          ]
        },
        {
          "type": "class",
          "value": "Project",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Task"
                }
              ],
              "label": "contains",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Task"
                }
              ],
              "label": "assignedTo",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Users can comment on tasks to facilitate discussion and feedback, with each comment recording a timestamp and the author's identity for clear communication tracking.",
    "PlantUML": "class Comment {\n  + id : String\n  + message : String\n  + timestamp : Date\n}\n\n\nTask \"1\" --> \"*\" Comment : has\nUser \"1\" --> \"*\" Comment : authored\n",
    "Model": "H25",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Comment",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "message",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "+",
              "data_type": "Date"
            }
          ]
        },
        {
          "type": "class",
          "value": "Task",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Comment"
                }
              ],
              "label": "has",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Comment"
                }
              ],
              "label": "authored",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Tasks can include file uploads, such as documents or screenshots, with each file stored along with metadata including its name, type, and upload time.",
    "PlantUML": "class Attachment {\n  + id : String\n  + fileName : String\n  + fileType : String\n  + uploadedAt : Date\n}\n\n\nTask \"1\" --> \"*\" Attachment : includes\n",
    "Model": "H25",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Attachment",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "fileName",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "fileType",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "uploadedAt",
              "visibility": "+",
              "data_type": "Date"
            }
          ]
        },
        {
          "type": "class",
          "value": "Task",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Attachment"
                }
              ],
              "label": "includes",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Each project can have a dedicated team with specific users assigned to it, and Managers can invite or remove users from the team.",
    "PlantUML": "class Team {\n  + id : String\n  + name : String\n}\n\n\nTeam \"1\" --> \"*\" User : hasMembers\nProject \"1\" --> \"1\" Team : belongsTo\n",
    "Model": "H25",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Team",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "hasMembers",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        },
        {
          "type": "class",
          "value": "Project",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Team"
                }
              ],
              "label": "belongsTo",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Users receive notifications when they are assigned to tasks, mentioned in comments, or when project status changes; each notification includes a type, message, and read/unread status.",
    "PlantUML": "class Notification {\n  + id : String\n  + message : String\n  + type : NotificationType\n  + isRead : Boolean\n}\n\n\nUser \"1\" --> \"*\" Notification : receives\n",
    "Model": "H25",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Notification",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "message",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "type",
              "visibility": "+",
              "data_type": "NotificationType"
            },
            {
              "type": "attribute",
              "value": "isRead",
              "visibility": "+",
              "data_type": "boolean"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Notification"
                }
              ],
              "label": "receives",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Logs record the action type, user, timestamp, and affected object, ensuring that every important action—like creating or deleting tasks, changing statuses, or assigning users—is tracked for accountability.",
    "PlantUML": "class AuditLog {\n  + id : String\n  + action : String\n  + targetId : String\n  + timestamp : Date\n}\n\n\nUser \"1\" --> \"*\" AuditLog : created\n",
    "Model": "H25",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AuditLog",
          "children": [
            {
              "type": "attribute",
              "value": "id",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "action",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "targetId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "+",
              "data_type": "Date"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "AuditLog"
                }
              ],
              "label": "created",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "An Online Appointment Booking System allows users to register with basic credentials, log in, update their profiles, and easily schedule, manage, or cancel appointments with service providers through a web interface.",
    "PlantUML": "class User {\n  -userId: String\n  -username: String\n  -password: String\n  -name: String\n  -email: String\n  -phone: String\n  +register()\n  +login()\n  +logout()\n  +updateProfile()\n}\n",
    "Model": "H26",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "username",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "phone",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "register()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "login()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "logout()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "updateProfile()",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Every user must have an assigned role: either Customer, Admin, or 'ServiceProvider', which determines their accessible features within the system.",
    "PlantUML": "class Role {\n  -roleId: String\n  -roleName: String\n}\nUser --> Role : has\n",
    "Model": "H26",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Role",
          "children": [
            {
              "type": "attribute",
              "value": "roleId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "roleName",
              "visibility": "-",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Role"
                }
              ],
              "label": "has"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Service providers must be able to define their offered services with titles, descriptions, and durations; each service should be linked to one provider and can have many appointments.",
    "PlantUML": "class Service {\n  -serviceId: String\n  -title: String\n  -description: String\n  -durationInMinutes: int\n  +createService()\n  +updateService()\n}\nService --> User : offeredBy\n",
    "Model": "H26",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Service",
          "children": [
            {
              "type": "attribute",
              "value": "serviceId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "durationInMinutes",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "method",
              "value": "createService()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "updateService()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "offeredBy"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Customers must be able to book appointments for available services and time slots, with each appointment including details such as time, status (pending, confirmed, canceled), and optional notes.",
    "PlantUML": "class Appointment {\n  -appointmentId: String\n  -appointmentTime: DateTime\n  -status: String\n  -notes: String\n  +book()\n  +cancel()\n  +updateStatus()\n}\nAppointment --> Service : for\nAppointment --> User : bookedBy\n",
    "Model": "H26",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Appointment",
          "children": [
            {
              "type": "attribute",
              "value": "appointmentId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "appointmentTime",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "notes",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "book()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "cancel()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "updateStatus()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Service"
                }
              ],
              "label": "for"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "bookedBy"
            }
          ]
        },
        {
          "type": "class",
          "value": "Service",
          "children": []
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Service providers can set and update their availability through time slots, each specifying the date, time, and maximum number of appointments.",
    "PlantUML": "class TimeSlot {\n  -slotId: String\n  -date: Date\n  -startTime: Time\n  -endTime: Time\n  -maxAppointments: int\n  +setAvailability()\n}\nTimeSlot --> User : belongsTo\nAppointment --> TimeSlot : scheduledIn\n",
    "Model": "H26",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "TimeSlot",
          "children": [
            {
              "type": "attribute",
              "value": "slotId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "date",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "startTime",
              "visibility": "-",
              "data_type": "Time"
            },
            {
              "type": "attribute",
              "value": "endTime",
              "visibility": "-",
              "data_type": "Time"
            },
            {
              "type": "attribute",
              "value": "maxAppointments",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "method",
              "value": "setAvailability()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "belongsTo"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        },
        {
          "type": "class",
          "value": "Appointment",
          "children": [
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "TimeSlot"
                }
              ],
              "label": "scheduledIn"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system should notify users via email/SMS upon appointment creation, confirmation, or cancellation; notifications must log their time and type.",
    "PlantUML": "class Notification {\n  -notificationId: String\n  -message: String\n  -sentTime: DateTime\n  -type: String\n  +send()\n}\nNotification --> User : sentTo\n",
    "Model": "H26",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Notification",
          "children": [
            {
              "type": "attribute",
              "value": "notificationId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "message",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "sentTime",
              "visibility": "-",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "type",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "send()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "sentTo"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Customers can provide feedback and ratings after appointments, with each review linked to a specific service and containing a rating score and comment.",
    "PlantUML": "class Review {\n  -reviewId: String\n  -rating: int\n  -comment: String\n  +submitReview()\n}\nReview --> Service : for\nReview --> User : by\n",
    "Model": "H26",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Review",
          "children": [
            {
              "type": "attribute",
              "value": "reviewId",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "rating",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "comment",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "submitReview()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Service"
                }
              ],
              "label": "for"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "User"
                }
              ],
              "label": "by"
            }
          ]
        },
        {
          "type": "class",
          "value": "Service",
          "children": []
        },
        {
          "type": "class",
          "value": "User",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Administrators can view and manage users, services, appointments, and reviews, as well as generate reports on system usage statistics.",
    "PlantUML": "class AdminDashboard {\n  +viewUsers()\n  +manageServices()\n  +generateReports()\n}\nUser <|-- Admin\n",
    "Model": "H26",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AdminDashboard",
          "children": [
            {
              "type": "method",
              "value": "viewUsers()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "manageServices()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "generateReports()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Admin"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Admin",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "An Electronic Medical Records (EMR) system is designed to digitally collect, manage, and store patients’ medical information and treatment history, while enabling healthcare staff to register new patients with basic details such as name, date of birth, gender, and contact information.",
    "PlantUML": "class Patient {\n  + patientID : String;\n  + name : String;\n  + dateOfBirth : Date;\n  + gender : String;\n  + contactInfo : String;\n}\n\n",
    "Model": "H27",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Patient",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "Each patient will have a unique medical record containing past diagnoses, treatments, and doctor notes.",
    "PlantUML": "class MedicalRecord {\n  + recordID : String\n  + patientID : String\n  + createdAt : Date\n  + diagnosis : String\n  + treatment : String\n  + doctorNotes : String\n}\n\nPatient \"1\" -- \"*\" MedicalRecord : has >\n",
    "Model": "H27",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "MedicalRecord",
          "children": [
            {
              "type": "attribute",
              "value": "recordID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "patientID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "createdAt",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "diagnosis",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "treatment",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "doctorNotes",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Patient",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "MedicalRecord"
                }
              ],
              "label": "has >",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Doctors will be able to access a patient’s medical record and add new notes, diagnoses, or treatment history.",
    "PlantUML": "class Doctor {\n  + doctorID : String\n  + name : String\n  + specialty : String\n}\n\nDoctor \"1\" -- \"*\" MedicalRecord : updates",
    "Model": "H27",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Doctor",
          "children": [
            {
              "type": "attribute",
              "value": "doctorID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "specialty",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "MedicalRecord"
                }
              ],
              "label": "updates",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "MedicalRecord",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The system will allow patients to schedule appointments with available doctors based on time slots.",
    "PlantUML": "class Appointment {\n  + appointmentID : String\n  + time : DateTime\n  + patientID : String\n  + doctorID : String\n  + status : String\n}\n\nPatient \"1\" -- \"*\" Appointment : books \nDoctor \"1\" -- \"*\" Appointment : attends \n",
    "Model": "H27",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Appointment",
          "children": [
            {
              "type": "attribute",
              "value": "appointmentID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "time",
              "visibility": "+",
              "data_type": "DateTime"
            },
            {
              "type": "attribute",
              "value": "patientID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "doctorID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Patient",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Appointment"
                }
              ],
              "label": "books",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Doctor",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Appointment"
                }
              ],
              "label": "attends",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system will manage access through roles with defined privileges for admins, doctors, nurses, and receptionists.",
    "PlantUML": "class User {\n  + userID : String\n  + username : String\n  + passwordHash : String\n  + role : UserRole\n}\n\n\n",
    "Model": "H27",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "username",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "passwordHash",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "role",
              "visibility": "+",
              "data_type": "UserRole"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Nurses will be able to enter vital signs such as blood pressure and temperature into patient records.",
    "PlantUML": "class Vitals {\n  + vitalsID : String\n  + patientID : String\n  + measuredAt : Date\n  + bloodPressure : String\n  + temperature : Float\n}\n\nPatient \"1\" -- \"*\" Vitals : has >\nUser \"1\" -- \"*\" Vitals : enteredBy >\n",
    "Model": "H27",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Vitals",
          "children": [
            {
              "type": "attribute",
              "value": "vitalsID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "patientID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "measuredAt",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "bloodPressure",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "temperature",
              "visibility": "+",
              "data_type": "float"
            }
          ]
        },
        {
          "type": "class",
          "value": "Patient",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Vitals"
                }
              ],
              "label": "has >",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Vitals"
                }
              ],
              "label": "enteredBy >",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Doctors will be able to create and assign prescriptions linked to patient records.",
    "PlantUML": "class Prescription {\n  + prescriptionID : String\n  + medication : String\n  + dosage : String\n  + durationDays : Int\n  + doctorID : String\n  + patientID : String\n}\n\nDoctor \"1\" -- \"*\" Prescription : issues \nPatient \"1\" -- \"*\" Prescription : receives \n",
    "Model": "H27",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Prescription",
          "children": [
            {
              "type": "attribute",
              "value": "prescriptionID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "medication",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "dosage",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "durationDays",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "doctorID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "patientID",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Doctor",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Prescription"
                }
              ],
              "label": "issues",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Patient",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Prescription"
                }
              ],
              "label": "receives",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system will log all activities (create, update, delete) performed on records, including user and timestamp details.",
    "PlantUML": "class AuditLog {\n  + logID : String\n  + userID : String\n  + action : String\n  + targetEntity : String\n  + timestamp : DateTime\n}\n\nUser \"1\" -- \"*\" AuditLog : performs ",
    "Model": "H27",
    "RequirementIndex": "7",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "AuditLog",
          "children": [
            {
              "type": "attribute",
              "value": "logID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "userID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "action",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "targetEntity",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "timestamp",
              "visibility": "+",
              "data_type": "DateTime"
            }
          ]
        },
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "AuditLog"
                }
              ],
              "label": "performs",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Lab results should be uploaded and linked to corresponding medical records.",
    "PlantUML": "class LabResult {\n  + resultID : String\n  + recordID : String\n  + dateOfTest : Date\n  + resultSummary : String\n  + attachedFiles : String\n}\n\nMedicalRecord \"1\" -- \"*\" LabResult : includes \n",
    "Model": "H27",
    "RequirementIndex": "8",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "LabResult",
          "children": [
            {
              "type": "attribute",
              "value": "resultID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "recordID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "dateOfTest",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "resultSummary",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "attachedFiles",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "MedicalRecord",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "LabResult"
                }
              ],
              "label": "includes",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system will generate invoices for appointments, prescriptions, and lab tests.",
    "PlantUML": "class Invoice {\n  + invoiceID : String\n  + patientID : String\n  + totalAmount : Float\n  + issuedAt : Date\n  + paymentStatus : String\n}\n\nPatient \"1\" -- \"*\" Invoice : billed ",
    "Model": "H27",
    "RequirementIndex": "9",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Invoice",
          "children": [
            {
              "type": "attribute",
              "value": "invoiceID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "patientID",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "totalAmount",
              "visibility": "+",
              "data_type": "float"
            },
            {
              "type": "attribute",
              "value": "issuedAt",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "paymentStatus",
              "visibility": "+",
              "data_type": "string"
            }
          ]
        },
        {
          "type": "class",
          "value": "Patient",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Invoice"
                }
              ],
              "label": "billed",
              "multiplicity1": "1",
              "multiplicity2": "*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The Online Examination System allows students to take exams remotely while enabling teachers to create, manage, and evaluate exams electronically, supporting registration and login for multiple user roles—including Students, Teachers, and Administrators—each with a unique profile containing personal details and authentication credentials.",
    "PlantUML": "class User {\n  - userID: String\n  - username: String\n  - password: String\n  - email: String\n  + login()\n  + logout()\n}\n\nclass Student {\n  - studentID: String\n  + viewExam()\n  + takeExam()\n}\n\nclass Teacher {\n  - teacherID: String\n  + createExam()\n  + gradeExam()\n}\n\nclass Administrator {\n  + manageUsers()\n  + generateReports()\n}\n\nUser <|-- Student\nUser <|-- Teacher\nUser <|-- Administrator",
    "Model": "H28",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "username",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "password",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "email",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "login()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "logout()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Student"
                }
              ]
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Teacher"
                }
              ]
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Administrator"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Student",
          "children": [
            {
              "type": "attribute",
              "value": "studentID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "viewExam()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "takeExam()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Teacher",
          "children": [
            {
              "type": "attribute",
              "value": "teacherID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "createExam()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "gradeExam()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Administrator",
          "children": [
            {
              "type": "method",
              "value": "manageUsers()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "generateReports()",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Teachers must be able to create exams with various question types, such as multiple-choice, true/false, and descriptive questions; each exam can have a time limit, total marks, and be associated with specific courses or subjects.",
    "PlantUML": "class Exam {\n  - examID: String\n  - title: String\n  - duration: int\n  - totalMarks: int\n  + addQuestion(Question)\n  + removeQuestion(Question)\n}\n\nclass Question {\n  - questionID: String\n  - questionType: String\n  - text: String\n  - marks: int\n  + display()\n}\n\n\nTeacher \"1\" -- \"0..*\" Exam : creates\nExam \"1\" -- \"0..*\" Question : contains",
    "Model": "H28",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Exam",
          "children": [
            {
              "type": "attribute",
              "value": "examID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "title",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "duration",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "attribute",
              "value": "totalMarks",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "method",
              "value": "addQuestion(Question)",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "removeQuestion(Question)",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Question"
                }
              ],
              "label": "contains",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Question",
          "children": [
            {
              "type": "attribute",
              "value": "questionID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "questionType",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "text",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "marks",
              "visibility": "-",
              "data_type": "int"
            },
            {
              "type": "method",
              "value": "display()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Teacher",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Exam"
                }
              ],
              "label": "creates",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Students should be able to enroll in exams, answer questions within the allocated time, and submit answers electronically; the system should automatically manage exam start and end times.",
    "PlantUML": "class Enrollment {\n  - enrollmentID: String\n  - enrollmentDate: Date\n  + enrollStudent(Student, Exam)\n}\n\nStudent \"1\" -- \"0..*\" Enrollment : enrolls\nExam \"1\" -- \"0..*\" Enrollment : includes\nEnrollment \"1\" -- \"1\" Student\nEnrollment \"1\" -- \"1\" Exam",
    "Model": "H28",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Enrollment",
          "children": [
            {
              "type": "attribute",
              "value": "enrollmentID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "enrollmentDate",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "method",
              "value": "enrollStudent(Student, Exam)",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Student"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "1"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Exam"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Student",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Enrollment"
                }
              ],
              "label": "enrolls",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Exam",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Enrollment"
                }
              ],
              "label": "includes",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system should automatically grade objective questions (e.g., multiple-choice, true/false) and allow teachers to manually grade descriptive answers; grades must be stored and accessible by students and administrators.",
    "PlantUML": "class Grade {\n  - gradeID: String\n  - marksObtained: float\n  + calculateTotal()\n}\n\nTeacher \"1\" -- \"0..*\" Grade : assigns",
    "Model": "H28",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Grade",
          "children": [
            {
              "type": "attribute",
              "value": "gradeID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "marksObtained",
              "visibility": "-",
              "data_type": "float"
            },
            {
              "type": "method",
              "value": "calculateTotal()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Teacher",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Grade"
                }
              ],
              "label": "assigns",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "Administrators must generate reports on exam performance, participation rates, and average scores; the system should allow filtering reports by exam, course, or date.",
    "PlantUML": "class Report {\n  - reportID: String\n  - reportType: String\n  - generatedOn: Date\n  + generateReport()\n}\n\nclass Administrator {\n  + generateReports()\n}\n\nAdministrator \"1\" -- \"0..*\" Report : generates\nExam \"1\" -- \"0..*\" Report : analyzedIn\n",
    "Model": "H28",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Report",
          "children": [
            {
              "type": "attribute",
              "value": "reportID",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "reportType",
              "visibility": "-",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "generatedOn",
              "visibility": "-",
              "data_type": "Date"
            },
            {
              "type": "method",
              "value": "generateReport()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Administrator",
          "children": [
            {
              "type": "method",
              "value": "generateReports()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Report"
                }
              ],
              "label": "generates",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Exam",
          "children": [
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Report"
                }
              ],
              "label": "analyzedIn",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The Inventory Management System helps businesses efficiently track, manage, and control inventory levels, orders, sales, and deliveries by allowing users to add, update, and delete uniquely identifiable product details—such as name, description, SKU, price, and quantity in stock—while maintaining accurate, real-time stock levels that update with each transaction.",
    "PlantUML": "class Product {\n  + productId : String\n  + name : String\n  + description : String\n  + SKU : String\n  + price : double\n  + quantityInStock : int\n  + updateStock(amount : int)\n}\n\n",
    "Model": "H29",
    "RequirementIndex": "0",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Product",
          "children": [
            {
              "type": "attribute",
              "value": "productId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "SKU",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "price",
              "visibility": "+",
              "data_type": "double"
            },
            {
              "type": "attribute",
              "value": "quantityInStock",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "method",
              "value": "updateStock(amount : int)",
              "visibility": "+"
            }
          ]
        }
      ]
    }
  },
  {
    "HumanLang": "The system will store and manage supplier information, including supplier name and contact details, while maintaining the relationship between each supplier and the multiple products they supply.",
    "PlantUML": "\nclass Supplier {\n  +supplierId : String\n  +name : String\n  +contactInfo : String\n}\n\n\nSupplier \"1\" -- \"0..*\" Product : supplies \n",
    "Model": "H29",
    "RequirementIndex": "1",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Supplier",
          "children": [
            {
              "type": "attribute",
              "value": "supplierId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "contactInfo",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Product"
                }
              ],
              "label": "supplies",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Product",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The system will record inventory transactions, including stock additions (purchases) and reductions (sales or disposals), capturing details such as date, product, quantity, and transaction type.",
    "PlantUML": "class InventoryTransaction {\n  + transactionId : String\n  + date : Date\n  + transactionType : String\n  + quantity : int\n}\n\n\nInventoryTransaction \"1\" --> \"1\" Product\n",
    "Model": "H29",
    "RequirementIndex": "2",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "InventoryTransaction",
          "children": [
            {
              "type": "attribute",
              "value": "transactionId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "date",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "transactionType",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "quantity",
              "visibility": "+",
              "data_type": "int"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Product"
                }
              ],
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Product",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The system will support order creation for purchasing products from suppliers and fulfilling customer orders from inventory, while tracking order status (e.g., Pending, Completed), order date, and related products with their quantities.",
    "PlantUML": "class Order {\n  + orderId : String\n  + orderDate : Date\n  + status : String\n\n  + placeOrder() : void\n  + updateStatus(newStatus : String) : void\n}\n\nOrder \"1\" --> \"1..*\" Product : contains \nOrder \"1\" --> \"1\" Supplier : placedFrom \n",
    "Model": "H29",
    "RequirementIndex": "3",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Order",
          "children": [
            {
              "type": "attribute",
              "value": "orderId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "orderDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "attribute",
              "value": "status",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "placeOrder()",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "method",
              "value": "updateStatus(newStatus : String)",
              "visibility": "+",
              "data_type": "void"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Product"
                }
              ],
              "label": "contains",
              "multiplicity1": "1",
              "multiplicity2": "1..*"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Supplier"
                }
              ],
              "label": "placedFrom",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Product",
          "children": []
        },
        {
          "type": "class",
          "value": "Supplier",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The system will manage users with roles such as Admin, Warehouse Manager, and Salesperson, each having different permissions like managing products, processing orders, or viewing reports.",
    "PlantUML": "class User {\n  + userId : String\n  + username : String\n  + role : String\n\n  + login()\n  + logout()\n}\n\n\nUser <|-- Admin\nUser <|-- WarehouseManager\nUser <|-- Salesperson\n",
    "Model": "H29",
    "RequirementIndex": "4",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "User",
          "children": [
            {
              "type": "attribute",
              "value": "userId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "username",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "role",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "login()",
              "visibility": "+"
            },
            {
              "type": "method",
              "value": "logout()",
              "visibility": "+"
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Admin"
                }
              ]
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "WarehouseManager"
                }
              ]
            },
            {
              "type": "relation",
              "value": "<|--",
              "children": [
                {
                  "type": "class",
                  "value": "Salesperson"
                }
              ]
            }
          ]
        },
        {
          "type": "class",
          "value": "Admin",
          "children": []
        },
        {
          "type": "class",
          "value": "WarehouseManager",
          "children": []
        },
        {
          "type": "class",
          "value": "Salesperson",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The system will generate reports on inventory levels, sales, and purchase history, and alert users when stock levels fall below predefined thresholds to prevent stockouts.",
    "PlantUML": "class Report {\n  + reportId : String\n  + reportType : String\n  + generate()\n}\n\n\nclass Alert {\n  + alertId : String\n  + message : String\n  + alertDate : Date\n}\n\n\nAlert \"1\" --> \"1\" Product : concerns\n",
    "Model": "H29",
    "RequirementIndex": "5",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Report",
          "children": [
            {
              "type": "attribute",
              "value": "reportId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "reportType",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "method",
              "value": "generate()",
              "visibility": "+"
            }
          ]
        },
        {
          "type": "class",
          "value": "Alert",
          "children": [
            {
              "type": "attribute",
              "value": "alertId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "message",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "alertDate",
              "visibility": "+",
              "data_type": "Date"
            },
            {
              "type": "relation",
              "value": "-->",
              "children": [
                {
                  "type": "class",
                  "value": "Product"
                }
              ],
              "label": "concerns",
              "multiplicity1": "1",
              "multiplicity2": "1"
            }
          ]
        },
        {
          "type": "class",
          "value": "Product",
          "children": []
        }
      ]
    }
  },
  {
    "HumanLang": "The system will allow organizing products into categories for improved inventory grouping and searching, where each product belongs to one category and each category can contain multiple products.",
    "PlantUML": "class Category {\n  + categoryId : String\n  + name : String\n  + description : String\n}\n\n\nCategory \"1\" -- \"0..*\" Product : includes\n",
    "Model": "H29",
    "RequirementIndex": "6",
    "Output_AST": {
      "type": "root",
      "children": [
        {
          "type": "class",
          "value": "Category",
          "children": [
            {
              "type": "attribute",
              "value": "categoryId",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "name",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "attribute",
              "value": "description",
              "visibility": "+",
              "data_type": "string"
            },
            {
              "type": "relation",
              "value": "--",
              "children": [
                {
                  "type": "class",
                  "value": "Product"
                }
              ],
              "label": "includes",
              "multiplicity1": "1",
              "multiplicity2": "0..*"
            }
          ]
        },
        {
          "type": "class",
          "value": "Product",
          "children": []
        }
      ]
    }
  }
]