@startuml
class NetworkMonitor {
    +collectMetrics()
    +storeMetrics()
}

class NetworkMetrics {
    +latency: int
    +bandwidthUsage: int
    +packetLoss: int
}

NetworkMonitor -- NetworkMetrics : collects >

class NetworkTrafficAnalyzer {
    +analyzeTraffic()
    +detectBottlenecks()
}

class NetworkTraffic {
    +incomingTraffic: int
    +outgoingTraffic: int
}

NetworkTrafficAnalyzer -- NetworkTraffic : analyzes >

class AlertSystem {
    +generateAlert()
    +sendAlert()
}

NetworkMonitor -- AlertSystem : triggers >
AlertSystem -- NetworkMetrics : uses >

class HistoricalData {
    +storeData()
    +retrieveData()
}

NetworkMonitor -- HistoricalData : stores >

class User {
    +authenticate()
    +viewReports()
}

class Authentication {
    +validateUser()
}

User -- Authentication : uses >

class NetworkDevice {
    +deviceID: int
    +deviceType: String
    +status: String
}

class DeviceManager {
    +addDevice()
    +removeDevice()
    +updateDeviceStatus()
}

DeviceManager -- NetworkDevice : manages >

class Report {
    +generateReport()
    +displayReport()
}

NetworkMonitor -- Report : creates >

class ThresholdConfig {
    +setThreshold()
    +updateThreshold()
}

AlertSystem -- ThresholdConfig : checks >

class Troubleshooter {
    +identifyIssue()
    +attemptFix()
}

NetworkMonitor -- Troubleshooter : triggers >

class ThirdPartyAPI {
    +fetchData()
    +sendData()
}

NetworkMonitor -- ThirdPartyAPI : integrates >

@enduml
