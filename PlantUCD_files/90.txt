@startuml

class TrafficSensor {
  +sensorId: String
  +location: String
  +vehicleCount: int
  +averageSpeed: float
  +status: String
}
class SensorData {
  +sensorId: String
  +timestamp: Date
  +vehicleCount: int
  +averageSpeed: float
}
TrafficSensor "1" -- "*" SensorData : collects

class TrafficDataProcessor {
  +processData(sensorData: SensorData): TrafficCondition
}
class TrafficCondition {
  +congestionLevel: String
  +vehicleCount: int
  +averageSpeed: float
}
TrafficDataProcessor "1" -- "*" TrafficCondition : generates

class TrafficAlert {
  +alertId: String
  +alertType: String
  +timestamp: Date
  +message: String
}
class AlertManager {
  +sendAlert(alert: TrafficAlert): void
}
TrafficAlert "1" -- "1" AlertManager : triggers

class TrafficMap {
  +location: String
  +trafficCondition: TrafficCondition
}
TrafficCondition "1" -- "1" TrafficMap : displays

class HistoricalData {
  +startDate: Date
  +endDate: Date
  +trafficConditions: List<TrafficCondition>
}
HistoricalData "1" -- "*" TrafficCondition : includes

class TrafficEvent {
  +eventId: String
  +eventType: String
  +timestamp: Date
  +description: String
}
class EventLogger {
  +logEvent(event: TrafficEvent): void
}
TrafficEvent "1" -- "1" EventLogger : logged by

class Database {
  +storeData(data: Any): void
  +retrieveData(query: String): List<Any>
}
class TrafficSensor {
  +sensorId: String
}
Database "1" -- "*" TrafficSensor : stores

class UserInterface {
  +displayMap(map: TrafficMap): void
  +displayReport(report: TrafficReport): void
}
class TrafficReport {
  +reportId: String
  +reportDate: Date
  +trafficCondition: TrafficCondition
}
UserInterface "1" -- "*" TrafficReport : generates

class MaintenanceAlert {
  +alertId: String
  +timestamp: Date
  +sensorId: String
  +issueDescription: String
}
class MaintenanceManager {
  +sendAlert(alert: MaintenanceAlert): void
}
MaintenanceAlert "1" -- "1" MaintenanceManager : triggers

class TrafficPredictor {
  +predictTrafficConditions(data: List<HistoricalData>, realTimeData: TrafficCondition): TrafficCondition
}
HistoricalData "1" -- "*" TrafficPredictor : analyzed by

@enduml
