@startuml
class CodeAnalyzer {
    +analyzeCode(sourceCode: String): AnalysisResult
}

class AnalysisResult {
    +classNames: List<String>
    +methodNames: List<String>
    +variableNames: List<String>
}

CodeAnalyzer --|> AnalysisResult

class SyntaxErrorDetector {
    +detectErrors(sourceCode: String): List<Error>
}

class Error {
    +line: int
    +column: int
    +message: String
}

SyntaxErrorDetector --|> Error

class ComplexityCalculator {
    +calculateComplexity(sourceCode: String): int
}

class CodeMetrics {
    +linesOfCode: int
    +functionCount: int
    +functionSizes: List<int>
}

class RefactoringSuggestion {
    +suggestion: String
    +location: String
}

class RefactoringEngine {
    +generateSuggestions(sourceCode: String): List<RefactoringSuggestion>
}

RefactoringEngine --|> RefactoringSuggestion

class CodeStyleChecker {
    +checkStyle(sourceCode: String): List<FormattingIssue>
}

class FormattingIssue {
    +line: int
    +message: String
}

CodeStyleChecker --|> FormattingIssue

class DependencyAnalyzer {
    +analyzeDependencies(sourceCode: String): List<Dependency>
}

class Dependency {
    +name: String
    +isUsed: boolean
}

DependencyAnalyzer --|> Dependency

class CodeCloneDetector {
    +detectClones(sourceCode: String): List<CodeClone>
}

class CodeClone {
    +startLine: int
    +endLine: int
    +codeSegment: String
}

CodeCloneDetector --|> CodeClone

class ReportGenerator {
    +generateReport(analysisResults: AnalysisResult): Report
}

class Report {
    +content: String
}

ReportGenerator --|> Report

class UserInterface {
    +uploadCode(): void
    +showAnalysisResults(results: AnalysisResult): void
    +showReport(report: Report): void
}

UserInterface --|> AnalysisResult
UserInterface --|> Report
@enduml