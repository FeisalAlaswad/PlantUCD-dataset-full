@startuml

class EnergyUsageMonitor {
    + monitorRealTimeUsage(): void
}

class Unit {
    - unitID: String
    - energyConsumed: Float
}

EnergyUsageMonitor "1" -- "many" Unit : monitors

class RenewableEnergyTracker {
    + trackSolarEnergy(): void
    + trackWindEnergy(): void
}

class RenewableSource {
    - sourceType: String
    - energyProduced: Float
}

RenewableEnergyTracker "1" -- "many" RenewableSource : tracks

class ReportGenerator {
    + generateUsageReport(): Report
}

class Report {
    - reportID: String
    - details: String
}

ReportGenerator "1" -- "many" Report : generates

class ThresholdManager {
    + setThreshold(unit: Unit, limit: Float): void
}

ThresholdManager "1" -- "many" Unit : manages

class AlertSystem {
    + sendAlert(unit: Unit, consumption: Float): void
}

AlertSystem "1" -- "many" Unit : alerts

class IoTDevice {
    - deviceID: String
    - dataCollected: Float
}

class EnergyManagementSystem {
    + integrateIoTDevice(device: IoTDevice): void
}

EnergyManagementSystem "1" -- "many" IoTDevice : integrates

class EnergyOptimizer {
    + optimizeDistribution(): void
}

EnergyOptimizer "1" -- "many" Unit : optimizes

class EnergyForecaster {
    + forecastEnergyDemand(): Float
}

class HistoricalData {
    - dataID: String
    - consumption: Float
}

EnergyForecaster "1" -- "many" HistoricalData : uses

class User {
    - userID: String
    - role: String
}

class RoleManager {
    + assignRole(user: User, role: String): void
}

RoleManager "1" -- "many" User : manages

class EfficiencyCalculator {
    + calculateEfficiency(unit: Unit): Float
}

EfficiencyCalculator "1" -- "many" Unit : calculates

@enduml
