@startuml
class User {
    +userID: int
    +username: String
    +password: String
    +email: String
    +signIn(): void
    +signOut(): void
    +signUp(): void
}

class Administrator {
    +handleUserAccounts(): void
    +handleProductListings(): void
}

class Client {
    +displayProfile(): void
    +modifyProfile(): void
}

User <|-- Administrator
User <|-- Client

class Product {
    +productID: int
    +productName: String
    +productDescription: String
    +productPrice: float
    +quantityInStock: int
    +createProduct(): void
    +modifyProduct(): void
    +deleteProduct(): void
}

class Category {
    +categoryID: int
    +categoryName: String
    +categoryDescription: String
}

Product --> Category : "is categorized under"

class ShoppingCart {
    +cartID: int
    +addItem(Product, quantity: int): void
    +deleteItem(Product): void
    +changeQuantity(Product, quantity: int): void
    +computeTotal(): float
}

class CartItem {
    +quantity: int
}

ShoppingCart "1" *-- "0..*" CartItem
CartItem --> Product : "holds"

class Order {
    +orderID: int
    +orderDate: Date
    +status: String
    +computeTotal(): float
    +submitOrder(): void
    +revokeOrder(): void
}

class OrderItem {
    +quantity: int
    +computeSubtotal(): float
}

Client "1" --> "0..*" Order
Order "1" *-- "1..*" OrderItem
OrderItem --> Product

class Payment {
    +paymentID: int
    +amount: float
    +processPayment(): void
}

class CreditCard {
    +cardNumber: String
    +expiryDate: Date
    +cvv: String
    +authorize(): void
}

class PayPal {
    +email: String
    +authorize(): void
}

Payment <|-- CreditCard
Payment <|-- PayPal
Order --> Payment : "is paid by"

class Review {
    +reviewID: int
    +rating: int
    +comment: String
    +submitFeedback(): void
}

Client --> Review : "writes"
Review --> Product : "regarding"

class Inventory {
    +inventoryID: int
    +adjustStock(Product, quantity: int): void
    +getStockLevel(Product): int
}

Inventory --> Product : "oversees"
Product --> Inventory : "adjusts stock"
@enduml