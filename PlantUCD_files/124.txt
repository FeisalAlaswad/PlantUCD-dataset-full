@startUML
class Email {
    +content: String
    +isSpam(): Boolean
}

class KeywordFilter {
    +keywords: List<String>
    +filterEmail(email: Email): Boolean
}

Email --> KeywordFilter : uses

class SpamKeywordDatabase {
    +keywords: List<String>
    +addKeyword(keyword: String): void
    +removeKeyword(keyword: String): void
}

class Admin {
    +updateKeywords(): void
}

Admin --> SpamKeywordDatabase : manages

class User {
    +reportAsSpam(email: Email): void
    +reportAsNotSpam(email: Email): void
}

class FeedbackProcessor {
    +processFeedback(email: Email, isSpam: Boolean): void
}

User --> FeedbackProcessor : sends feedback
FeedbackProcessor --> SpamKeywordDatabase : updates

class EmailService {
    +fetchEmails(): List<Email>
}

EmailService --> Email : provides

class MLModel {
    +trainModel(data: List<Email>): void
    +classifyEmail(email: Email): Boolean
}

Email --> MLModel : analyzed by

class Whitelist {
    +trustedSenders: List<String>
    +addSender(email: String): void
    +removeSender(email: String): void
}

User --> Whitelist : manages

class Report {
    +generateReport(): void
}

class ReportGenerator {
    +createReport(): Report
}

ReportGenerator --> Report : creates

class SpamBlocker {
    +blockEmail(email: Email): void
}

Email --> SpamBlocker : processed by

class CustomFilter {
    +rules: List<String>
    +applyFilter(email: Email): Boolean
}

User --> CustomFilter : defines
Email --> CustomFilter : processed by

class SecurityModule {
    +encryptData(data: String): String
    +decryptData(data: String): String
}

EmailService --> SecurityModule : communicates securely
@endUML
